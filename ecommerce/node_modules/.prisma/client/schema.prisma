generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cart {
  userid    String  @db.VarChar(40)
  productid String  @db.VarChar(40)
  quantity  Int?
  product   product @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_cart_product1")
  users     users   @relation(fields: [userid], references: [id], onUpdate: Restrict, map: "fk_cart_users1")

  @@id([userid, productid])
  @@index([productid], map: "fk_cart_product1_idx")
}

model category {
  id                                          Int            @id
  name                                        String?        @db.VarChar(64)
  imagepath                                   String?        @db.VarChar(255)
  categoryprod                                categoryprod[]
  subcategory_subcategory_maincatidTocategory subcategory[]  @relation("subcategory_maincatidTocategory")
  subcategory_subcategory_subcatidTocategory  subcategory[]  @relation("subcategory_subcatidTocategory")
}

model categoryprod {
  categoryid Int
  productid  String   @db.VarChar(40)
  category   category @relation(fields: [categoryid], references: [id], onUpdate: Restrict, map: "fk_table1_category1")
  product    product  @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_table1_product1")

  @@id([categoryid, productid])
  @@index([productid], map: "fk_table1_product1_idx")
}

model deliveryservice {
  id           String         @id @db.VarChar(40)
  name         String?        @db.VarChar(64)
  fee          Decimal?       @db.Decimal(10, 2)
  orderdetails orderdetails[]
}

model discount {
  id            String          @id @db.VarChar(40)
  discname      String?         @db.VarChar(64)
  type          Int?            @db.TinyInt
  discvalue     Int?
  minpurchase   Decimal?        @db.Decimal(10, 2)
  maxdisc       Decimal?        @db.Decimal(10, 2)
  discountitems discountitems[]
}

model discountitems {
  discid    String   @db.VarChar(40)
  productid String   @db.VarChar(40)
  discount  discount @relation(fields: [discid], references: [id], onUpdate: Restrict, map: "fk_discountitems_discount1")
  product   product  @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_discountitems_product1")

  @@id([discid, productid])
  @@index([productid], map: "fk_discountitems_product1_idx")
}

model orderdetails {
  orderid         String          @db.VarChar(40)
  productid       String          @db.VarChar(40)
  quantity        Int?
  deliveryid      String          @db.VarChar(40)
  orders          orders          @relation(fields: [orderid], references: [id], onUpdate: Restrict, map: "fk_orderdet_orders1")
  product         product         @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_orderdet_product1")
  deliveryservice deliveryservice @relation(fields: [deliveryid], references: [id], onUpdate: Restrict, map: "fk_orderdetails_deliveryservice1")

  @@id([orderid, productid, deliveryid])
  @@index([productid], map: "fk_orderdet_product1_idx")
  @@index([deliveryid], map: "fk_orderdetails_deliveryservice1_idx")
}

model orders {
  id             String         @unique(map: "id_UNIQUE") @db.VarChar(40)
  userid         String         @db.VarChar(40)
  paydetid       String         @db.VarChar(40)
  payserviceid   String         @db.VarChar(40)
  orderdetails   orderdetails[]
  paymentdetails paymentdetails @relation(fields: [paydetid], references: [id], onUpdate: Restrict, map: "fk_orders_paymentdetails1")
  paymentservice paymentservice @relation(fields: [payserviceid], references: [id], onUpdate: Restrict, map: "fk_orders_paymentservice1")
  users          users          @relation(fields: [userid], references: [id], onUpdate: Restrict, map: "fk_orders_users1")

  @@id([id, userid, paydetid, payserviceid])
  @@index([paydetid], map: "fk_orders_paymentdetails1_idx")
  @@index([payserviceid], map: "fk_orders_paymentservice1_idx")
  @@index([userid], map: "fk_orders_users1_idx")
}

model paymentdetails {
  id     String                 @id @db.VarChar(40)
  total  Decimal?               @db.Decimal(10, 2)
  status paymentdetails_status?
  orders orders[]
}

model paymentservice {
  id     String   @id @db.VarChar(40)
  name   String?  @db.VarChar(64)
  fee    Decimal? @db.Decimal(10, 2)
  orders orders[]
}

model product {
  id            String          @unique(map: "id_UNIQUE") @db.VarChar(40)
  shopid        String          @db.VarChar(40)
  productname   String?         @db.VarChar(255)
  description   String?         @db.MediumText
  price         Decimal?        @db.Decimal(10, 2)
  stock         Int?
  cart          cart[]
  categoryprod  categoryprod[]
  discountitems discountitems[]
  orderdetails  orderdetails[]
  shop          shop            @relation(fields: [shopid], references: [id], onUpdate: Restrict, map: "fk_product_shop1")
  productimg    productimg[]
  userreview    userreview[]

  @@id([id, shopid])
  @@index([shopid], map: "fk_product_shop1_idx")
}

model productimg {
  productid String  @db.VarChar(40)
  imagepath String  @db.VarChar(255)
  type      String? @db.VarChar(16)
  product   product @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_productimg_product1")

  @@id([productid, imagepath])
}

model shop {
  id        String    @unique(map: "id_UNIQUE") @db.VarChar(40)
  ownerid   String    @db.VarChar(40)
  shopname  String?   @db.VarChar(64)
  shoptype  String?   @db.VarChar(64)
  address   String?   @db.VarChar(128)
  imagepath String?   @db.VarChar(255)
  product   product[]
  users     users     @relation(fields: [ownerid], references: [id], onUpdate: Restrict, map: "fk_shop_users")

  @@id([id, ownerid])
  @@index([ownerid], map: "fk_shop_users_idx")
}

model subcategory {
  maincatid                                Int
  subcatid                                 Int
  category_subcategory_maincatidTocategory category @relation("subcategory_maincatidTocategory", fields: [maincatid], references: [id], onUpdate: Restrict, map: "fk_subcategory_category1")
  category_subcategory_subcatidTocategory  category @relation("subcategory_subcatidTocategory", fields: [subcatid], references: [id], onUpdate: Restrict, map: "fk_subcategory_category2")

  @@id([maincatid, subcatid])
  @@index([subcatid], map: "fk_subcategory_category2_idx")
}

model userreview {
  userid    String   @db.VarChar(40)
  productid String   @db.VarChar(40)
  rating    Decimal? @db.Decimal(4, 2)
  review    String?  @db.MediumText
  product   product  @relation(fields: [productid], references: [id], onUpdate: Restrict, map: "fk_userreview_product1")
  users     users    @relation(fields: [userid], references: [id], onUpdate: Restrict, map: "fk_userreview_users1")

  @@id([userid, productid])
  @@index([productid], map: "fk_userreview_product1_idx")
}

model users {
  id         String       @id @db.VarChar(40)
  name       String?      @db.VarChar(128)
  username   String?      @db.VarChar(64)
  email      String?      @db.VarChar(64)
  password   String?      @db.VarChar(128)
  shopowner  Boolean?     @default(false)
  saldo      Decimal?     @db.Decimal(12, 2)
  imagepath  String?      @db.VarChar(255)
  cart       cart[]
  orders     orders[]
  shop       shop[]
  userreview userreview[]
}

enum paymentdetails_status {
  paid
  unpaid
}
