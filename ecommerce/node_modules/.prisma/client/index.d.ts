
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model cart
 * 
 */
export type cart = {
  userid: string
  productid: string
  quantity: number | null
}

/**
 * Model category
 * 
 */
export type category = {
  id: number
  name: string | null
  imagepath: string | null
}

/**
 * Model categoryprod
 * 
 */
export type categoryprod = {
  categoryid: number
  productid: string
}

/**
 * Model deliveryservice
 * 
 */
export type deliveryservice = {
  id: string
  name: string | null
  fee: Prisma.Decimal | null
}

/**
 * Model discount
 * 
 */
export type discount = {
  id: string
  discname: string | null
  type: number | null
  discvalue: number | null
  minpurchase: Prisma.Decimal | null
  maxdisc: Prisma.Decimal | null
}

/**
 * Model discountitems
 * 
 */
export type discountitems = {
  discid: string
  productid: string
}

/**
 * Model orderdetails
 * 
 */
export type orderdetails = {
  orderid: string
  productid: string
  quantity: number | null
  deliveryid: string
}

/**
 * Model orders
 * 
 */
export type orders = {
  id: string
  userid: string
  paydetid: string
  payserviceid: string
}

/**
 * Model paymentdetails
 * 
 */
export type paymentdetails = {
  id: string
  total: Prisma.Decimal | null
  status: paymentdetails_status | null
}

/**
 * Model paymentservice
 * 
 */
export type paymentservice = {
  id: string
  name: string | null
  fee: Prisma.Decimal | null
}

/**
 * Model product
 * 
 */
export type product = {
  id: string
  shopid: string
  productname: string | null
  description: string | null
  price: Prisma.Decimal | null
  stock: number | null
}

/**
 * Model productimg
 * 
 */
export type productimg = {
  productid: string
  imagepath: string
  type: string | null
}

/**
 * Model shop
 * 
 */
export type shop = {
  id: string
  ownerid: string
  shopname: string | null
  shoptype: string | null
  address: string | null
  imagepath: string | null
}

/**
 * Model subcategory
 * 
 */
export type subcategory = {
  maincatid: number
  subcatid: number
}

/**
 * Model userreview
 * 
 */
export type userreview = {
  userid: string
  productid: string
  rating: Prisma.Decimal | null
  review: string | null
}

/**
 * Model users
 * 
 */
export type users = {
  id: string
  name: string | null
  username: string | null
  email: string | null
  password: string | null
  shopowner: boolean | null
  saldo: Prisma.Decimal | null
  imagepath: string | null
}


/**
 * Enums
 */

export const paymentdetails_status: {
  paid: 'paid',
  unpaid: 'unpaid'
};

export type paymentdetails_status = (typeof paymentdetails_status)[keyof typeof paymentdetails_status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carts
 * const carts = await prisma.cart.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carts
   * const carts = await prisma.cart.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.cart`: Exposes CRUD operations for the **cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.cartDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<GlobalReject>;

  /**
   * `prisma.categoryprod`: Exposes CRUD operations for the **categoryprod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categoryprods
    * const categoryprods = await prisma.categoryprod.findMany()
    * ```
    */
  get categoryprod(): Prisma.categoryprodDelegate<GlobalReject>;

  /**
   * `prisma.deliveryservice`: Exposes CRUD operations for the **deliveryservice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliveryservices
    * const deliveryservices = await prisma.deliveryservice.findMany()
    * ```
    */
  get deliveryservice(): Prisma.deliveryserviceDelegate<GlobalReject>;

  /**
   * `prisma.discount`: Exposes CRUD operations for the **discount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discounts
    * const discounts = await prisma.discount.findMany()
    * ```
    */
  get discount(): Prisma.discountDelegate<GlobalReject>;

  /**
   * `prisma.discountitems`: Exposes CRUD operations for the **discountitems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discountitems
    * const discountitems = await prisma.discountitems.findMany()
    * ```
    */
  get discountitems(): Prisma.discountitemsDelegate<GlobalReject>;

  /**
   * `prisma.orderdetails`: Exposes CRUD operations for the **orderdetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orderdetails
    * const orderdetails = await prisma.orderdetails.findMany()
    * ```
    */
  get orderdetails(): Prisma.orderdetailsDelegate<GlobalReject>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<GlobalReject>;

  /**
   * `prisma.paymentdetails`: Exposes CRUD operations for the **paymentdetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paymentdetails
    * const paymentdetails = await prisma.paymentdetails.findMany()
    * ```
    */
  get paymentdetails(): Prisma.paymentdetailsDelegate<GlobalReject>;

  /**
   * `prisma.paymentservice`: Exposes CRUD operations for the **paymentservice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paymentservices
    * const paymentservices = await prisma.paymentservice.findMany()
    * ```
    */
  get paymentservice(): Prisma.paymentserviceDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<GlobalReject>;

  /**
   * `prisma.productimg`: Exposes CRUD operations for the **productimg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productimgs
    * const productimgs = await prisma.productimg.findMany()
    * ```
    */
  get productimg(): Prisma.productimgDelegate<GlobalReject>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.shopDelegate<GlobalReject>;

  /**
   * `prisma.subcategory`: Exposes CRUD operations for the **subcategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subcategories
    * const subcategories = await prisma.subcategory.findMany()
    * ```
    */
  get subcategory(): Prisma.subcategoryDelegate<GlobalReject>;

  /**
   * `prisma.userreview`: Exposes CRUD operations for the **userreview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Userreviews
    * const userreviews = await prisma.userreview.findMany()
    * ```
    */
  get userreview(): Prisma.userreviewDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cart: 'cart',
    category: 'category',
    categoryprod: 'categoryprod',
    deliveryservice: 'deliveryservice',
    discount: 'discount',
    discountitems: 'discountitems',
    orderdetails: 'orderdetails',
    orders: 'orders',
    paymentdetails: 'paymentdetails',
    paymentservice: 'paymentservice',
    product: 'product',
    productimg: 'productimg',
    shop: 'shop',
    subcategory: 'subcategory',
    userreview: 'userreview',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    categoryprod: number
    subcategory_subcategory_maincatidTocategory: number
    subcategory_subcategory_subcatidTocategory: number
  }

  export type CategoryCountOutputTypeSelect = {
    categoryprod?: boolean
    subcategory_subcategory_maincatidTocategory?: boolean
    subcategory_subcategory_subcatidTocategory?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type DeliveryserviceCountOutputType
   */


  export type DeliveryserviceCountOutputType = {
    orderdetails: number
  }

  export type DeliveryserviceCountOutputTypeSelect = {
    orderdetails?: boolean
  }

  export type DeliveryserviceCountOutputTypeGetPayload<S extends boolean | null | undefined | DeliveryserviceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DeliveryserviceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DeliveryserviceCountOutputTypeArgs)
    ? DeliveryserviceCountOutputType 
    : S extends { select: any } & (DeliveryserviceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DeliveryserviceCountOutputType ? DeliveryserviceCountOutputType[P] : never
  } 
      : DeliveryserviceCountOutputType




  // Custom InputTypes

  /**
   * DeliveryserviceCountOutputType without action
   */
  export type DeliveryserviceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DeliveryserviceCountOutputType
     */
    select?: DeliveryserviceCountOutputTypeSelect | null
  }



  /**
   * Count Type DiscountCountOutputType
   */


  export type DiscountCountOutputType = {
    discountitems: number
  }

  export type DiscountCountOutputTypeSelect = {
    discountitems?: boolean
  }

  export type DiscountCountOutputTypeGetPayload<S extends boolean | null | undefined | DiscountCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DiscountCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (DiscountCountOutputTypeArgs)
    ? DiscountCountOutputType 
    : S extends { select: any } & (DiscountCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof DiscountCountOutputType ? DiscountCountOutputType[P] : never
  } 
      : DiscountCountOutputType




  // Custom InputTypes

  /**
   * DiscountCountOutputType without action
   */
  export type DiscountCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DiscountCountOutputType
     */
    select?: DiscountCountOutputTypeSelect | null
  }



  /**
   * Count Type OrdersCountOutputType
   */


  export type OrdersCountOutputType = {
    orderdetails: number
  }

  export type OrdersCountOutputTypeSelect = {
    orderdetails?: boolean
  }

  export type OrdersCountOutputTypeGetPayload<S extends boolean | null | undefined | OrdersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? OrdersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (OrdersCountOutputTypeArgs)
    ? OrdersCountOutputType 
    : S extends { select: any } & (OrdersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof OrdersCountOutputType ? OrdersCountOutputType[P] : never
  } 
      : OrdersCountOutputType




  // Custom InputTypes

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect | null
  }



  /**
   * Count Type PaymentdetailsCountOutputType
   */


  export type PaymentdetailsCountOutputType = {
    orders: number
  }

  export type PaymentdetailsCountOutputTypeSelect = {
    orders?: boolean
  }

  export type PaymentdetailsCountOutputTypeGetPayload<S extends boolean | null | undefined | PaymentdetailsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PaymentdetailsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PaymentdetailsCountOutputTypeArgs)
    ? PaymentdetailsCountOutputType 
    : S extends { select: any } & (PaymentdetailsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PaymentdetailsCountOutputType ? PaymentdetailsCountOutputType[P] : never
  } 
      : PaymentdetailsCountOutputType




  // Custom InputTypes

  /**
   * PaymentdetailsCountOutputType without action
   */
  export type PaymentdetailsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PaymentdetailsCountOutputType
     */
    select?: PaymentdetailsCountOutputTypeSelect | null
  }



  /**
   * Count Type PaymentserviceCountOutputType
   */


  export type PaymentserviceCountOutputType = {
    orders: number
  }

  export type PaymentserviceCountOutputTypeSelect = {
    orders?: boolean
  }

  export type PaymentserviceCountOutputTypeGetPayload<S extends boolean | null | undefined | PaymentserviceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PaymentserviceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PaymentserviceCountOutputTypeArgs)
    ? PaymentserviceCountOutputType 
    : S extends { select: any } & (PaymentserviceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PaymentserviceCountOutputType ? PaymentserviceCountOutputType[P] : never
  } 
      : PaymentserviceCountOutputType




  // Custom InputTypes

  /**
   * PaymentserviceCountOutputType without action
   */
  export type PaymentserviceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PaymentserviceCountOutputType
     */
    select?: PaymentserviceCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    cart: number
    categoryprod: number
    discountitems: number
    orderdetails: number
    productimg: number
    userreview: number
  }

  export type ProductCountOutputTypeSelect = {
    cart?: boolean
    categoryprod?: boolean
    discountitems?: boolean
    orderdetails?: boolean
    productimg?: boolean
    userreview?: boolean
  }

  export type ProductCountOutputTypeGetPayload<S extends boolean | null | undefined | ProductCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProductCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProductCountOutputTypeArgs)
    ? ProductCountOutputType 
    : S extends { select: any } & (ProductCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
      : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type ShopCountOutputType
   */


  export type ShopCountOutputType = {
    product: number
  }

  export type ShopCountOutputTypeSelect = {
    product?: boolean
  }

  export type ShopCountOutputTypeGetPayload<S extends boolean | null | undefined | ShopCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ShopCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ShopCountOutputTypeArgs)
    ? ShopCountOutputType 
    : S extends { select: any } & (ShopCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ShopCountOutputType ? ShopCountOutputType[P] : never
  } 
      : ShopCountOutputType




  // Custom InputTypes

  /**
   * ShopCountOutputType without action
   */
  export type ShopCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShopCountOutputType
     */
    select?: ShopCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    cart: number
    orders: number
    shop: number
    userreview: number
  }

  export type UsersCountOutputTypeSelect = {
    cart?: boolean
    orders?: boolean
    shop?: boolean
    userreview?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model cart
   */


  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    quantity: number | null
  }

  export type CartSumAggregateOutputType = {
    quantity: number | null
  }

  export type CartMinAggregateOutputType = {
    userid: string | null
    productid: string | null
    quantity: number | null
  }

  export type CartMaxAggregateOutputType = {
    userid: string | null
    productid: string | null
    quantity: number | null
  }

  export type CartCountAggregateOutputType = {
    userid: number
    productid: number
    quantity: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    quantity?: true
  }

  export type CartSumAggregateInputType = {
    quantity?: true
  }

  export type CartMinAggregateInputType = {
    userid?: true
    productid?: true
    quantity?: true
  }

  export type CartMaxAggregateInputType = {
    userid?: true
    productid?: true
    quantity?: true
  }

  export type CartCountAggregateInputType = {
    userid?: true
    productid?: true
    quantity?: true
    _all?: true
  }

  export type CartAggregateArgs = {
    /**
     * Filter which cart to aggregate.
     */
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     */
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs = {
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithAggregationInput>
    by: CartScalarFieldEnum[]
    having?: cartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _avg?: CartAvgAggregateInputType
    _sum?: CartSumAggregateInputType
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }


  export type CartGroupByOutputType = {
    userid: string
    productid: string
    quantity: number | null
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type cartSelect = {
    userid?: boolean
    productid?: boolean
    quantity?: boolean
    product?: boolean | productArgs
    users?: boolean | usersArgs
  }


  export type cartInclude = {
    product?: boolean | productArgs
    users?: boolean | usersArgs
  }

  export type cartGetPayload<S extends boolean | null | undefined | cartArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? cart :
    S extends undefined ? never :
    S extends { include: any } & (cartArgs | cartFindManyArgs)
    ? cart  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? productGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (cartArgs | cartFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? productGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof cart ? cart[P] : never
  } 
      : cart


  type cartCountArgs = 
    Omit<cartFindManyArgs, 'select' | 'include'> & {
      select?: CartCountAggregateInputType | true
    }

  export interface cartDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Cart that matches the filter.
     * @param {cartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, cartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'cart'> extends True ? Prisma__cartClient<cartGetPayload<T>> : Prisma__cartClient<cartGetPayload<T> | null, null>

    /**
     * Find one Cart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cartFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, cartFindUniqueOrThrowArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, cartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'cart'> extends True ? Prisma__cartClient<cartGetPayload<T>> : Prisma__cartClient<cartGetPayload<T> | null, null>

    /**
     * Find the first Cart that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cartFindFirstOrThrowArgs>(
      args?: SelectSubset<T, cartFindFirstOrThrowArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `userid`
     * const cartWithUseridOnly = await prisma.cart.findMany({ select: { userid: true } })
     * 
    **/
    findMany<T extends cartFindManyArgs>(
      args?: SelectSubset<T, cartFindManyArgs>
    ): Prisma.PrismaPromise<Array<cartGetPayload<T>>>

    /**
     * Create a Cart.
     * @param {cartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
    **/
    create<T extends cartCreateArgs>(
      args: SelectSubset<T, cartCreateArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Create many Carts.
     *     @param {cartCreateManyArgs} args - Arguments to create many Carts.
     *     @example
     *     // Create many Carts
     *     const cart = await prisma.cart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cartCreateManyArgs>(
      args?: SelectSubset<T, cartCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cart.
     * @param {cartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
    **/
    delete<T extends cartDeleteArgs>(
      args: SelectSubset<T, cartDeleteArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Update one Cart.
     * @param {cartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cartUpdateArgs>(
      args: SelectSubset<T, cartUpdateArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Delete zero or more Carts.
     * @param {cartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cartDeleteManyArgs>(
      args?: SelectSubset<T, cartDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cartUpdateManyArgs>(
      args: SelectSubset<T, cartUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cart.
     * @param {cartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
    **/
    upsert<T extends cartUpsertArgs>(
      args: SelectSubset<T, cartUpsertArgs>
    ): Prisma__cartClient<cartGetPayload<T>>

    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends cartCountArgs>(
      args?: Subset<T, cartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__cartClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * cart base type for findUnique actions
   */
  export type cartFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     */
    where: cartWhereUniqueInput
  }

  /**
   * cart findUnique
   */
  export interface cartFindUniqueArgs extends cartFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart findUniqueOrThrow
   */
  export type cartFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     */
    where: cartWhereUniqueInput
  }


  /**
   * cart base type for findFirst actions
   */
  export type cartFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     */
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     */
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carts.
     */
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carts.
     */
    distinct?: Enumerable<CartScalarFieldEnum>
  }

  /**
   * cart findFirst
   */
  export interface cartFindFirstArgs extends cartFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * cart findFirstOrThrow
   */
  export type cartFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter, which cart to fetch.
     */
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     */
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for carts.
     */
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of carts.
     */
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * cart findMany
   */
  export type cartFindManyArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter, which carts to fetch.
     */
    where?: cartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of carts to fetch.
     */
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing carts.
     */
    cursor?: cartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` carts.
     */
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * cart create
   */
  export type cartCreateArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * The data needed to create a cart.
     */
    data: XOR<cartCreateInput, cartUncheckedCreateInput>
  }


  /**
   * cart createMany
   */
  export type cartCreateManyArgs = {
    /**
     * The data used to create many carts.
     */
    data: Enumerable<cartCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * cart update
   */
  export type cartUpdateArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * The data needed to update a cart.
     */
    data: XOR<cartUpdateInput, cartUncheckedUpdateInput>
    /**
     * Choose, which cart to update.
     */
    where: cartWhereUniqueInput
  }


  /**
   * cart updateMany
   */
  export type cartUpdateManyArgs = {
    /**
     * The data used to update carts.
     */
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyInput>
    /**
     * Filter which carts to update
     */
    where?: cartWhereInput
  }


  /**
   * cart upsert
   */
  export type cartUpsertArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * The filter to search for the cart to update in case it exists.
     */
    where: cartWhereUniqueInput
    /**
     * In case the cart found by the `where` argument doesn't exist, create a new cart with this data.
     */
    create: XOR<cartCreateInput, cartUncheckedCreateInput>
    /**
     * In case the cart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cartUpdateInput, cartUncheckedUpdateInput>
  }


  /**
   * cart delete
   */
  export type cartDeleteArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    /**
     * Filter which cart to delete.
     */
    where: cartWhereUniqueInput
  }


  /**
   * cart deleteMany
   */
  export type cartDeleteManyArgs = {
    /**
     * Filter which carts to delete
     */
    where?: cartWhereInput
  }


  /**
   * cart without action
   */
  export type cartArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    imagepath: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    imagepath: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    imagepath: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    imagepath?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    imagepath?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    imagepath?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: categoryWhereInput
    orderBy?: Enumerable<categoryOrderByWithAggregationInput>
    by: CategoryScalarFieldEnum[]
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string | null
    imagepath: string | null
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect = {
    id?: boolean
    name?: boolean
    imagepath?: boolean
    categoryprod?: boolean | category$categoryprodArgs
    subcategory_subcategory_maincatidTocategory?: boolean | category$subcategory_subcategory_maincatidTocategoryArgs
    subcategory_subcategory_subcatidTocategory?: boolean | category$subcategory_subcategory_subcatidTocategoryArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type categoryInclude = {
    categoryprod?: boolean | category$categoryprodArgs
    subcategory_subcategory_maincatidTocategory?: boolean | category$subcategory_subcategory_maincatidTocategoryArgs
    subcategory_subcategory_subcatidTocategory?: boolean | category$subcategory_subcategory_subcatidTocategoryArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type categoryGetPayload<S extends boolean | null | undefined | categoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? category :
    S extends undefined ? never :
    S extends { include: any } & (categoryArgs | categoryFindManyArgs)
    ? category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'categoryprod' ? Array < categoryprodGetPayload<S['include'][P]>>  :
        P extends 'subcategory_subcategory_maincatidTocategory' ? Array < subcategoryGetPayload<S['include'][P]>>  :
        P extends 'subcategory_subcategory_subcatidTocategory' ? Array < subcategoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (categoryArgs | categoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'categoryprod' ? Array < categoryprodGetPayload<S['select'][P]>>  :
        P extends 'subcategory_subcategory_maincatidTocategory' ? Array < subcategoryGetPayload<S['select'][P]>>  :
        P extends 'subcategory_subcategory_subcatidTocategory' ? Array < subcategoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof category ? category[P] : never
  } 
      : category


  type categoryCountArgs = 
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'category'> extends True ? Prisma__categoryClient<categoryGetPayload<T>> : Prisma__categoryClient<categoryGetPayload<T> | null, null>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'category'> extends True ? Prisma__categoryClient<categoryGetPayload<T>> : Prisma__categoryClient<categoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs>(
      args?: SelectSubset<T, categoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<categoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs>(
      args: SelectSubset<T, categoryCreateArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs>(
      args?: SelectSubset<T, categoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs>(
      args: SelectSubset<T, categoryDeleteArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs>(
      args: SelectSubset<T, categoryUpdateArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs>(
      args?: SelectSubset<T, categoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs>(
      args: SelectSubset<T, categoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs>(
      args: SelectSubset<T, categoryUpsertArgs>
    ): Prisma__categoryClient<categoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    categoryprod<T extends category$categoryprodArgs= {}>(args?: Subset<T, category$categoryprodArgs>): Prisma.PrismaPromise<Array<categoryprodGetPayload<T>>| Null>;

    subcategory_subcategory_maincatidTocategory<T extends category$subcategory_subcategory_maincatidTocategoryArgs= {}>(args?: Subset<T, category$subcategory_subcategory_maincatidTocategoryArgs>): Prisma.PrismaPromise<Array<subcategoryGetPayload<T>>| Null>;

    subcategory_subcategory_subcatidTocategory<T extends category$subcategory_subcategory_subcatidTocategoryArgs= {}>(args?: Subset<T, category$subcategory_subcategory_subcatidTocategoryArgs>): Prisma.PrismaPromise<Array<subcategoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * category base type for findUnique actions
   */
  export type categoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findUnique
   */
  export interface categoryFindUniqueArgs extends categoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category base type for findFirst actions
   */
  export type categoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * category findFirst
   */
  export interface categoryFindFirstArgs extends categoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category create
   */
  export type categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs = {
    /**
     * The data used to create many categories.
     */
    data: Enumerable<categoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }


  /**
   * category.categoryprod
   */
  export type category$categoryprodArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    where?: categoryprodWhereInput
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    cursor?: categoryprodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CategoryprodScalarFieldEnum>
  }


  /**
   * category.subcategory_subcategory_maincatidTocategory
   */
  export type category$subcategory_subcategory_maincatidTocategoryArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    where?: subcategoryWhereInput
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    cursor?: subcategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubcategoryScalarFieldEnum>
  }


  /**
   * category.subcategory_subcategory_subcatidTocategory
   */
  export type category$subcategory_subcategory_subcatidTocategoryArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    where?: subcategoryWhereInput
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    cursor?: subcategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubcategoryScalarFieldEnum>
  }


  /**
   * category without action
   */
  export type categoryArgs = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude | null
  }



  /**
   * Model categoryprod
   */


  export type AggregateCategoryprod = {
    _count: CategoryprodCountAggregateOutputType | null
    _avg: CategoryprodAvgAggregateOutputType | null
    _sum: CategoryprodSumAggregateOutputType | null
    _min: CategoryprodMinAggregateOutputType | null
    _max: CategoryprodMaxAggregateOutputType | null
  }

  export type CategoryprodAvgAggregateOutputType = {
    categoryid: number | null
  }

  export type CategoryprodSumAggregateOutputType = {
    categoryid: number | null
  }

  export type CategoryprodMinAggregateOutputType = {
    categoryid: number | null
    productid: string | null
  }

  export type CategoryprodMaxAggregateOutputType = {
    categoryid: number | null
    productid: string | null
  }

  export type CategoryprodCountAggregateOutputType = {
    categoryid: number
    productid: number
    _all: number
  }


  export type CategoryprodAvgAggregateInputType = {
    categoryid?: true
  }

  export type CategoryprodSumAggregateInputType = {
    categoryid?: true
  }

  export type CategoryprodMinAggregateInputType = {
    categoryid?: true
    productid?: true
  }

  export type CategoryprodMaxAggregateInputType = {
    categoryid?: true
    productid?: true
  }

  export type CategoryprodCountAggregateInputType = {
    categoryid?: true
    productid?: true
    _all?: true
  }

  export type CategoryprodAggregateArgs = {
    /**
     * Filter which categoryprod to aggregate.
     */
    where?: categoryprodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoryprods to fetch.
     */
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryprodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoryprods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoryprods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categoryprods
    **/
    _count?: true | CategoryprodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryprodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryprodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryprodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryprodMaxAggregateInputType
  }

  export type GetCategoryprodAggregateType<T extends CategoryprodAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryprod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryprod[P]>
      : GetScalarType<T[P], AggregateCategoryprod[P]>
  }




  export type CategoryprodGroupByArgs = {
    where?: categoryprodWhereInput
    orderBy?: Enumerable<categoryprodOrderByWithAggregationInput>
    by: CategoryprodScalarFieldEnum[]
    having?: categoryprodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryprodCountAggregateInputType | true
    _avg?: CategoryprodAvgAggregateInputType
    _sum?: CategoryprodSumAggregateInputType
    _min?: CategoryprodMinAggregateInputType
    _max?: CategoryprodMaxAggregateInputType
  }


  export type CategoryprodGroupByOutputType = {
    categoryid: number
    productid: string
    _count: CategoryprodCountAggregateOutputType | null
    _avg: CategoryprodAvgAggregateOutputType | null
    _sum: CategoryprodSumAggregateOutputType | null
    _min: CategoryprodMinAggregateOutputType | null
    _max: CategoryprodMaxAggregateOutputType | null
  }

  type GetCategoryprodGroupByPayload<T extends CategoryprodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategoryprodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryprodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryprodGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryprodGroupByOutputType[P]>
        }
      >
    >


  export type categoryprodSelect = {
    categoryid?: boolean
    productid?: boolean
    category?: boolean | categoryArgs
    product?: boolean | productArgs
  }


  export type categoryprodInclude = {
    category?: boolean | categoryArgs
    product?: boolean | productArgs
  }

  export type categoryprodGetPayload<S extends boolean | null | undefined | categoryprodArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? categoryprod :
    S extends undefined ? never :
    S extends { include: any } & (categoryprodArgs | categoryprodFindManyArgs)
    ? categoryprod  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? categoryGetPayload<S['include'][P]> :
        P extends 'product' ? productGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (categoryprodArgs | categoryprodFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? categoryGetPayload<S['select'][P]> :
        P extends 'product' ? productGetPayload<S['select'][P]> :  P extends keyof categoryprod ? categoryprod[P] : never
  } 
      : categoryprod


  type categoryprodCountArgs = 
    Omit<categoryprodFindManyArgs, 'select' | 'include'> & {
      select?: CategoryprodCountAggregateInputType | true
    }

  export interface categoryprodDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Categoryprod that matches the filter.
     * @param {categoryprodFindUniqueArgs} args - Arguments to find a Categoryprod
     * @example
     * // Get one Categoryprod
     * const categoryprod = await prisma.categoryprod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryprodFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryprodFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'categoryprod'> extends True ? Prisma__categoryprodClient<categoryprodGetPayload<T>> : Prisma__categoryprodClient<categoryprodGetPayload<T> | null, null>

    /**
     * Find one Categoryprod that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryprodFindUniqueOrThrowArgs} args - Arguments to find a Categoryprod
     * @example
     * // Get one Categoryprod
     * const categoryprod = await prisma.categoryprod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryprodFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, categoryprodFindUniqueOrThrowArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Find the first Categoryprod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryprodFindFirstArgs} args - Arguments to find a Categoryprod
     * @example
     * // Get one Categoryprod
     * const categoryprod = await prisma.categoryprod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryprodFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryprodFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'categoryprod'> extends True ? Prisma__categoryprodClient<categoryprodGetPayload<T>> : Prisma__categoryprodClient<categoryprodGetPayload<T> | null, null>

    /**
     * Find the first Categoryprod that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryprodFindFirstOrThrowArgs} args - Arguments to find a Categoryprod
     * @example
     * // Get one Categoryprod
     * const categoryprod = await prisma.categoryprod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryprodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, categoryprodFindFirstOrThrowArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Find zero or more Categoryprods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryprodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categoryprods
     * const categoryprods = await prisma.categoryprod.findMany()
     * 
     * // Get first 10 Categoryprods
     * const categoryprods = await prisma.categoryprod.findMany({ take: 10 })
     * 
     * // Only select the `categoryid`
     * const categoryprodWithCategoryidOnly = await prisma.categoryprod.findMany({ select: { categoryid: true } })
     * 
    **/
    findMany<T extends categoryprodFindManyArgs>(
      args?: SelectSubset<T, categoryprodFindManyArgs>
    ): Prisma.PrismaPromise<Array<categoryprodGetPayload<T>>>

    /**
     * Create a Categoryprod.
     * @param {categoryprodCreateArgs} args - Arguments to create a Categoryprod.
     * @example
     * // Create one Categoryprod
     * const Categoryprod = await prisma.categoryprod.create({
     *   data: {
     *     // ... data to create a Categoryprod
     *   }
     * })
     * 
    **/
    create<T extends categoryprodCreateArgs>(
      args: SelectSubset<T, categoryprodCreateArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Create many Categoryprods.
     *     @param {categoryprodCreateManyArgs} args - Arguments to create many Categoryprods.
     *     @example
     *     // Create many Categoryprods
     *     const categoryprod = await prisma.categoryprod.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryprodCreateManyArgs>(
      args?: SelectSubset<T, categoryprodCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoryprod.
     * @param {categoryprodDeleteArgs} args - Arguments to delete one Categoryprod.
     * @example
     * // Delete one Categoryprod
     * const Categoryprod = await prisma.categoryprod.delete({
     *   where: {
     *     // ... filter to delete one Categoryprod
     *   }
     * })
     * 
    **/
    delete<T extends categoryprodDeleteArgs>(
      args: SelectSubset<T, categoryprodDeleteArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Update one Categoryprod.
     * @param {categoryprodUpdateArgs} args - Arguments to update one Categoryprod.
     * @example
     * // Update one Categoryprod
     * const categoryprod = await prisma.categoryprod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryprodUpdateArgs>(
      args: SelectSubset<T, categoryprodUpdateArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Delete zero or more Categoryprods.
     * @param {categoryprodDeleteManyArgs} args - Arguments to filter Categoryprods to delete.
     * @example
     * // Delete a few Categoryprods
     * const { count } = await prisma.categoryprod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryprodDeleteManyArgs>(
      args?: SelectSubset<T, categoryprodDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categoryprods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryprodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categoryprods
     * const categoryprod = await prisma.categoryprod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryprodUpdateManyArgs>(
      args: SelectSubset<T, categoryprodUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoryprod.
     * @param {categoryprodUpsertArgs} args - Arguments to update or create a Categoryprod.
     * @example
     * // Update or create a Categoryprod
     * const categoryprod = await prisma.categoryprod.upsert({
     *   create: {
     *     // ... data to create a Categoryprod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoryprod we want to update
     *   }
     * })
    **/
    upsert<T extends categoryprodUpsertArgs>(
      args: SelectSubset<T, categoryprodUpsertArgs>
    ): Prisma__categoryprodClient<categoryprodGetPayload<T>>

    /**
     * Count the number of Categoryprods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryprodCountArgs} args - Arguments to filter Categoryprods to count.
     * @example
     * // Count the number of Categoryprods
     * const count = await prisma.categoryprod.count({
     *   where: {
     *     // ... the filter for the Categoryprods we want to count
     *   }
     * })
    **/
    count<T extends categoryprodCountArgs>(
      args?: Subset<T, categoryprodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryprodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoryprod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryprodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryprodAggregateArgs>(args: Subset<T, CategoryprodAggregateArgs>): Prisma.PrismaPromise<GetCategoryprodAggregateType<T>>

    /**
     * Group by Categoryprod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryprodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryprodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryprodGroupByArgs['orderBy'] }
        : { orderBy?: CategoryprodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryprodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryprodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for categoryprod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryprodClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends categoryArgs= {}>(args?: Subset<T, categoryArgs>): Prisma__categoryClient<categoryGetPayload<T> | Null>;

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * categoryprod base type for findUnique actions
   */
  export type categoryprodFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter, which categoryprod to fetch.
     */
    where: categoryprodWhereUniqueInput
  }

  /**
   * categoryprod findUnique
   */
  export interface categoryprodFindUniqueArgs extends categoryprodFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * categoryprod findUniqueOrThrow
   */
  export type categoryprodFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter, which categoryprod to fetch.
     */
    where: categoryprodWhereUniqueInput
  }


  /**
   * categoryprod base type for findFirst actions
   */
  export type categoryprodFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter, which categoryprod to fetch.
     */
    where?: categoryprodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoryprods to fetch.
     */
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoryprods.
     */
    cursor?: categoryprodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoryprods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoryprods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoryprods.
     */
    distinct?: Enumerable<CategoryprodScalarFieldEnum>
  }

  /**
   * categoryprod findFirst
   */
  export interface categoryprodFindFirstArgs extends categoryprodFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * categoryprod findFirstOrThrow
   */
  export type categoryprodFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter, which categoryprod to fetch.
     */
    where?: categoryprodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoryprods to fetch.
     */
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categoryprods.
     */
    cursor?: categoryprodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoryprods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoryprods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categoryprods.
     */
    distinct?: Enumerable<CategoryprodScalarFieldEnum>
  }


  /**
   * categoryprod findMany
   */
  export type categoryprodFindManyArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter, which categoryprods to fetch.
     */
    where?: categoryprodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categoryprods to fetch.
     */
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categoryprods.
     */
    cursor?: categoryprodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categoryprods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categoryprods.
     */
    skip?: number
    distinct?: Enumerable<CategoryprodScalarFieldEnum>
  }


  /**
   * categoryprod create
   */
  export type categoryprodCreateArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * The data needed to create a categoryprod.
     */
    data: XOR<categoryprodCreateInput, categoryprodUncheckedCreateInput>
  }


  /**
   * categoryprod createMany
   */
  export type categoryprodCreateManyArgs = {
    /**
     * The data used to create many categoryprods.
     */
    data: Enumerable<categoryprodCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * categoryprod update
   */
  export type categoryprodUpdateArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * The data needed to update a categoryprod.
     */
    data: XOR<categoryprodUpdateInput, categoryprodUncheckedUpdateInput>
    /**
     * Choose, which categoryprod to update.
     */
    where: categoryprodWhereUniqueInput
  }


  /**
   * categoryprod updateMany
   */
  export type categoryprodUpdateManyArgs = {
    /**
     * The data used to update categoryprods.
     */
    data: XOR<categoryprodUpdateManyMutationInput, categoryprodUncheckedUpdateManyInput>
    /**
     * Filter which categoryprods to update
     */
    where?: categoryprodWhereInput
  }


  /**
   * categoryprod upsert
   */
  export type categoryprodUpsertArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * The filter to search for the categoryprod to update in case it exists.
     */
    where: categoryprodWhereUniqueInput
    /**
     * In case the categoryprod found by the `where` argument doesn't exist, create a new categoryprod with this data.
     */
    create: XOR<categoryprodCreateInput, categoryprodUncheckedCreateInput>
    /**
     * In case the categoryprod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryprodUpdateInput, categoryprodUncheckedUpdateInput>
  }


  /**
   * categoryprod delete
   */
  export type categoryprodDeleteArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    /**
     * Filter which categoryprod to delete.
     */
    where: categoryprodWhereUniqueInput
  }


  /**
   * categoryprod deleteMany
   */
  export type categoryprodDeleteManyArgs = {
    /**
     * Filter which categoryprods to delete
     */
    where?: categoryprodWhereInput
  }


  /**
   * categoryprod without action
   */
  export type categoryprodArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
  }



  /**
   * Model deliveryservice
   */


  export type AggregateDeliveryservice = {
    _count: DeliveryserviceCountAggregateOutputType | null
    _avg: DeliveryserviceAvgAggregateOutputType | null
    _sum: DeliveryserviceSumAggregateOutputType | null
    _min: DeliveryserviceMinAggregateOutputType | null
    _max: DeliveryserviceMaxAggregateOutputType | null
  }

  export type DeliveryserviceAvgAggregateOutputType = {
    fee: Decimal | null
  }

  export type DeliveryserviceSumAggregateOutputType = {
    fee: Decimal | null
  }

  export type DeliveryserviceMinAggregateOutputType = {
    id: string | null
    name: string | null
    fee: Decimal | null
  }

  export type DeliveryserviceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fee: Decimal | null
  }

  export type DeliveryserviceCountAggregateOutputType = {
    id: number
    name: number
    fee: number
    _all: number
  }


  export type DeliveryserviceAvgAggregateInputType = {
    fee?: true
  }

  export type DeliveryserviceSumAggregateInputType = {
    fee?: true
  }

  export type DeliveryserviceMinAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type DeliveryserviceMaxAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type DeliveryserviceCountAggregateInputType = {
    id?: true
    name?: true
    fee?: true
    _all?: true
  }

  export type DeliveryserviceAggregateArgs = {
    /**
     * Filter which deliveryservice to aggregate.
     */
    where?: deliveryserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryservices to fetch.
     */
    orderBy?: Enumerable<deliveryserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deliveryserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliveryservices
    **/
    _count?: true | DeliveryserviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveryserviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveryserviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryserviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryserviceMaxAggregateInputType
  }

  export type GetDeliveryserviceAggregateType<T extends DeliveryserviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryservice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryservice[P]>
      : GetScalarType<T[P], AggregateDeliveryservice[P]>
  }




  export type DeliveryserviceGroupByArgs = {
    where?: deliveryserviceWhereInput
    orderBy?: Enumerable<deliveryserviceOrderByWithAggregationInput>
    by: DeliveryserviceScalarFieldEnum[]
    having?: deliveryserviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryserviceCountAggregateInputType | true
    _avg?: DeliveryserviceAvgAggregateInputType
    _sum?: DeliveryserviceSumAggregateInputType
    _min?: DeliveryserviceMinAggregateInputType
    _max?: DeliveryserviceMaxAggregateInputType
  }


  export type DeliveryserviceGroupByOutputType = {
    id: string
    name: string | null
    fee: Decimal | null
    _count: DeliveryserviceCountAggregateOutputType | null
    _avg: DeliveryserviceAvgAggregateOutputType | null
    _sum: DeliveryserviceSumAggregateOutputType | null
    _min: DeliveryserviceMinAggregateOutputType | null
    _max: DeliveryserviceMaxAggregateOutputType | null
  }

  type GetDeliveryserviceGroupByPayload<T extends DeliveryserviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DeliveryserviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryserviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryserviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryserviceGroupByOutputType[P]>
        }
      >
    >


  export type deliveryserviceSelect = {
    id?: boolean
    name?: boolean
    fee?: boolean
    orderdetails?: boolean | deliveryservice$orderdetailsArgs
    _count?: boolean | DeliveryserviceCountOutputTypeArgs
  }


  export type deliveryserviceInclude = {
    orderdetails?: boolean | deliveryservice$orderdetailsArgs
    _count?: boolean | DeliveryserviceCountOutputTypeArgs
  }

  export type deliveryserviceGetPayload<S extends boolean | null | undefined | deliveryserviceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? deliveryservice :
    S extends undefined ? never :
    S extends { include: any } & (deliveryserviceArgs | deliveryserviceFindManyArgs)
    ? deliveryservice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['include'][P]>>  :
        P extends '_count' ? DeliveryserviceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (deliveryserviceArgs | deliveryserviceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['select'][P]>>  :
        P extends '_count' ? DeliveryserviceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof deliveryservice ? deliveryservice[P] : never
  } 
      : deliveryservice


  type deliveryserviceCountArgs = 
    Omit<deliveryserviceFindManyArgs, 'select' | 'include'> & {
      select?: DeliveryserviceCountAggregateInputType | true
    }

  export interface deliveryserviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Deliveryservice that matches the filter.
     * @param {deliveryserviceFindUniqueArgs} args - Arguments to find a Deliveryservice
     * @example
     * // Get one Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deliveryserviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, deliveryserviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'deliveryservice'> extends True ? Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>> : Prisma__deliveryserviceClient<deliveryserviceGetPayload<T> | null, null>

    /**
     * Find one Deliveryservice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {deliveryserviceFindUniqueOrThrowArgs} args - Arguments to find a Deliveryservice
     * @example
     * // Get one Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends deliveryserviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, deliveryserviceFindUniqueOrThrowArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Find the first Deliveryservice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryserviceFindFirstArgs} args - Arguments to find a Deliveryservice
     * @example
     * // Get one Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deliveryserviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, deliveryserviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'deliveryservice'> extends True ? Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>> : Prisma__deliveryserviceClient<deliveryserviceGetPayload<T> | null, null>

    /**
     * Find the first Deliveryservice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryserviceFindFirstOrThrowArgs} args - Arguments to find a Deliveryservice
     * @example
     * // Get one Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends deliveryserviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, deliveryserviceFindFirstOrThrowArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Find zero or more Deliveryservices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryserviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliveryservices
     * const deliveryservices = await prisma.deliveryservice.findMany()
     * 
     * // Get first 10 Deliveryservices
     * const deliveryservices = await prisma.deliveryservice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryserviceWithIdOnly = await prisma.deliveryservice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends deliveryserviceFindManyArgs>(
      args?: SelectSubset<T, deliveryserviceFindManyArgs>
    ): Prisma.PrismaPromise<Array<deliveryserviceGetPayload<T>>>

    /**
     * Create a Deliveryservice.
     * @param {deliveryserviceCreateArgs} args - Arguments to create a Deliveryservice.
     * @example
     * // Create one Deliveryservice
     * const Deliveryservice = await prisma.deliveryservice.create({
     *   data: {
     *     // ... data to create a Deliveryservice
     *   }
     * })
     * 
    **/
    create<T extends deliveryserviceCreateArgs>(
      args: SelectSubset<T, deliveryserviceCreateArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Create many Deliveryservices.
     *     @param {deliveryserviceCreateManyArgs} args - Arguments to create many Deliveryservices.
     *     @example
     *     // Create many Deliveryservices
     *     const deliveryservice = await prisma.deliveryservice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deliveryserviceCreateManyArgs>(
      args?: SelectSubset<T, deliveryserviceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Deliveryservice.
     * @param {deliveryserviceDeleteArgs} args - Arguments to delete one Deliveryservice.
     * @example
     * // Delete one Deliveryservice
     * const Deliveryservice = await prisma.deliveryservice.delete({
     *   where: {
     *     // ... filter to delete one Deliveryservice
     *   }
     * })
     * 
    **/
    delete<T extends deliveryserviceDeleteArgs>(
      args: SelectSubset<T, deliveryserviceDeleteArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Update one Deliveryservice.
     * @param {deliveryserviceUpdateArgs} args - Arguments to update one Deliveryservice.
     * @example
     * // Update one Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deliveryserviceUpdateArgs>(
      args: SelectSubset<T, deliveryserviceUpdateArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Delete zero or more Deliveryservices.
     * @param {deliveryserviceDeleteManyArgs} args - Arguments to filter Deliveryservices to delete.
     * @example
     * // Delete a few Deliveryservices
     * const { count } = await prisma.deliveryservice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deliveryserviceDeleteManyArgs>(
      args?: SelectSubset<T, deliveryserviceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliveryservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryserviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliveryservices
     * const deliveryservice = await prisma.deliveryservice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deliveryserviceUpdateManyArgs>(
      args: SelectSubset<T, deliveryserviceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deliveryservice.
     * @param {deliveryserviceUpsertArgs} args - Arguments to update or create a Deliveryservice.
     * @example
     * // Update or create a Deliveryservice
     * const deliveryservice = await prisma.deliveryservice.upsert({
     *   create: {
     *     // ... data to create a Deliveryservice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliveryservice we want to update
     *   }
     * })
    **/
    upsert<T extends deliveryserviceUpsertArgs>(
      args: SelectSubset<T, deliveryserviceUpsertArgs>
    ): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T>>

    /**
     * Count the number of Deliveryservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliveryserviceCountArgs} args - Arguments to filter Deliveryservices to count.
     * @example
     * // Count the number of Deliveryservices
     * const count = await prisma.deliveryservice.count({
     *   where: {
     *     // ... the filter for the Deliveryservices we want to count
     *   }
     * })
    **/
    count<T extends deliveryserviceCountArgs>(
      args?: Subset<T, deliveryserviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryserviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliveryservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryserviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryserviceAggregateArgs>(args: Subset<T, DeliveryserviceAggregateArgs>): Prisma.PrismaPromise<GetDeliveryserviceAggregateType<T>>

    /**
     * Group by Deliveryservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryserviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveryserviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveryserviceGroupByArgs['orderBy'] }
        : { orderBy?: DeliveryserviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveryserviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryserviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for deliveryservice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__deliveryserviceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orderdetails<T extends deliveryservice$orderdetailsArgs= {}>(args?: Subset<T, deliveryservice$orderdetailsArgs>): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * deliveryservice base type for findUnique actions
   */
  export type deliveryserviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter, which deliveryservice to fetch.
     */
    where: deliveryserviceWhereUniqueInput
  }

  /**
   * deliveryservice findUnique
   */
  export interface deliveryserviceFindUniqueArgs extends deliveryserviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliveryservice findUniqueOrThrow
   */
  export type deliveryserviceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter, which deliveryservice to fetch.
     */
    where: deliveryserviceWhereUniqueInput
  }


  /**
   * deliveryservice base type for findFirst actions
   */
  export type deliveryserviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter, which deliveryservice to fetch.
     */
    where?: deliveryserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryservices to fetch.
     */
    orderBy?: Enumerable<deliveryserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveryservices.
     */
    cursor?: deliveryserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveryservices.
     */
    distinct?: Enumerable<DeliveryserviceScalarFieldEnum>
  }

  /**
   * deliveryservice findFirst
   */
  export interface deliveryserviceFindFirstArgs extends deliveryserviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * deliveryservice findFirstOrThrow
   */
  export type deliveryserviceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter, which deliveryservice to fetch.
     */
    where?: deliveryserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryservices to fetch.
     */
    orderBy?: Enumerable<deliveryserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliveryservices.
     */
    cursor?: deliveryserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliveryservices.
     */
    distinct?: Enumerable<DeliveryserviceScalarFieldEnum>
  }


  /**
   * deliveryservice findMany
   */
  export type deliveryserviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter, which deliveryservices to fetch.
     */
    where?: deliveryserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliveryservices to fetch.
     */
    orderBy?: Enumerable<deliveryserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliveryservices.
     */
    cursor?: deliveryserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliveryservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliveryservices.
     */
    skip?: number
    distinct?: Enumerable<DeliveryserviceScalarFieldEnum>
  }


  /**
   * deliveryservice create
   */
  export type deliveryserviceCreateArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * The data needed to create a deliveryservice.
     */
    data: XOR<deliveryserviceCreateInput, deliveryserviceUncheckedCreateInput>
  }


  /**
   * deliveryservice createMany
   */
  export type deliveryserviceCreateManyArgs = {
    /**
     * The data used to create many deliveryservices.
     */
    data: Enumerable<deliveryserviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * deliveryservice update
   */
  export type deliveryserviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * The data needed to update a deliveryservice.
     */
    data: XOR<deliveryserviceUpdateInput, deliveryserviceUncheckedUpdateInput>
    /**
     * Choose, which deliveryservice to update.
     */
    where: deliveryserviceWhereUniqueInput
  }


  /**
   * deliveryservice updateMany
   */
  export type deliveryserviceUpdateManyArgs = {
    /**
     * The data used to update deliveryservices.
     */
    data: XOR<deliveryserviceUpdateManyMutationInput, deliveryserviceUncheckedUpdateManyInput>
    /**
     * Filter which deliveryservices to update
     */
    where?: deliveryserviceWhereInput
  }


  /**
   * deliveryservice upsert
   */
  export type deliveryserviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * The filter to search for the deliveryservice to update in case it exists.
     */
    where: deliveryserviceWhereUniqueInput
    /**
     * In case the deliveryservice found by the `where` argument doesn't exist, create a new deliveryservice with this data.
     */
    create: XOR<deliveryserviceCreateInput, deliveryserviceUncheckedCreateInput>
    /**
     * In case the deliveryservice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deliveryserviceUpdateInput, deliveryserviceUncheckedUpdateInput>
  }


  /**
   * deliveryservice delete
   */
  export type deliveryserviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
    /**
     * Filter which deliveryservice to delete.
     */
    where: deliveryserviceWhereUniqueInput
  }


  /**
   * deliveryservice deleteMany
   */
  export type deliveryserviceDeleteManyArgs = {
    /**
     * Filter which deliveryservices to delete
     */
    where?: deliveryserviceWhereInput
  }


  /**
   * deliveryservice.orderdetails
   */
  export type deliveryservice$orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    cursor?: orderdetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * deliveryservice without action
   */
  export type deliveryserviceArgs = {
    /**
     * Select specific fields to fetch from the deliveryservice
     */
    select?: deliveryserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: deliveryserviceInclude | null
  }



  /**
   * Model discount
   */


  export type AggregateDiscount = {
    _count: DiscountCountAggregateOutputType | null
    _avg: DiscountAvgAggregateOutputType | null
    _sum: DiscountSumAggregateOutputType | null
    _min: DiscountMinAggregateOutputType | null
    _max: DiscountMaxAggregateOutputType | null
  }

  export type DiscountAvgAggregateOutputType = {
    type: number | null
    discvalue: number | null
    minpurchase: Decimal | null
    maxdisc: Decimal | null
  }

  export type DiscountSumAggregateOutputType = {
    type: number | null
    discvalue: number | null
    minpurchase: Decimal | null
    maxdisc: Decimal | null
  }

  export type DiscountMinAggregateOutputType = {
    id: string | null
    discname: string | null
    type: number | null
    discvalue: number | null
    minpurchase: Decimal | null
    maxdisc: Decimal | null
  }

  export type DiscountMaxAggregateOutputType = {
    id: string | null
    discname: string | null
    type: number | null
    discvalue: number | null
    minpurchase: Decimal | null
    maxdisc: Decimal | null
  }

  export type DiscountCountAggregateOutputType = {
    id: number
    discname: number
    type: number
    discvalue: number
    minpurchase: number
    maxdisc: number
    _all: number
  }


  export type DiscountAvgAggregateInputType = {
    type?: true
    discvalue?: true
    minpurchase?: true
    maxdisc?: true
  }

  export type DiscountSumAggregateInputType = {
    type?: true
    discvalue?: true
    minpurchase?: true
    maxdisc?: true
  }

  export type DiscountMinAggregateInputType = {
    id?: true
    discname?: true
    type?: true
    discvalue?: true
    minpurchase?: true
    maxdisc?: true
  }

  export type DiscountMaxAggregateInputType = {
    id?: true
    discname?: true
    type?: true
    discvalue?: true
    minpurchase?: true
    maxdisc?: true
  }

  export type DiscountCountAggregateInputType = {
    id?: true
    discname?: true
    type?: true
    discvalue?: true
    minpurchase?: true
    maxdisc?: true
    _all?: true
  }

  export type DiscountAggregateArgs = {
    /**
     * Filter which discount to aggregate.
     */
    where?: discountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: Enumerable<discountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: discountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discounts
    **/
    _count?: true | DiscountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiscountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiscountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscountMaxAggregateInputType
  }

  export type GetDiscountAggregateType<T extends DiscountAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscount[P]>
      : GetScalarType<T[P], AggregateDiscount[P]>
  }




  export type DiscountGroupByArgs = {
    where?: discountWhereInput
    orderBy?: Enumerable<discountOrderByWithAggregationInput>
    by: DiscountScalarFieldEnum[]
    having?: discountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscountCountAggregateInputType | true
    _avg?: DiscountAvgAggregateInputType
    _sum?: DiscountSumAggregateInputType
    _min?: DiscountMinAggregateInputType
    _max?: DiscountMaxAggregateInputType
  }


  export type DiscountGroupByOutputType = {
    id: string
    discname: string | null
    type: number | null
    discvalue: number | null
    minpurchase: Decimal | null
    maxdisc: Decimal | null
    _count: DiscountCountAggregateOutputType | null
    _avg: DiscountAvgAggregateOutputType | null
    _sum: DiscountSumAggregateOutputType | null
    _min: DiscountMinAggregateOutputType | null
    _max: DiscountMaxAggregateOutputType | null
  }

  type GetDiscountGroupByPayload<T extends DiscountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DiscountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscountGroupByOutputType[P]>
            : GetScalarType<T[P], DiscountGroupByOutputType[P]>
        }
      >
    >


  export type discountSelect = {
    id?: boolean
    discname?: boolean
    type?: boolean
    discvalue?: boolean
    minpurchase?: boolean
    maxdisc?: boolean
    discountitems?: boolean | discount$discountitemsArgs
    _count?: boolean | DiscountCountOutputTypeArgs
  }


  export type discountInclude = {
    discountitems?: boolean | discount$discountitemsArgs
    _count?: boolean | DiscountCountOutputTypeArgs
  }

  export type discountGetPayload<S extends boolean | null | undefined | discountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? discount :
    S extends undefined ? never :
    S extends { include: any } & (discountArgs | discountFindManyArgs)
    ? discount  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'discountitems' ? Array < discountitemsGetPayload<S['include'][P]>>  :
        P extends '_count' ? DiscountCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (discountArgs | discountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'discountitems' ? Array < discountitemsGetPayload<S['select'][P]>>  :
        P extends '_count' ? DiscountCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof discount ? discount[P] : never
  } 
      : discount


  type discountCountArgs = 
    Omit<discountFindManyArgs, 'select' | 'include'> & {
      select?: DiscountCountAggregateInputType | true
    }

  export interface discountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Discount that matches the filter.
     * @param {discountFindUniqueArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends discountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, discountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'discount'> extends True ? Prisma__discountClient<discountGetPayload<T>> : Prisma__discountClient<discountGetPayload<T> | null, null>

    /**
     * Find one Discount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {discountFindUniqueOrThrowArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends discountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, discountFindUniqueOrThrowArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Find the first Discount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountFindFirstArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends discountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, discountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'discount'> extends True ? Prisma__discountClient<discountGetPayload<T>> : Prisma__discountClient<discountGetPayload<T> | null, null>

    /**
     * Find the first Discount that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountFindFirstOrThrowArgs} args - Arguments to find a Discount
     * @example
     * // Get one Discount
     * const discount = await prisma.discount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends discountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, discountFindFirstOrThrowArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Find zero or more Discounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discounts
     * const discounts = await prisma.discount.findMany()
     * 
     * // Get first 10 Discounts
     * const discounts = await prisma.discount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discountWithIdOnly = await prisma.discount.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends discountFindManyArgs>(
      args?: SelectSubset<T, discountFindManyArgs>
    ): Prisma.PrismaPromise<Array<discountGetPayload<T>>>

    /**
     * Create a Discount.
     * @param {discountCreateArgs} args - Arguments to create a Discount.
     * @example
     * // Create one Discount
     * const Discount = await prisma.discount.create({
     *   data: {
     *     // ... data to create a Discount
     *   }
     * })
     * 
    **/
    create<T extends discountCreateArgs>(
      args: SelectSubset<T, discountCreateArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Create many Discounts.
     *     @param {discountCreateManyArgs} args - Arguments to create many Discounts.
     *     @example
     *     // Create many Discounts
     *     const discount = await prisma.discount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends discountCreateManyArgs>(
      args?: SelectSubset<T, discountCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discount.
     * @param {discountDeleteArgs} args - Arguments to delete one Discount.
     * @example
     * // Delete one Discount
     * const Discount = await prisma.discount.delete({
     *   where: {
     *     // ... filter to delete one Discount
     *   }
     * })
     * 
    **/
    delete<T extends discountDeleteArgs>(
      args: SelectSubset<T, discountDeleteArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Update one Discount.
     * @param {discountUpdateArgs} args - Arguments to update one Discount.
     * @example
     * // Update one Discount
     * const discount = await prisma.discount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends discountUpdateArgs>(
      args: SelectSubset<T, discountUpdateArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Delete zero or more Discounts.
     * @param {discountDeleteManyArgs} args - Arguments to filter Discounts to delete.
     * @example
     * // Delete a few Discounts
     * const { count } = await prisma.discount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends discountDeleteManyArgs>(
      args?: SelectSubset<T, discountDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discounts
     * const discount = await prisma.discount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends discountUpdateManyArgs>(
      args: SelectSubset<T, discountUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discount.
     * @param {discountUpsertArgs} args - Arguments to update or create a Discount.
     * @example
     * // Update or create a Discount
     * const discount = await prisma.discount.upsert({
     *   create: {
     *     // ... data to create a Discount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discount we want to update
     *   }
     * })
    **/
    upsert<T extends discountUpsertArgs>(
      args: SelectSubset<T, discountUpsertArgs>
    ): Prisma__discountClient<discountGetPayload<T>>

    /**
     * Count the number of Discounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountCountArgs} args - Arguments to filter Discounts to count.
     * @example
     * // Count the number of Discounts
     * const count = await prisma.discount.count({
     *   where: {
     *     // ... the filter for the Discounts we want to count
     *   }
     * })
    **/
    count<T extends discountCountArgs>(
      args?: Subset<T, discountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscountAggregateArgs>(args: Subset<T, DiscountAggregateArgs>): Prisma.PrismaPromise<GetDiscountAggregateType<T>>

    /**
     * Group by Discount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscountGroupByArgs['orderBy'] }
        : { orderBy?: DiscountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for discount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__discountClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    discountitems<T extends discount$discountitemsArgs= {}>(args?: Subset<T, discount$discountitemsArgs>): Prisma.PrismaPromise<Array<discountitemsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * discount base type for findUnique actions
   */
  export type discountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter, which discount to fetch.
     */
    where: discountWhereUniqueInput
  }

  /**
   * discount findUnique
   */
  export interface discountFindUniqueArgs extends discountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * discount findUniqueOrThrow
   */
  export type discountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter, which discount to fetch.
     */
    where: discountWhereUniqueInput
  }


  /**
   * discount base type for findFirst actions
   */
  export type discountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter, which discount to fetch.
     */
    where?: discountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: Enumerable<discountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discounts.
     */
    cursor?: discountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discounts.
     */
    distinct?: Enumerable<DiscountScalarFieldEnum>
  }

  /**
   * discount findFirst
   */
  export interface discountFindFirstArgs extends discountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * discount findFirstOrThrow
   */
  export type discountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter, which discount to fetch.
     */
    where?: discountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: Enumerable<discountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discounts.
     */
    cursor?: discountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discounts.
     */
    distinct?: Enumerable<DiscountScalarFieldEnum>
  }


  /**
   * discount findMany
   */
  export type discountFindManyArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter, which discounts to fetch.
     */
    where?: discountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discounts to fetch.
     */
    orderBy?: Enumerable<discountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discounts.
     */
    cursor?: discountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discounts.
     */
    skip?: number
    distinct?: Enumerable<DiscountScalarFieldEnum>
  }


  /**
   * discount create
   */
  export type discountCreateArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * The data needed to create a discount.
     */
    data: XOR<discountCreateInput, discountUncheckedCreateInput>
  }


  /**
   * discount createMany
   */
  export type discountCreateManyArgs = {
    /**
     * The data used to create many discounts.
     */
    data: Enumerable<discountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * discount update
   */
  export type discountUpdateArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * The data needed to update a discount.
     */
    data: XOR<discountUpdateInput, discountUncheckedUpdateInput>
    /**
     * Choose, which discount to update.
     */
    where: discountWhereUniqueInput
  }


  /**
   * discount updateMany
   */
  export type discountUpdateManyArgs = {
    /**
     * The data used to update discounts.
     */
    data: XOR<discountUpdateManyMutationInput, discountUncheckedUpdateManyInput>
    /**
     * Filter which discounts to update
     */
    where?: discountWhereInput
  }


  /**
   * discount upsert
   */
  export type discountUpsertArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * The filter to search for the discount to update in case it exists.
     */
    where: discountWhereUniqueInput
    /**
     * In case the discount found by the `where` argument doesn't exist, create a new discount with this data.
     */
    create: XOR<discountCreateInput, discountUncheckedCreateInput>
    /**
     * In case the discount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<discountUpdateInput, discountUncheckedUpdateInput>
  }


  /**
   * discount delete
   */
  export type discountDeleteArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
    /**
     * Filter which discount to delete.
     */
    where: discountWhereUniqueInput
  }


  /**
   * discount deleteMany
   */
  export type discountDeleteManyArgs = {
    /**
     * Filter which discounts to delete
     */
    where?: discountWhereInput
  }


  /**
   * discount.discountitems
   */
  export type discount$discountitemsArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    where?: discountitemsWhereInput
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    cursor?: discountitemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DiscountitemsScalarFieldEnum>
  }


  /**
   * discount without action
   */
  export type discountArgs = {
    /**
     * Select specific fields to fetch from the discount
     */
    select?: discountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountInclude | null
  }



  /**
   * Model discountitems
   */


  export type AggregateDiscountitems = {
    _count: DiscountitemsCountAggregateOutputType | null
    _min: DiscountitemsMinAggregateOutputType | null
    _max: DiscountitemsMaxAggregateOutputType | null
  }

  export type DiscountitemsMinAggregateOutputType = {
    discid: string | null
    productid: string | null
  }

  export type DiscountitemsMaxAggregateOutputType = {
    discid: string | null
    productid: string | null
  }

  export type DiscountitemsCountAggregateOutputType = {
    discid: number
    productid: number
    _all: number
  }


  export type DiscountitemsMinAggregateInputType = {
    discid?: true
    productid?: true
  }

  export type DiscountitemsMaxAggregateInputType = {
    discid?: true
    productid?: true
  }

  export type DiscountitemsCountAggregateInputType = {
    discid?: true
    productid?: true
    _all?: true
  }

  export type DiscountitemsAggregateArgs = {
    /**
     * Filter which discountitems to aggregate.
     */
    where?: discountitemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discountitems to fetch.
     */
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: discountitemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discountitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discountitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned discountitems
    **/
    _count?: true | DiscountitemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscountitemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscountitemsMaxAggregateInputType
  }

  export type GetDiscountitemsAggregateType<T extends DiscountitemsAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscountitems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscountitems[P]>
      : GetScalarType<T[P], AggregateDiscountitems[P]>
  }




  export type DiscountitemsGroupByArgs = {
    where?: discountitemsWhereInput
    orderBy?: Enumerable<discountitemsOrderByWithAggregationInput>
    by: DiscountitemsScalarFieldEnum[]
    having?: discountitemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscountitemsCountAggregateInputType | true
    _min?: DiscountitemsMinAggregateInputType
    _max?: DiscountitemsMaxAggregateInputType
  }


  export type DiscountitemsGroupByOutputType = {
    discid: string
    productid: string
    _count: DiscountitemsCountAggregateOutputType | null
    _min: DiscountitemsMinAggregateOutputType | null
    _max: DiscountitemsMaxAggregateOutputType | null
  }

  type GetDiscountitemsGroupByPayload<T extends DiscountitemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DiscountitemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscountitemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscountitemsGroupByOutputType[P]>
            : GetScalarType<T[P], DiscountitemsGroupByOutputType[P]>
        }
      >
    >


  export type discountitemsSelect = {
    discid?: boolean
    productid?: boolean
    discount?: boolean | discountArgs
    product?: boolean | productArgs
  }


  export type discountitemsInclude = {
    discount?: boolean | discountArgs
    product?: boolean | productArgs
  }

  export type discountitemsGetPayload<S extends boolean | null | undefined | discountitemsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? discountitems :
    S extends undefined ? never :
    S extends { include: any } & (discountitemsArgs | discountitemsFindManyArgs)
    ? discountitems  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'discount' ? discountGetPayload<S['include'][P]> :
        P extends 'product' ? productGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (discountitemsArgs | discountitemsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'discount' ? discountGetPayload<S['select'][P]> :
        P extends 'product' ? productGetPayload<S['select'][P]> :  P extends keyof discountitems ? discountitems[P] : never
  } 
      : discountitems


  type discountitemsCountArgs = 
    Omit<discountitemsFindManyArgs, 'select' | 'include'> & {
      select?: DiscountitemsCountAggregateInputType | true
    }

  export interface discountitemsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Discountitems that matches the filter.
     * @param {discountitemsFindUniqueArgs} args - Arguments to find a Discountitems
     * @example
     * // Get one Discountitems
     * const discountitems = await prisma.discountitems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends discountitemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, discountitemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'discountitems'> extends True ? Prisma__discountitemsClient<discountitemsGetPayload<T>> : Prisma__discountitemsClient<discountitemsGetPayload<T> | null, null>

    /**
     * Find one Discountitems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {discountitemsFindUniqueOrThrowArgs} args - Arguments to find a Discountitems
     * @example
     * // Get one Discountitems
     * const discountitems = await prisma.discountitems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends discountitemsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, discountitemsFindUniqueOrThrowArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Find the first Discountitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountitemsFindFirstArgs} args - Arguments to find a Discountitems
     * @example
     * // Get one Discountitems
     * const discountitems = await prisma.discountitems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends discountitemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, discountitemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'discountitems'> extends True ? Prisma__discountitemsClient<discountitemsGetPayload<T>> : Prisma__discountitemsClient<discountitemsGetPayload<T> | null, null>

    /**
     * Find the first Discountitems that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountitemsFindFirstOrThrowArgs} args - Arguments to find a Discountitems
     * @example
     * // Get one Discountitems
     * const discountitems = await prisma.discountitems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends discountitemsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, discountitemsFindFirstOrThrowArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Find zero or more Discountitems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountitemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discountitems
     * const discountitems = await prisma.discountitems.findMany()
     * 
     * // Get first 10 Discountitems
     * const discountitems = await prisma.discountitems.findMany({ take: 10 })
     * 
     * // Only select the `discid`
     * const discountitemsWithDiscidOnly = await prisma.discountitems.findMany({ select: { discid: true } })
     * 
    **/
    findMany<T extends discountitemsFindManyArgs>(
      args?: SelectSubset<T, discountitemsFindManyArgs>
    ): Prisma.PrismaPromise<Array<discountitemsGetPayload<T>>>

    /**
     * Create a Discountitems.
     * @param {discountitemsCreateArgs} args - Arguments to create a Discountitems.
     * @example
     * // Create one Discountitems
     * const Discountitems = await prisma.discountitems.create({
     *   data: {
     *     // ... data to create a Discountitems
     *   }
     * })
     * 
    **/
    create<T extends discountitemsCreateArgs>(
      args: SelectSubset<T, discountitemsCreateArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Create many Discountitems.
     *     @param {discountitemsCreateManyArgs} args - Arguments to create many Discountitems.
     *     @example
     *     // Create many Discountitems
     *     const discountitems = await prisma.discountitems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends discountitemsCreateManyArgs>(
      args?: SelectSubset<T, discountitemsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Discountitems.
     * @param {discountitemsDeleteArgs} args - Arguments to delete one Discountitems.
     * @example
     * // Delete one Discountitems
     * const Discountitems = await prisma.discountitems.delete({
     *   where: {
     *     // ... filter to delete one Discountitems
     *   }
     * })
     * 
    **/
    delete<T extends discountitemsDeleteArgs>(
      args: SelectSubset<T, discountitemsDeleteArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Update one Discountitems.
     * @param {discountitemsUpdateArgs} args - Arguments to update one Discountitems.
     * @example
     * // Update one Discountitems
     * const discountitems = await prisma.discountitems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends discountitemsUpdateArgs>(
      args: SelectSubset<T, discountitemsUpdateArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Delete zero or more Discountitems.
     * @param {discountitemsDeleteManyArgs} args - Arguments to filter Discountitems to delete.
     * @example
     * // Delete a few Discountitems
     * const { count } = await prisma.discountitems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends discountitemsDeleteManyArgs>(
      args?: SelectSubset<T, discountitemsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discountitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountitemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discountitems
     * const discountitems = await prisma.discountitems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends discountitemsUpdateManyArgs>(
      args: SelectSubset<T, discountitemsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discountitems.
     * @param {discountitemsUpsertArgs} args - Arguments to update or create a Discountitems.
     * @example
     * // Update or create a Discountitems
     * const discountitems = await prisma.discountitems.upsert({
     *   create: {
     *     // ... data to create a Discountitems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discountitems we want to update
     *   }
     * })
    **/
    upsert<T extends discountitemsUpsertArgs>(
      args: SelectSubset<T, discountitemsUpsertArgs>
    ): Prisma__discountitemsClient<discountitemsGetPayload<T>>

    /**
     * Count the number of Discountitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {discountitemsCountArgs} args - Arguments to filter Discountitems to count.
     * @example
     * // Count the number of Discountitems
     * const count = await prisma.discountitems.count({
     *   where: {
     *     // ... the filter for the Discountitems we want to count
     *   }
     * })
    **/
    count<T extends discountitemsCountArgs>(
      args?: Subset<T, discountitemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscountitemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discountitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountitemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscountitemsAggregateArgs>(args: Subset<T, DiscountitemsAggregateArgs>): Prisma.PrismaPromise<GetDiscountitemsAggregateType<T>>

    /**
     * Group by Discountitems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscountitemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscountitemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscountitemsGroupByArgs['orderBy'] }
        : { orderBy?: DiscountitemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscountitemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscountitemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for discountitems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__discountitemsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    discount<T extends discountArgs= {}>(args?: Subset<T, discountArgs>): Prisma__discountClient<discountGetPayload<T> | Null>;

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * discountitems base type for findUnique actions
   */
  export type discountitemsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter, which discountitems to fetch.
     */
    where: discountitemsWhereUniqueInput
  }

  /**
   * discountitems findUnique
   */
  export interface discountitemsFindUniqueArgs extends discountitemsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * discountitems findUniqueOrThrow
   */
  export type discountitemsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter, which discountitems to fetch.
     */
    where: discountitemsWhereUniqueInput
  }


  /**
   * discountitems base type for findFirst actions
   */
  export type discountitemsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter, which discountitems to fetch.
     */
    where?: discountitemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discountitems to fetch.
     */
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discountitems.
     */
    cursor?: discountitemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discountitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discountitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discountitems.
     */
    distinct?: Enumerable<DiscountitemsScalarFieldEnum>
  }

  /**
   * discountitems findFirst
   */
  export interface discountitemsFindFirstArgs extends discountitemsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * discountitems findFirstOrThrow
   */
  export type discountitemsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter, which discountitems to fetch.
     */
    where?: discountitemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discountitems to fetch.
     */
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for discountitems.
     */
    cursor?: discountitemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discountitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discountitems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of discountitems.
     */
    distinct?: Enumerable<DiscountitemsScalarFieldEnum>
  }


  /**
   * discountitems findMany
   */
  export type discountitemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter, which discountitems to fetch.
     */
    where?: discountitemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of discountitems to fetch.
     */
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing discountitems.
     */
    cursor?: discountitemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` discountitems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` discountitems.
     */
    skip?: number
    distinct?: Enumerable<DiscountitemsScalarFieldEnum>
  }


  /**
   * discountitems create
   */
  export type discountitemsCreateArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * The data needed to create a discountitems.
     */
    data: XOR<discountitemsCreateInput, discountitemsUncheckedCreateInput>
  }


  /**
   * discountitems createMany
   */
  export type discountitemsCreateManyArgs = {
    /**
     * The data used to create many discountitems.
     */
    data: Enumerable<discountitemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * discountitems update
   */
  export type discountitemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * The data needed to update a discountitems.
     */
    data: XOR<discountitemsUpdateInput, discountitemsUncheckedUpdateInput>
    /**
     * Choose, which discountitems to update.
     */
    where: discountitemsWhereUniqueInput
  }


  /**
   * discountitems updateMany
   */
  export type discountitemsUpdateManyArgs = {
    /**
     * The data used to update discountitems.
     */
    data: XOR<discountitemsUpdateManyMutationInput, discountitemsUncheckedUpdateManyInput>
    /**
     * Filter which discountitems to update
     */
    where?: discountitemsWhereInput
  }


  /**
   * discountitems upsert
   */
  export type discountitemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * The filter to search for the discountitems to update in case it exists.
     */
    where: discountitemsWhereUniqueInput
    /**
     * In case the discountitems found by the `where` argument doesn't exist, create a new discountitems with this data.
     */
    create: XOR<discountitemsCreateInput, discountitemsUncheckedCreateInput>
    /**
     * In case the discountitems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<discountitemsUpdateInput, discountitemsUncheckedUpdateInput>
  }


  /**
   * discountitems delete
   */
  export type discountitemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    /**
     * Filter which discountitems to delete.
     */
    where: discountitemsWhereUniqueInput
  }


  /**
   * discountitems deleteMany
   */
  export type discountitemsDeleteManyArgs = {
    /**
     * Filter which discountitems to delete
     */
    where?: discountitemsWhereInput
  }


  /**
   * discountitems without action
   */
  export type discountitemsArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
  }



  /**
   * Model orderdetails
   */


  export type AggregateOrderdetails = {
    _count: OrderdetailsCountAggregateOutputType | null
    _avg: OrderdetailsAvgAggregateOutputType | null
    _sum: OrderdetailsSumAggregateOutputType | null
    _min: OrderdetailsMinAggregateOutputType | null
    _max: OrderdetailsMaxAggregateOutputType | null
  }

  export type OrderdetailsAvgAggregateOutputType = {
    quantity: number | null
  }

  export type OrderdetailsSumAggregateOutputType = {
    quantity: number | null
  }

  export type OrderdetailsMinAggregateOutputType = {
    orderid: string | null
    productid: string | null
    quantity: number | null
    deliveryid: string | null
  }

  export type OrderdetailsMaxAggregateOutputType = {
    orderid: string | null
    productid: string | null
    quantity: number | null
    deliveryid: string | null
  }

  export type OrderdetailsCountAggregateOutputType = {
    orderid: number
    productid: number
    quantity: number
    deliveryid: number
    _all: number
  }


  export type OrderdetailsAvgAggregateInputType = {
    quantity?: true
  }

  export type OrderdetailsSumAggregateInputType = {
    quantity?: true
  }

  export type OrderdetailsMinAggregateInputType = {
    orderid?: true
    productid?: true
    quantity?: true
    deliveryid?: true
  }

  export type OrderdetailsMaxAggregateInputType = {
    orderid?: true
    productid?: true
    quantity?: true
    deliveryid?: true
  }

  export type OrderdetailsCountAggregateInputType = {
    orderid?: true
    productid?: true
    quantity?: true
    deliveryid?: true
    _all?: true
  }

  export type OrderdetailsAggregateArgs = {
    /**
     * Filter which orderdetails to aggregate.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderdetails
    **/
    _count?: true | OrderdetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderdetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderdetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderdetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderdetailsMaxAggregateInputType
  }

  export type GetOrderdetailsAggregateType<T extends OrderdetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderdetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderdetails[P]>
      : GetScalarType<T[P], AggregateOrderdetails[P]>
  }




  export type OrderdetailsGroupByArgs = {
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithAggregationInput>
    by: OrderdetailsScalarFieldEnum[]
    having?: orderdetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderdetailsCountAggregateInputType | true
    _avg?: OrderdetailsAvgAggregateInputType
    _sum?: OrderdetailsSumAggregateInputType
    _min?: OrderdetailsMinAggregateInputType
    _max?: OrderdetailsMaxAggregateInputType
  }


  export type OrderdetailsGroupByOutputType = {
    orderid: string
    productid: string
    quantity: number | null
    deliveryid: string
    _count: OrderdetailsCountAggregateOutputType | null
    _avg: OrderdetailsAvgAggregateOutputType | null
    _sum: OrderdetailsSumAggregateOutputType | null
    _min: OrderdetailsMinAggregateOutputType | null
    _max: OrderdetailsMaxAggregateOutputType | null
  }

  type GetOrderdetailsGroupByPayload<T extends OrderdetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrderdetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderdetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderdetailsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderdetailsGroupByOutputType[P]>
        }
      >
    >


  export type orderdetailsSelect = {
    orderid?: boolean
    productid?: boolean
    quantity?: boolean
    deliveryid?: boolean
    orders?: boolean | ordersArgs
    product?: boolean | productArgs
    deliveryservice?: boolean | deliveryserviceArgs
  }


  export type orderdetailsInclude = {
    orders?: boolean | ordersArgs
    product?: boolean | productArgs
    deliveryservice?: boolean | deliveryserviceArgs
  }

  export type orderdetailsGetPayload<S extends boolean | null | undefined | orderdetailsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? orderdetails :
    S extends undefined ? never :
    S extends { include: any } & (orderdetailsArgs | orderdetailsFindManyArgs)
    ? orderdetails  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orders' ? ordersGetPayload<S['include'][P]> :
        P extends 'product' ? productGetPayload<S['include'][P]> :
        P extends 'deliveryservice' ? deliveryserviceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (orderdetailsArgs | orderdetailsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orders' ? ordersGetPayload<S['select'][P]> :
        P extends 'product' ? productGetPayload<S['select'][P]> :
        P extends 'deliveryservice' ? deliveryserviceGetPayload<S['select'][P]> :  P extends keyof orderdetails ? orderdetails[P] : never
  } 
      : orderdetails


  type orderdetailsCountArgs = 
    Omit<orderdetailsFindManyArgs, 'select' | 'include'> & {
      select?: OrderdetailsCountAggregateInputType | true
    }

  export interface orderdetailsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orderdetails that matches the filter.
     * @param {orderdetailsFindUniqueArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends orderdetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, orderdetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orderdetails'> extends True ? Prisma__orderdetailsClient<orderdetailsGetPayload<T>> : Prisma__orderdetailsClient<orderdetailsGetPayload<T> | null, null>

    /**
     * Find one Orderdetails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {orderdetailsFindUniqueOrThrowArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends orderdetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, orderdetailsFindUniqueOrThrowArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Find the first Orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindFirstArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends orderdetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, orderdetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orderdetails'> extends True ? Prisma__orderdetailsClient<orderdetailsGetPayload<T>> : Prisma__orderdetailsClient<orderdetailsGetPayload<T> | null, null>

    /**
     * Find the first Orderdetails that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindFirstOrThrowArgs} args - Arguments to find a Orderdetails
     * @example
     * // Get one Orderdetails
     * const orderdetails = await prisma.orderdetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends orderdetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, orderdetailsFindFirstOrThrowArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Find zero or more Orderdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orderdetails
     * const orderdetails = await prisma.orderdetails.findMany()
     * 
     * // Get first 10 Orderdetails
     * const orderdetails = await prisma.orderdetails.findMany({ take: 10 })
     * 
     * // Only select the `orderid`
     * const orderdetailsWithOrderidOnly = await prisma.orderdetails.findMany({ select: { orderid: true } })
     * 
    **/
    findMany<T extends orderdetailsFindManyArgs>(
      args?: SelectSubset<T, orderdetailsFindManyArgs>
    ): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>>

    /**
     * Create a Orderdetails.
     * @param {orderdetailsCreateArgs} args - Arguments to create a Orderdetails.
     * @example
     * // Create one Orderdetails
     * const Orderdetails = await prisma.orderdetails.create({
     *   data: {
     *     // ... data to create a Orderdetails
     *   }
     * })
     * 
    **/
    create<T extends orderdetailsCreateArgs>(
      args: SelectSubset<T, orderdetailsCreateArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Create many Orderdetails.
     *     @param {orderdetailsCreateManyArgs} args - Arguments to create many Orderdetails.
     *     @example
     *     // Create many Orderdetails
     *     const orderdetails = await prisma.orderdetails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends orderdetailsCreateManyArgs>(
      args?: SelectSubset<T, orderdetailsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orderdetails.
     * @param {orderdetailsDeleteArgs} args - Arguments to delete one Orderdetails.
     * @example
     * // Delete one Orderdetails
     * const Orderdetails = await prisma.orderdetails.delete({
     *   where: {
     *     // ... filter to delete one Orderdetails
     *   }
     * })
     * 
    **/
    delete<T extends orderdetailsDeleteArgs>(
      args: SelectSubset<T, orderdetailsDeleteArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Update one Orderdetails.
     * @param {orderdetailsUpdateArgs} args - Arguments to update one Orderdetails.
     * @example
     * // Update one Orderdetails
     * const orderdetails = await prisma.orderdetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends orderdetailsUpdateArgs>(
      args: SelectSubset<T, orderdetailsUpdateArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Delete zero or more Orderdetails.
     * @param {orderdetailsDeleteManyArgs} args - Arguments to filter Orderdetails to delete.
     * @example
     * // Delete a few Orderdetails
     * const { count } = await prisma.orderdetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends orderdetailsDeleteManyArgs>(
      args?: SelectSubset<T, orderdetailsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orderdetails
     * const orderdetails = await prisma.orderdetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends orderdetailsUpdateManyArgs>(
      args: SelectSubset<T, orderdetailsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orderdetails.
     * @param {orderdetailsUpsertArgs} args - Arguments to update or create a Orderdetails.
     * @example
     * // Update or create a Orderdetails
     * const orderdetails = await prisma.orderdetails.upsert({
     *   create: {
     *     // ... data to create a Orderdetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orderdetails we want to update
     *   }
     * })
    **/
    upsert<T extends orderdetailsUpsertArgs>(
      args: SelectSubset<T, orderdetailsUpsertArgs>
    ): Prisma__orderdetailsClient<orderdetailsGetPayload<T>>

    /**
     * Count the number of Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderdetailsCountArgs} args - Arguments to filter Orderdetails to count.
     * @example
     * // Count the number of Orderdetails
     * const count = await prisma.orderdetails.count({
     *   where: {
     *     // ... the filter for the Orderdetails we want to count
     *   }
     * })
    **/
    count<T extends orderdetailsCountArgs>(
      args?: Subset<T, orderdetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderdetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderdetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderdetailsAggregateArgs>(args: Subset<T, OrderdetailsAggregateArgs>): Prisma.PrismaPromise<GetOrderdetailsAggregateType<T>>

    /**
     * Group by Orderdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderdetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderdetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderdetailsGroupByArgs['orderBy'] }
        : { orderBy?: OrderdetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderdetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderdetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orderdetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__orderdetailsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends ordersArgs= {}>(args?: Subset<T, ordersArgs>): Prisma__ordersClient<ordersGetPayload<T> | Null>;

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    deliveryservice<T extends deliveryserviceArgs= {}>(args?: Subset<T, deliveryserviceArgs>): Prisma__deliveryserviceClient<deliveryserviceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orderdetails base type for findUnique actions
   */
  export type orderdetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where: orderdetailsWhereUniqueInput
  }

  /**
   * orderdetails findUnique
   */
  export interface orderdetailsFindUniqueArgs extends orderdetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orderdetails findUniqueOrThrow
   */
  export type orderdetailsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails base type for findFirst actions
   */
  export type orderdetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }

  /**
   * orderdetails findFirst
   */
  export interface orderdetailsFindFirstArgs extends orderdetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orderdetails findFirstOrThrow
   */
  export type orderdetailsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderdetails.
     */
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orderdetails findMany
   */
  export type orderdetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter, which orderdetails to fetch.
     */
    where?: orderdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderdetails to fetch.
     */
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderdetails.
     */
    cursor?: orderdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderdetails.
     */
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orderdetails create
   */
  export type orderdetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The data needed to create a orderdetails.
     */
    data: XOR<orderdetailsCreateInput, orderdetailsUncheckedCreateInput>
  }


  /**
   * orderdetails createMany
   */
  export type orderdetailsCreateManyArgs = {
    /**
     * The data used to create many orderdetails.
     */
    data: Enumerable<orderdetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orderdetails update
   */
  export type orderdetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The data needed to update a orderdetails.
     */
    data: XOR<orderdetailsUpdateInput, orderdetailsUncheckedUpdateInput>
    /**
     * Choose, which orderdetails to update.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails updateMany
   */
  export type orderdetailsUpdateManyArgs = {
    /**
     * The data used to update orderdetails.
     */
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyInput>
    /**
     * Filter which orderdetails to update
     */
    where?: orderdetailsWhereInput
  }


  /**
   * orderdetails upsert
   */
  export type orderdetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * The filter to search for the orderdetails to update in case it exists.
     */
    where: orderdetailsWhereUniqueInput
    /**
     * In case the orderdetails found by the `where` argument doesn't exist, create a new orderdetails with this data.
     */
    create: XOR<orderdetailsCreateInput, orderdetailsUncheckedCreateInput>
    /**
     * In case the orderdetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderdetailsUpdateInput, orderdetailsUncheckedUpdateInput>
  }


  /**
   * orderdetails delete
   */
  export type orderdetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    /**
     * Filter which orderdetails to delete.
     */
    where: orderdetailsWhereUniqueInput
  }


  /**
   * orderdetails deleteMany
   */
  export type orderdetailsDeleteManyArgs = {
    /**
     * Filter which orderdetails to delete
     */
    where?: orderdetailsWhereInput
  }


  /**
   * orderdetails without action
   */
  export type orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
  }



  /**
   * Model orders
   */


  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersMinAggregateOutputType = {
    id: string | null
    userid: string | null
    paydetid: string | null
    payserviceid: string | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: string | null
    userid: string | null
    paydetid: string | null
    payserviceid: string | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    userid: number
    paydetid: number
    payserviceid: number
    _all: number
  }


  export type OrdersMinAggregateInputType = {
    id?: true
    userid?: true
    paydetid?: true
    payserviceid?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    userid?: true
    paydetid?: true
    payserviceid?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    userid?: true
    paydetid?: true
    payserviceid?: true
    _all?: true
  }

  export type OrdersAggregateArgs = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type OrdersGroupByArgs = {
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithAggregationInput>
    by: OrdersScalarFieldEnum[]
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }


  export type OrdersGroupByOutputType = {
    id: string
    userid: string
    paydetid: string
    payserviceid: string
    _count: OrdersCountAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends OrdersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect = {
    id?: boolean
    userid?: boolean
    paydetid?: boolean
    payserviceid?: boolean
    orderdetails?: boolean | orders$orderdetailsArgs
    paymentdetails?: boolean | paymentdetailsArgs
    paymentservice?: boolean | paymentserviceArgs
    users?: boolean | usersArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  }


  export type ordersInclude = {
    orderdetails?: boolean | orders$orderdetailsArgs
    paymentdetails?: boolean | paymentdetailsArgs
    paymentservice?: boolean | paymentserviceArgs
    users?: boolean | usersArgs
    _count?: boolean | OrdersCountOutputTypeArgs
  }

  export type ordersGetPayload<S extends boolean | null | undefined | ordersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? orders :
    S extends undefined ? never :
    S extends { include: any } & (ordersArgs | ordersFindManyArgs)
    ? orders  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['include'][P]>>  :
        P extends 'paymentdetails' ? paymentdetailsGetPayload<S['include'][P]> :
        P extends 'paymentservice' ? paymentserviceGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ordersArgs | ordersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['select'][P]>>  :
        P extends 'paymentdetails' ? paymentdetailsGetPayload<S['select'][P]> :
        P extends 'paymentservice' ? paymentserviceGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends '_count' ? OrdersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof orders ? orders[P] : never
  } 
      : orders


  type ordersCountArgs = 
    Omit<ordersFindManyArgs, 'select' | 'include'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ordersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ordersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find one Orders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ordersFindUniqueOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ordersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ordersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'orders'> extends True ? Prisma__ordersClient<ordersGetPayload<T>> : Prisma__ordersClient<ordersGetPayload<T> | null, null>

    /**
     * Find the first Orders that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ordersFindFirstOrThrowArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ordersFindManyArgs>(
      args?: SelectSubset<T, ordersFindManyArgs>
    ): Prisma.PrismaPromise<Array<ordersGetPayload<T>>>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
    **/
    create<T extends ordersCreateArgs>(
      args: SelectSubset<T, ordersCreateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Create many Orders.
     *     @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     *     @example
     *     // Create many Orders
     *     const orders = await prisma.orders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ordersCreateManyArgs>(
      args?: SelectSubset<T, ordersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
    **/
    delete<T extends ordersDeleteArgs>(
      args: SelectSubset<T, ordersDeleteArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ordersUpdateArgs>(
      args: SelectSubset<T, ordersUpdateArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ordersDeleteManyArgs>(
      args?: SelectSubset<T, ordersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ordersUpdateManyArgs>(
      args: SelectSubset<T, ordersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
    **/
    upsert<T extends ordersUpsertArgs>(
      args: SelectSubset<T, ordersUpsertArgs>
    ): Prisma__ordersClient<ordersGetPayload<T>>

    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrdersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrdersGroupByArgs['orderBy'] }
        : { orderBy?: OrdersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrdersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ordersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orderdetails<T extends orders$orderdetailsArgs= {}>(args?: Subset<T, orders$orderdetailsArgs>): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>| Null>;

    paymentdetails<T extends paymentdetailsArgs= {}>(args?: Subset<T, paymentdetailsArgs>): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T> | Null>;

    paymentservice<T extends paymentserviceArgs= {}>(args?: Subset<T, paymentserviceArgs>): Prisma__paymentserviceClient<paymentserviceGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * orders base type for findUnique actions
   */
  export type ordersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUnique
   */
  export interface ordersFindUniqueArgs extends ordersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders base type for findFirst actions
   */
  export type ordersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }

  /**
   * orders findFirst
   */
  export interface ordersFindFirstArgs extends ordersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders findMany
   */
  export type ordersFindManyArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * orders create
   */
  export type ordersCreateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }


  /**
   * orders createMany
   */
  export type ordersCreateManyArgs = {
    /**
     * The data used to create many orders.
     */
    data: Enumerable<ordersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * orders update
   */
  export type ordersUpdateArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }


  /**
   * orders upsert
   */
  export type ordersUpsertArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }


  /**
   * orders delete
   */
  export type ordersDeleteArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }


  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }


  /**
   * orders.orderdetails
   */
  export type orders$orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    cursor?: orderdetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * orders without action
   */
  export type ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
  }



  /**
   * Model paymentdetails
   */


  export type AggregatePaymentdetails = {
    _count: PaymentdetailsCountAggregateOutputType | null
    _avg: PaymentdetailsAvgAggregateOutputType | null
    _sum: PaymentdetailsSumAggregateOutputType | null
    _min: PaymentdetailsMinAggregateOutputType | null
    _max: PaymentdetailsMaxAggregateOutputType | null
  }

  export type PaymentdetailsAvgAggregateOutputType = {
    total: Decimal | null
  }

  export type PaymentdetailsSumAggregateOutputType = {
    total: Decimal | null
  }

  export type PaymentdetailsMinAggregateOutputType = {
    id: string | null
    total: Decimal | null
    status: paymentdetails_status | null
  }

  export type PaymentdetailsMaxAggregateOutputType = {
    id: string | null
    total: Decimal | null
    status: paymentdetails_status | null
  }

  export type PaymentdetailsCountAggregateOutputType = {
    id: number
    total: number
    status: number
    _all: number
  }


  export type PaymentdetailsAvgAggregateInputType = {
    total?: true
  }

  export type PaymentdetailsSumAggregateInputType = {
    total?: true
  }

  export type PaymentdetailsMinAggregateInputType = {
    id?: true
    total?: true
    status?: true
  }

  export type PaymentdetailsMaxAggregateInputType = {
    id?: true
    total?: true
    status?: true
  }

  export type PaymentdetailsCountAggregateInputType = {
    id?: true
    total?: true
    status?: true
    _all?: true
  }

  export type PaymentdetailsAggregateArgs = {
    /**
     * Filter which paymentdetails to aggregate.
     */
    where?: paymentdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentdetails to fetch.
     */
    orderBy?: Enumerable<paymentdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned paymentdetails
    **/
    _count?: true | PaymentdetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentdetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentdetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentdetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentdetailsMaxAggregateInputType
  }

  export type GetPaymentdetailsAggregateType<T extends PaymentdetailsAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentdetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentdetails[P]>
      : GetScalarType<T[P], AggregatePaymentdetails[P]>
  }




  export type PaymentdetailsGroupByArgs = {
    where?: paymentdetailsWhereInput
    orderBy?: Enumerable<paymentdetailsOrderByWithAggregationInput>
    by: PaymentdetailsScalarFieldEnum[]
    having?: paymentdetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentdetailsCountAggregateInputType | true
    _avg?: PaymentdetailsAvgAggregateInputType
    _sum?: PaymentdetailsSumAggregateInputType
    _min?: PaymentdetailsMinAggregateInputType
    _max?: PaymentdetailsMaxAggregateInputType
  }


  export type PaymentdetailsGroupByOutputType = {
    id: string
    total: Decimal | null
    status: paymentdetails_status | null
    _count: PaymentdetailsCountAggregateOutputType | null
    _avg: PaymentdetailsAvgAggregateOutputType | null
    _sum: PaymentdetailsSumAggregateOutputType | null
    _min: PaymentdetailsMinAggregateOutputType | null
    _max: PaymentdetailsMaxAggregateOutputType | null
  }

  type GetPaymentdetailsGroupByPayload<T extends PaymentdetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PaymentdetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentdetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentdetailsGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentdetailsGroupByOutputType[P]>
        }
      >
    >


  export type paymentdetailsSelect = {
    id?: boolean
    total?: boolean
    status?: boolean
    orders?: boolean | paymentdetails$ordersArgs
    _count?: boolean | PaymentdetailsCountOutputTypeArgs
  }


  export type paymentdetailsInclude = {
    orders?: boolean | paymentdetails$ordersArgs
    _count?: boolean | PaymentdetailsCountOutputTypeArgs
  }

  export type paymentdetailsGetPayload<S extends boolean | null | undefined | paymentdetailsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? paymentdetails :
    S extends undefined ? never :
    S extends { include: any } & (paymentdetailsArgs | paymentdetailsFindManyArgs)
    ? paymentdetails  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['include'][P]>>  :
        P extends '_count' ? PaymentdetailsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (paymentdetailsArgs | paymentdetailsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['select'][P]>>  :
        P extends '_count' ? PaymentdetailsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof paymentdetails ? paymentdetails[P] : never
  } 
      : paymentdetails


  type paymentdetailsCountArgs = 
    Omit<paymentdetailsFindManyArgs, 'select' | 'include'> & {
      select?: PaymentdetailsCountAggregateInputType | true
    }

  export interface paymentdetailsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Paymentdetails that matches the filter.
     * @param {paymentdetailsFindUniqueArgs} args - Arguments to find a Paymentdetails
     * @example
     * // Get one Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paymentdetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, paymentdetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'paymentdetails'> extends True ? Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>> : Prisma__paymentdetailsClient<paymentdetailsGetPayload<T> | null, null>

    /**
     * Find one Paymentdetails that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {paymentdetailsFindUniqueOrThrowArgs} args - Arguments to find a Paymentdetails
     * @example
     * // Get one Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paymentdetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, paymentdetailsFindUniqueOrThrowArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Find the first Paymentdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentdetailsFindFirstArgs} args - Arguments to find a Paymentdetails
     * @example
     * // Get one Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paymentdetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, paymentdetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'paymentdetails'> extends True ? Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>> : Prisma__paymentdetailsClient<paymentdetailsGetPayload<T> | null, null>

    /**
     * Find the first Paymentdetails that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentdetailsFindFirstOrThrowArgs} args - Arguments to find a Paymentdetails
     * @example
     * // Get one Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paymentdetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, paymentdetailsFindFirstOrThrowArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Find zero or more Paymentdetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentdetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findMany()
     * 
     * // Get first 10 Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentdetailsWithIdOnly = await prisma.paymentdetails.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends paymentdetailsFindManyArgs>(
      args?: SelectSubset<T, paymentdetailsFindManyArgs>
    ): Prisma.PrismaPromise<Array<paymentdetailsGetPayload<T>>>

    /**
     * Create a Paymentdetails.
     * @param {paymentdetailsCreateArgs} args - Arguments to create a Paymentdetails.
     * @example
     * // Create one Paymentdetails
     * const Paymentdetails = await prisma.paymentdetails.create({
     *   data: {
     *     // ... data to create a Paymentdetails
     *   }
     * })
     * 
    **/
    create<T extends paymentdetailsCreateArgs>(
      args: SelectSubset<T, paymentdetailsCreateArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Create many Paymentdetails.
     *     @param {paymentdetailsCreateManyArgs} args - Arguments to create many Paymentdetails.
     *     @example
     *     // Create many Paymentdetails
     *     const paymentdetails = await prisma.paymentdetails.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends paymentdetailsCreateManyArgs>(
      args?: SelectSubset<T, paymentdetailsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paymentdetails.
     * @param {paymentdetailsDeleteArgs} args - Arguments to delete one Paymentdetails.
     * @example
     * // Delete one Paymentdetails
     * const Paymentdetails = await prisma.paymentdetails.delete({
     *   where: {
     *     // ... filter to delete one Paymentdetails
     *   }
     * })
     * 
    **/
    delete<T extends paymentdetailsDeleteArgs>(
      args: SelectSubset<T, paymentdetailsDeleteArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Update one Paymentdetails.
     * @param {paymentdetailsUpdateArgs} args - Arguments to update one Paymentdetails.
     * @example
     * // Update one Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paymentdetailsUpdateArgs>(
      args: SelectSubset<T, paymentdetailsUpdateArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Delete zero or more Paymentdetails.
     * @param {paymentdetailsDeleteManyArgs} args - Arguments to filter Paymentdetails to delete.
     * @example
     * // Delete a few Paymentdetails
     * const { count } = await prisma.paymentdetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paymentdetailsDeleteManyArgs>(
      args?: SelectSubset<T, paymentdetailsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paymentdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentdetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paymentdetailsUpdateManyArgs>(
      args: SelectSubset<T, paymentdetailsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paymentdetails.
     * @param {paymentdetailsUpsertArgs} args - Arguments to update or create a Paymentdetails.
     * @example
     * // Update or create a Paymentdetails
     * const paymentdetails = await prisma.paymentdetails.upsert({
     *   create: {
     *     // ... data to create a Paymentdetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paymentdetails we want to update
     *   }
     * })
    **/
    upsert<T extends paymentdetailsUpsertArgs>(
      args: SelectSubset<T, paymentdetailsUpsertArgs>
    ): Prisma__paymentdetailsClient<paymentdetailsGetPayload<T>>

    /**
     * Count the number of Paymentdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentdetailsCountArgs} args - Arguments to filter Paymentdetails to count.
     * @example
     * // Count the number of Paymentdetails
     * const count = await prisma.paymentdetails.count({
     *   where: {
     *     // ... the filter for the Paymentdetails we want to count
     *   }
     * })
    **/
    count<T extends paymentdetailsCountArgs>(
      args?: Subset<T, paymentdetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentdetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paymentdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentdetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentdetailsAggregateArgs>(args: Subset<T, PaymentdetailsAggregateArgs>): Prisma.PrismaPromise<GetPaymentdetailsAggregateType<T>>

    /**
     * Group by Paymentdetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentdetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentdetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentdetailsGroupByArgs['orderBy'] }
        : { orderBy?: PaymentdetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentdetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentdetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for paymentdetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__paymentdetailsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends paymentdetails$ordersArgs= {}>(args?: Subset<T, paymentdetails$ordersArgs>): Prisma.PrismaPromise<Array<ordersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * paymentdetails base type for findUnique actions
   */
  export type paymentdetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter, which paymentdetails to fetch.
     */
    where: paymentdetailsWhereUniqueInput
  }

  /**
   * paymentdetails findUnique
   */
  export interface paymentdetailsFindUniqueArgs extends paymentdetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * paymentdetails findUniqueOrThrow
   */
  export type paymentdetailsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter, which paymentdetails to fetch.
     */
    where: paymentdetailsWhereUniqueInput
  }


  /**
   * paymentdetails base type for findFirst actions
   */
  export type paymentdetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter, which paymentdetails to fetch.
     */
    where?: paymentdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentdetails to fetch.
     */
    orderBy?: Enumerable<paymentdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentdetails.
     */
    cursor?: paymentdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentdetails.
     */
    distinct?: Enumerable<PaymentdetailsScalarFieldEnum>
  }

  /**
   * paymentdetails findFirst
   */
  export interface paymentdetailsFindFirstArgs extends paymentdetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * paymentdetails findFirstOrThrow
   */
  export type paymentdetailsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter, which paymentdetails to fetch.
     */
    where?: paymentdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentdetails to fetch.
     */
    orderBy?: Enumerable<paymentdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentdetails.
     */
    cursor?: paymentdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentdetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentdetails.
     */
    distinct?: Enumerable<PaymentdetailsScalarFieldEnum>
  }


  /**
   * paymentdetails findMany
   */
  export type paymentdetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter, which paymentdetails to fetch.
     */
    where?: paymentdetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentdetails to fetch.
     */
    orderBy?: Enumerable<paymentdetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing paymentdetails.
     */
    cursor?: paymentdetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentdetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentdetails.
     */
    skip?: number
    distinct?: Enumerable<PaymentdetailsScalarFieldEnum>
  }


  /**
   * paymentdetails create
   */
  export type paymentdetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * The data needed to create a paymentdetails.
     */
    data: XOR<paymentdetailsCreateInput, paymentdetailsUncheckedCreateInput>
  }


  /**
   * paymentdetails createMany
   */
  export type paymentdetailsCreateManyArgs = {
    /**
     * The data used to create many paymentdetails.
     */
    data: Enumerable<paymentdetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * paymentdetails update
   */
  export type paymentdetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * The data needed to update a paymentdetails.
     */
    data: XOR<paymentdetailsUpdateInput, paymentdetailsUncheckedUpdateInput>
    /**
     * Choose, which paymentdetails to update.
     */
    where: paymentdetailsWhereUniqueInput
  }


  /**
   * paymentdetails updateMany
   */
  export type paymentdetailsUpdateManyArgs = {
    /**
     * The data used to update paymentdetails.
     */
    data: XOR<paymentdetailsUpdateManyMutationInput, paymentdetailsUncheckedUpdateManyInput>
    /**
     * Filter which paymentdetails to update
     */
    where?: paymentdetailsWhereInput
  }


  /**
   * paymentdetails upsert
   */
  export type paymentdetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * The filter to search for the paymentdetails to update in case it exists.
     */
    where: paymentdetailsWhereUniqueInput
    /**
     * In case the paymentdetails found by the `where` argument doesn't exist, create a new paymentdetails with this data.
     */
    create: XOR<paymentdetailsCreateInput, paymentdetailsUncheckedCreateInput>
    /**
     * In case the paymentdetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentdetailsUpdateInput, paymentdetailsUncheckedUpdateInput>
  }


  /**
   * paymentdetails delete
   */
  export type paymentdetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
    /**
     * Filter which paymentdetails to delete.
     */
    where: paymentdetailsWhereUniqueInput
  }


  /**
   * paymentdetails deleteMany
   */
  export type paymentdetailsDeleteManyArgs = {
    /**
     * Filter which paymentdetails to delete
     */
    where?: paymentdetailsWhereInput
  }


  /**
   * paymentdetails.orders
   */
  export type paymentdetails$ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * paymentdetails without action
   */
  export type paymentdetailsArgs = {
    /**
     * Select specific fields to fetch from the paymentdetails
     */
    select?: paymentdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentdetailsInclude | null
  }



  /**
   * Model paymentservice
   */


  export type AggregatePaymentservice = {
    _count: PaymentserviceCountAggregateOutputType | null
    _avg: PaymentserviceAvgAggregateOutputType | null
    _sum: PaymentserviceSumAggregateOutputType | null
    _min: PaymentserviceMinAggregateOutputType | null
    _max: PaymentserviceMaxAggregateOutputType | null
  }

  export type PaymentserviceAvgAggregateOutputType = {
    fee: Decimal | null
  }

  export type PaymentserviceSumAggregateOutputType = {
    fee: Decimal | null
  }

  export type PaymentserviceMinAggregateOutputType = {
    id: string | null
    name: string | null
    fee: Decimal | null
  }

  export type PaymentserviceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    fee: Decimal | null
  }

  export type PaymentserviceCountAggregateOutputType = {
    id: number
    name: number
    fee: number
    _all: number
  }


  export type PaymentserviceAvgAggregateInputType = {
    fee?: true
  }

  export type PaymentserviceSumAggregateInputType = {
    fee?: true
  }

  export type PaymentserviceMinAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type PaymentserviceMaxAggregateInputType = {
    id?: true
    name?: true
    fee?: true
  }

  export type PaymentserviceCountAggregateInputType = {
    id?: true
    name?: true
    fee?: true
    _all?: true
  }

  export type PaymentserviceAggregateArgs = {
    /**
     * Filter which paymentservice to aggregate.
     */
    where?: paymentserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentservices to fetch.
     */
    orderBy?: Enumerable<paymentserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned paymentservices
    **/
    _count?: true | PaymentserviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentserviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentserviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentserviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentserviceMaxAggregateInputType
  }

  export type GetPaymentserviceAggregateType<T extends PaymentserviceAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentservice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentservice[P]>
      : GetScalarType<T[P], AggregatePaymentservice[P]>
  }




  export type PaymentserviceGroupByArgs = {
    where?: paymentserviceWhereInput
    orderBy?: Enumerable<paymentserviceOrderByWithAggregationInput>
    by: PaymentserviceScalarFieldEnum[]
    having?: paymentserviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentserviceCountAggregateInputType | true
    _avg?: PaymentserviceAvgAggregateInputType
    _sum?: PaymentserviceSumAggregateInputType
    _min?: PaymentserviceMinAggregateInputType
    _max?: PaymentserviceMaxAggregateInputType
  }


  export type PaymentserviceGroupByOutputType = {
    id: string
    name: string | null
    fee: Decimal | null
    _count: PaymentserviceCountAggregateOutputType | null
    _avg: PaymentserviceAvgAggregateOutputType | null
    _sum: PaymentserviceSumAggregateOutputType | null
    _min: PaymentserviceMinAggregateOutputType | null
    _max: PaymentserviceMaxAggregateOutputType | null
  }

  type GetPaymentserviceGroupByPayload<T extends PaymentserviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PaymentserviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentserviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentserviceGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentserviceGroupByOutputType[P]>
        }
      >
    >


  export type paymentserviceSelect = {
    id?: boolean
    name?: boolean
    fee?: boolean
    orders?: boolean | paymentservice$ordersArgs
    _count?: boolean | PaymentserviceCountOutputTypeArgs
  }


  export type paymentserviceInclude = {
    orders?: boolean | paymentservice$ordersArgs
    _count?: boolean | PaymentserviceCountOutputTypeArgs
  }

  export type paymentserviceGetPayload<S extends boolean | null | undefined | paymentserviceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? paymentservice :
    S extends undefined ? never :
    S extends { include: any } & (paymentserviceArgs | paymentserviceFindManyArgs)
    ? paymentservice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['include'][P]>>  :
        P extends '_count' ? PaymentserviceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (paymentserviceArgs | paymentserviceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orders' ? Array < ordersGetPayload<S['select'][P]>>  :
        P extends '_count' ? PaymentserviceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof paymentservice ? paymentservice[P] : never
  } 
      : paymentservice


  type paymentserviceCountArgs = 
    Omit<paymentserviceFindManyArgs, 'select' | 'include'> & {
      select?: PaymentserviceCountAggregateInputType | true
    }

  export interface paymentserviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Paymentservice that matches the filter.
     * @param {paymentserviceFindUniqueArgs} args - Arguments to find a Paymentservice
     * @example
     * // Get one Paymentservice
     * const paymentservice = await prisma.paymentservice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends paymentserviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, paymentserviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'paymentservice'> extends True ? Prisma__paymentserviceClient<paymentserviceGetPayload<T>> : Prisma__paymentserviceClient<paymentserviceGetPayload<T> | null, null>

    /**
     * Find one Paymentservice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {paymentserviceFindUniqueOrThrowArgs} args - Arguments to find a Paymentservice
     * @example
     * // Get one Paymentservice
     * const paymentservice = await prisma.paymentservice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends paymentserviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, paymentserviceFindUniqueOrThrowArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Find the first Paymentservice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentserviceFindFirstArgs} args - Arguments to find a Paymentservice
     * @example
     * // Get one Paymentservice
     * const paymentservice = await prisma.paymentservice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends paymentserviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, paymentserviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'paymentservice'> extends True ? Prisma__paymentserviceClient<paymentserviceGetPayload<T>> : Prisma__paymentserviceClient<paymentserviceGetPayload<T> | null, null>

    /**
     * Find the first Paymentservice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentserviceFindFirstOrThrowArgs} args - Arguments to find a Paymentservice
     * @example
     * // Get one Paymentservice
     * const paymentservice = await prisma.paymentservice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends paymentserviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, paymentserviceFindFirstOrThrowArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Find zero or more Paymentservices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentserviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paymentservices
     * const paymentservices = await prisma.paymentservice.findMany()
     * 
     * // Get first 10 Paymentservices
     * const paymentservices = await prisma.paymentservice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentserviceWithIdOnly = await prisma.paymentservice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends paymentserviceFindManyArgs>(
      args?: SelectSubset<T, paymentserviceFindManyArgs>
    ): Prisma.PrismaPromise<Array<paymentserviceGetPayload<T>>>

    /**
     * Create a Paymentservice.
     * @param {paymentserviceCreateArgs} args - Arguments to create a Paymentservice.
     * @example
     * // Create one Paymentservice
     * const Paymentservice = await prisma.paymentservice.create({
     *   data: {
     *     // ... data to create a Paymentservice
     *   }
     * })
     * 
    **/
    create<T extends paymentserviceCreateArgs>(
      args: SelectSubset<T, paymentserviceCreateArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Create many Paymentservices.
     *     @param {paymentserviceCreateManyArgs} args - Arguments to create many Paymentservices.
     *     @example
     *     // Create many Paymentservices
     *     const paymentservice = await prisma.paymentservice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends paymentserviceCreateManyArgs>(
      args?: SelectSubset<T, paymentserviceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paymentservice.
     * @param {paymentserviceDeleteArgs} args - Arguments to delete one Paymentservice.
     * @example
     * // Delete one Paymentservice
     * const Paymentservice = await prisma.paymentservice.delete({
     *   where: {
     *     // ... filter to delete one Paymentservice
     *   }
     * })
     * 
    **/
    delete<T extends paymentserviceDeleteArgs>(
      args: SelectSubset<T, paymentserviceDeleteArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Update one Paymentservice.
     * @param {paymentserviceUpdateArgs} args - Arguments to update one Paymentservice.
     * @example
     * // Update one Paymentservice
     * const paymentservice = await prisma.paymentservice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends paymentserviceUpdateArgs>(
      args: SelectSubset<T, paymentserviceUpdateArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Delete zero or more Paymentservices.
     * @param {paymentserviceDeleteManyArgs} args - Arguments to filter Paymentservices to delete.
     * @example
     * // Delete a few Paymentservices
     * const { count } = await prisma.paymentservice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends paymentserviceDeleteManyArgs>(
      args?: SelectSubset<T, paymentserviceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paymentservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentserviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paymentservices
     * const paymentservice = await prisma.paymentservice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends paymentserviceUpdateManyArgs>(
      args: SelectSubset<T, paymentserviceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paymentservice.
     * @param {paymentserviceUpsertArgs} args - Arguments to update or create a Paymentservice.
     * @example
     * // Update or create a Paymentservice
     * const paymentservice = await prisma.paymentservice.upsert({
     *   create: {
     *     // ... data to create a Paymentservice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paymentservice we want to update
     *   }
     * })
    **/
    upsert<T extends paymentserviceUpsertArgs>(
      args: SelectSubset<T, paymentserviceUpsertArgs>
    ): Prisma__paymentserviceClient<paymentserviceGetPayload<T>>

    /**
     * Count the number of Paymentservices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentserviceCountArgs} args - Arguments to filter Paymentservices to count.
     * @example
     * // Count the number of Paymentservices
     * const count = await prisma.paymentservice.count({
     *   where: {
     *     // ... the filter for the Paymentservices we want to count
     *   }
     * })
    **/
    count<T extends paymentserviceCountArgs>(
      args?: Subset<T, paymentserviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentserviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paymentservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentserviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentserviceAggregateArgs>(args: Subset<T, PaymentserviceAggregateArgs>): Prisma.PrismaPromise<GetPaymentserviceAggregateType<T>>

    /**
     * Group by Paymentservice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentserviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentserviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentserviceGroupByArgs['orderBy'] }
        : { orderBy?: PaymentserviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentserviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentserviceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for paymentservice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__paymentserviceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends paymentservice$ordersArgs= {}>(args?: Subset<T, paymentservice$ordersArgs>): Prisma.PrismaPromise<Array<ordersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * paymentservice base type for findUnique actions
   */
  export type paymentserviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter, which paymentservice to fetch.
     */
    where: paymentserviceWhereUniqueInput
  }

  /**
   * paymentservice findUnique
   */
  export interface paymentserviceFindUniqueArgs extends paymentserviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * paymentservice findUniqueOrThrow
   */
  export type paymentserviceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter, which paymentservice to fetch.
     */
    where: paymentserviceWhereUniqueInput
  }


  /**
   * paymentservice base type for findFirst actions
   */
  export type paymentserviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter, which paymentservice to fetch.
     */
    where?: paymentserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentservices to fetch.
     */
    orderBy?: Enumerable<paymentserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentservices.
     */
    cursor?: paymentserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentservices.
     */
    distinct?: Enumerable<PaymentserviceScalarFieldEnum>
  }

  /**
   * paymentservice findFirst
   */
  export interface paymentserviceFindFirstArgs extends paymentserviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * paymentservice findFirstOrThrow
   */
  export type paymentserviceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter, which paymentservice to fetch.
     */
    where?: paymentserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentservices to fetch.
     */
    orderBy?: Enumerable<paymentserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentservices.
     */
    cursor?: paymentserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentservices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentservices.
     */
    distinct?: Enumerable<PaymentserviceScalarFieldEnum>
  }


  /**
   * paymentservice findMany
   */
  export type paymentserviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter, which paymentservices to fetch.
     */
    where?: paymentserviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentservices to fetch.
     */
    orderBy?: Enumerable<paymentserviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing paymentservices.
     */
    cursor?: paymentserviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentservices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentservices.
     */
    skip?: number
    distinct?: Enumerable<PaymentserviceScalarFieldEnum>
  }


  /**
   * paymentservice create
   */
  export type paymentserviceCreateArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * The data needed to create a paymentservice.
     */
    data: XOR<paymentserviceCreateInput, paymentserviceUncheckedCreateInput>
  }


  /**
   * paymentservice createMany
   */
  export type paymentserviceCreateManyArgs = {
    /**
     * The data used to create many paymentservices.
     */
    data: Enumerable<paymentserviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * paymentservice update
   */
  export type paymentserviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * The data needed to update a paymentservice.
     */
    data: XOR<paymentserviceUpdateInput, paymentserviceUncheckedUpdateInput>
    /**
     * Choose, which paymentservice to update.
     */
    where: paymentserviceWhereUniqueInput
  }


  /**
   * paymentservice updateMany
   */
  export type paymentserviceUpdateManyArgs = {
    /**
     * The data used to update paymentservices.
     */
    data: XOR<paymentserviceUpdateManyMutationInput, paymentserviceUncheckedUpdateManyInput>
    /**
     * Filter which paymentservices to update
     */
    where?: paymentserviceWhereInput
  }


  /**
   * paymentservice upsert
   */
  export type paymentserviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * The filter to search for the paymentservice to update in case it exists.
     */
    where: paymentserviceWhereUniqueInput
    /**
     * In case the paymentservice found by the `where` argument doesn't exist, create a new paymentservice with this data.
     */
    create: XOR<paymentserviceCreateInput, paymentserviceUncheckedCreateInput>
    /**
     * In case the paymentservice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentserviceUpdateInput, paymentserviceUncheckedUpdateInput>
  }


  /**
   * paymentservice delete
   */
  export type paymentserviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
    /**
     * Filter which paymentservice to delete.
     */
    where: paymentserviceWhereUniqueInput
  }


  /**
   * paymentservice deleteMany
   */
  export type paymentserviceDeleteManyArgs = {
    /**
     * Filter which paymentservices to delete
     */
    where?: paymentserviceWhereInput
  }


  /**
   * paymentservice.orders
   */
  export type paymentservice$ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * paymentservice without action
   */
  export type paymentserviceArgs = {
    /**
     * Select specific fields to fetch from the paymentservice
     */
    select?: paymentserviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: paymentserviceInclude | null
  }



  /**
   * Model product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    price: Decimal | null
    stock: number | null
  }

  export type ProductSumAggregateOutputType = {
    price: Decimal | null
    stock: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    shopid: string | null
    productname: string | null
    description: string | null
    price: Decimal | null
    stock: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    shopid: string | null
    productname: string | null
    description: string | null
    price: Decimal | null
    stock: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    shopid: number
    productname: number
    description: number
    price: number
    stock: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductSumAggregateInputType = {
    price?: true
    stock?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    shopid?: true
    productname?: true
    description?: true
    price?: true
    stock?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    shopid?: true
    productname?: true
    description?: true
    price?: true
    stock?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    shopid?: true
    productname?: true
    description?: true
    price?: true
    stock?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: string
    shopid: string
    productname: string | null
    description: string | null
    price: Decimal | null
    stock: number | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect = {
    id?: boolean
    shopid?: boolean
    productname?: boolean
    description?: boolean
    price?: boolean
    stock?: boolean
    cart?: boolean | product$cartArgs
    categoryprod?: boolean | product$categoryprodArgs
    discountitems?: boolean | product$discountitemsArgs
    orderdetails?: boolean | product$orderdetailsArgs
    shop?: boolean | shopArgs
    productimg?: boolean | product$productimgArgs
    userreview?: boolean | product$userreviewArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }


  export type productInclude = {
    cart?: boolean | product$cartArgs
    categoryprod?: boolean | product$categoryprodArgs
    discountitems?: boolean | product$discountitemsArgs
    orderdetails?: boolean | product$orderdetailsArgs
    shop?: boolean | shopArgs
    productimg?: boolean | product$productimgArgs
    userreview?: boolean | product$userreviewArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type productGetPayload<S extends boolean | null | undefined | productArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? product :
    S extends undefined ? never :
    S extends { include: any } & (productArgs | productFindManyArgs)
    ? product  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cart' ? Array < cartGetPayload<S['include'][P]>>  :
        P extends 'categoryprod' ? Array < categoryprodGetPayload<S['include'][P]>>  :
        P extends 'discountitems' ? Array < discountitemsGetPayload<S['include'][P]>>  :
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['include'][P]>>  :
        P extends 'shop' ? shopGetPayload<S['include'][P]> :
        P extends 'productimg' ? Array < productimgGetPayload<S['include'][P]>>  :
        P extends 'userreview' ? Array < userreviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productArgs | productFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cart' ? Array < cartGetPayload<S['select'][P]>>  :
        P extends 'categoryprod' ? Array < categoryprodGetPayload<S['select'][P]>>  :
        P extends 'discountitems' ? Array < discountitemsGetPayload<S['select'][P]>>  :
        P extends 'orderdetails' ? Array < orderdetailsGetPayload<S['select'][P]>>  :
        P extends 'shop' ? shopGetPayload<S['select'][P]> :
        P extends 'productimg' ? Array < productimgGetPayload<S['select'][P]>>  :
        P extends 'userreview' ? Array < userreviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof product ? product[P] : never
  } 
      : product


  type productCountArgs = 
    Omit<productFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productFindUniqueOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'product'> extends True ? Prisma__productClient<productGetPayload<T>> : Prisma__productClient<productGetPayload<T> | null, null>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productFindFirstOrThrowArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productFindManyArgs>(
      args?: SelectSubset<T, productFindManyArgs>
    ): Prisma.PrismaPromise<Array<productGetPayload<T>>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends productCreateArgs>(
      args: SelectSubset<T, productCreateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Create many Products.
     *     @param {productCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productCreateManyArgs>(
      args?: SelectSubset<T, productCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends productDeleteArgs>(
      args: SelectSubset<T, productDeleteArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productUpdateArgs>(
      args: SelectSubset<T, productUpdateArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productDeleteManyArgs>(
      args?: SelectSubset<T, productDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productUpdateManyArgs>(
      args: SelectSubset<T, productUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends productUpsertArgs>(
      args: SelectSubset<T, productUpsertArgs>
    ): Prisma__productClient<productGetPayload<T>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cart<T extends product$cartArgs= {}>(args?: Subset<T, product$cartArgs>): Prisma.PrismaPromise<Array<cartGetPayload<T>>| Null>;

    categoryprod<T extends product$categoryprodArgs= {}>(args?: Subset<T, product$categoryprodArgs>): Prisma.PrismaPromise<Array<categoryprodGetPayload<T>>| Null>;

    discountitems<T extends product$discountitemsArgs= {}>(args?: Subset<T, product$discountitemsArgs>): Prisma.PrismaPromise<Array<discountitemsGetPayload<T>>| Null>;

    orderdetails<T extends product$orderdetailsArgs= {}>(args?: Subset<T, product$orderdetailsArgs>): Prisma.PrismaPromise<Array<orderdetailsGetPayload<T>>| Null>;

    shop<T extends shopArgs= {}>(args?: Subset<T, shopArgs>): Prisma__shopClient<shopGetPayload<T> | Null>;

    productimg<T extends product$productimgArgs= {}>(args?: Subset<T, product$productimgArgs>): Prisma.PrismaPromise<Array<productimgGetPayload<T>>| Null>;

    userreview<T extends product$userreviewArgs= {}>(args?: Subset<T, product$userreviewArgs>): Prisma.PrismaPromise<Array<userreviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * product base type for findUnique actions
   */
  export type productFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUnique
   */
  export interface productFindUniqueArgs extends productFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }


  /**
   * product base type for findFirst actions
   */
  export type productFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * product findFirst
   */
  export interface productFindFirstArgs extends productFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product findMany
   */
  export type productFindManyArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: Enumerable<productOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * product create
   */
  export type productCreateArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }


  /**
   * product createMany
   */
  export type productCreateManyArgs = {
    /**
     * The data used to create many products.
     */
    data: Enumerable<productCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * product update
   */
  export type productUpdateArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }


  /**
   * product updateMany
   */
  export type productUpdateManyArgs = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
  }


  /**
   * product upsert
   */
  export type productUpsertArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }


  /**
   * product delete
   */
  export type productDeleteArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }


  /**
   * product deleteMany
   */
  export type productDeleteManyArgs = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
  }


  /**
   * product.cart
   */
  export type product$cartArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    cursor?: cartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * product.categoryprod
   */
  export type product$categoryprodArgs = {
    /**
     * Select specific fields to fetch from the categoryprod
     */
    select?: categoryprodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryprodInclude | null
    where?: categoryprodWhereInput
    orderBy?: Enumerable<categoryprodOrderByWithRelationInput>
    cursor?: categoryprodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CategoryprodScalarFieldEnum>
  }


  /**
   * product.discountitems
   */
  export type product$discountitemsArgs = {
    /**
     * Select specific fields to fetch from the discountitems
     */
    select?: discountitemsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: discountitemsInclude | null
    where?: discountitemsWhereInput
    orderBy?: Enumerable<discountitemsOrderByWithRelationInput>
    cursor?: discountitemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DiscountitemsScalarFieldEnum>
  }


  /**
   * product.orderdetails
   */
  export type product$orderdetailsArgs = {
    /**
     * Select specific fields to fetch from the orderdetails
     */
    select?: orderdetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: orderdetailsInclude | null
    where?: orderdetailsWhereInput
    orderBy?: Enumerable<orderdetailsOrderByWithRelationInput>
    cursor?: orderdetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrderdetailsScalarFieldEnum>
  }


  /**
   * product.productimg
   */
  export type product$productimgArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    where?: productimgWhereInput
    orderBy?: Enumerable<productimgOrderByWithRelationInput>
    cursor?: productimgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductimgScalarFieldEnum>
  }


  /**
   * product.userreview
   */
  export type product$userreviewArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    where?: userreviewWhereInput
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    cursor?: userreviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserreviewScalarFieldEnum>
  }


  /**
   * product without action
   */
  export type productArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
  }



  /**
   * Model productimg
   */


  export type AggregateProductimg = {
    _count: ProductimgCountAggregateOutputType | null
    _min: ProductimgMinAggregateOutputType | null
    _max: ProductimgMaxAggregateOutputType | null
  }

  export type ProductimgMinAggregateOutputType = {
    productid: string | null
    imagepath: string | null
    type: string | null
  }

  export type ProductimgMaxAggregateOutputType = {
    productid: string | null
    imagepath: string | null
    type: string | null
  }

  export type ProductimgCountAggregateOutputType = {
    productid: number
    imagepath: number
    type: number
    _all: number
  }


  export type ProductimgMinAggregateInputType = {
    productid?: true
    imagepath?: true
    type?: true
  }

  export type ProductimgMaxAggregateInputType = {
    productid?: true
    imagepath?: true
    type?: true
  }

  export type ProductimgCountAggregateInputType = {
    productid?: true
    imagepath?: true
    type?: true
    _all?: true
  }

  export type ProductimgAggregateArgs = {
    /**
     * Filter which productimg to aggregate.
     */
    where?: productimgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimgs to fetch.
     */
    orderBy?: Enumerable<productimgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productimgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productimgs
    **/
    _count?: true | ProductimgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductimgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductimgMaxAggregateInputType
  }

  export type GetProductimgAggregateType<T extends ProductimgAggregateArgs> = {
        [P in keyof T & keyof AggregateProductimg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductimg[P]>
      : GetScalarType<T[P], AggregateProductimg[P]>
  }




  export type ProductimgGroupByArgs = {
    where?: productimgWhereInput
    orderBy?: Enumerable<productimgOrderByWithAggregationInput>
    by: ProductimgScalarFieldEnum[]
    having?: productimgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductimgCountAggregateInputType | true
    _min?: ProductimgMinAggregateInputType
    _max?: ProductimgMaxAggregateInputType
  }


  export type ProductimgGroupByOutputType = {
    productid: string
    imagepath: string
    type: string | null
    _count: ProductimgCountAggregateOutputType | null
    _min: ProductimgMinAggregateOutputType | null
    _max: ProductimgMaxAggregateOutputType | null
  }

  type GetProductimgGroupByPayload<T extends ProductimgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductimgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductimgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductimgGroupByOutputType[P]>
            : GetScalarType<T[P], ProductimgGroupByOutputType[P]>
        }
      >
    >


  export type productimgSelect = {
    productid?: boolean
    imagepath?: boolean
    type?: boolean
    product?: boolean | productArgs
  }


  export type productimgInclude = {
    product?: boolean | productArgs
  }

  export type productimgGetPayload<S extends boolean | null | undefined | productimgArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? productimg :
    S extends undefined ? never :
    S extends { include: any } & (productimgArgs | productimgFindManyArgs)
    ? productimg  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? productGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (productimgArgs | productimgFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? productGetPayload<S['select'][P]> :  P extends keyof productimg ? productimg[P] : never
  } 
      : productimg


  type productimgCountArgs = 
    Omit<productimgFindManyArgs, 'select' | 'include'> & {
      select?: ProductimgCountAggregateInputType | true
    }

  export interface productimgDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Productimg that matches the filter.
     * @param {productimgFindUniqueArgs} args - Arguments to find a Productimg
     * @example
     * // Get one Productimg
     * const productimg = await prisma.productimg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productimgFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, productimgFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'productimg'> extends True ? Prisma__productimgClient<productimgGetPayload<T>> : Prisma__productimgClient<productimgGetPayload<T> | null, null>

    /**
     * Find one Productimg that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productimgFindUniqueOrThrowArgs} args - Arguments to find a Productimg
     * @example
     * // Get one Productimg
     * const productimg = await prisma.productimg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productimgFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, productimgFindUniqueOrThrowArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Find the first Productimg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimgFindFirstArgs} args - Arguments to find a Productimg
     * @example
     * // Get one Productimg
     * const productimg = await prisma.productimg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productimgFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, productimgFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'productimg'> extends True ? Prisma__productimgClient<productimgGetPayload<T>> : Prisma__productimgClient<productimgGetPayload<T> | null, null>

    /**
     * Find the first Productimg that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimgFindFirstOrThrowArgs} args - Arguments to find a Productimg
     * @example
     * // Get one Productimg
     * const productimg = await prisma.productimg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productimgFindFirstOrThrowArgs>(
      args?: SelectSubset<T, productimgFindFirstOrThrowArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Find zero or more Productimgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productimgs
     * const productimgs = await prisma.productimg.findMany()
     * 
     * // Get first 10 Productimgs
     * const productimgs = await prisma.productimg.findMany({ take: 10 })
     * 
     * // Only select the `productid`
     * const productimgWithProductidOnly = await prisma.productimg.findMany({ select: { productid: true } })
     * 
    **/
    findMany<T extends productimgFindManyArgs>(
      args?: SelectSubset<T, productimgFindManyArgs>
    ): Prisma.PrismaPromise<Array<productimgGetPayload<T>>>

    /**
     * Create a Productimg.
     * @param {productimgCreateArgs} args - Arguments to create a Productimg.
     * @example
     * // Create one Productimg
     * const Productimg = await prisma.productimg.create({
     *   data: {
     *     // ... data to create a Productimg
     *   }
     * })
     * 
    **/
    create<T extends productimgCreateArgs>(
      args: SelectSubset<T, productimgCreateArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Create many Productimgs.
     *     @param {productimgCreateManyArgs} args - Arguments to create many Productimgs.
     *     @example
     *     // Create many Productimgs
     *     const productimg = await prisma.productimg.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productimgCreateManyArgs>(
      args?: SelectSubset<T, productimgCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Productimg.
     * @param {productimgDeleteArgs} args - Arguments to delete one Productimg.
     * @example
     * // Delete one Productimg
     * const Productimg = await prisma.productimg.delete({
     *   where: {
     *     // ... filter to delete one Productimg
     *   }
     * })
     * 
    **/
    delete<T extends productimgDeleteArgs>(
      args: SelectSubset<T, productimgDeleteArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Update one Productimg.
     * @param {productimgUpdateArgs} args - Arguments to update one Productimg.
     * @example
     * // Update one Productimg
     * const productimg = await prisma.productimg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productimgUpdateArgs>(
      args: SelectSubset<T, productimgUpdateArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Delete zero or more Productimgs.
     * @param {productimgDeleteManyArgs} args - Arguments to filter Productimgs to delete.
     * @example
     * // Delete a few Productimgs
     * const { count } = await prisma.productimg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productimgDeleteManyArgs>(
      args?: SelectSubset<T, productimgDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productimgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productimgs
     * const productimg = await prisma.productimg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productimgUpdateManyArgs>(
      args: SelectSubset<T, productimgUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Productimg.
     * @param {productimgUpsertArgs} args - Arguments to update or create a Productimg.
     * @example
     * // Update or create a Productimg
     * const productimg = await prisma.productimg.upsert({
     *   create: {
     *     // ... data to create a Productimg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Productimg we want to update
     *   }
     * })
    **/
    upsert<T extends productimgUpsertArgs>(
      args: SelectSubset<T, productimgUpsertArgs>
    ): Prisma__productimgClient<productimgGetPayload<T>>

    /**
     * Count the number of Productimgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productimgCountArgs} args - Arguments to filter Productimgs to count.
     * @example
     * // Count the number of Productimgs
     * const count = await prisma.productimg.count({
     *   where: {
     *     // ... the filter for the Productimgs we want to count
     *   }
     * })
    **/
    count<T extends productimgCountArgs>(
      args?: Subset<T, productimgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductimgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Productimg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductimgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductimgAggregateArgs>(args: Subset<T, ProductimgAggregateArgs>): Prisma.PrismaPromise<GetProductimgAggregateType<T>>

    /**
     * Group by Productimg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductimgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductimgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductimgGroupByArgs['orderBy'] }
        : { orderBy?: ProductimgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductimgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductimgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for productimg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__productimgClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * productimg base type for findUnique actions
   */
  export type productimgFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter, which productimg to fetch.
     */
    where: productimgWhereUniqueInput
  }

  /**
   * productimg findUnique
   */
  export interface productimgFindUniqueArgs extends productimgFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * productimg findUniqueOrThrow
   */
  export type productimgFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter, which productimg to fetch.
     */
    where: productimgWhereUniqueInput
  }


  /**
   * productimg base type for findFirst actions
   */
  export type productimgFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter, which productimg to fetch.
     */
    where?: productimgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimgs to fetch.
     */
    orderBy?: Enumerable<productimgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productimgs.
     */
    cursor?: productimgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productimgs.
     */
    distinct?: Enumerable<ProductimgScalarFieldEnum>
  }

  /**
   * productimg findFirst
   */
  export interface productimgFindFirstArgs extends productimgFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * productimg findFirstOrThrow
   */
  export type productimgFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter, which productimg to fetch.
     */
    where?: productimgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimgs to fetch.
     */
    orderBy?: Enumerable<productimgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productimgs.
     */
    cursor?: productimgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productimgs.
     */
    distinct?: Enumerable<ProductimgScalarFieldEnum>
  }


  /**
   * productimg findMany
   */
  export type productimgFindManyArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter, which productimgs to fetch.
     */
    where?: productimgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productimgs to fetch.
     */
    orderBy?: Enumerable<productimgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productimgs.
     */
    cursor?: productimgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productimgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productimgs.
     */
    skip?: number
    distinct?: Enumerable<ProductimgScalarFieldEnum>
  }


  /**
   * productimg create
   */
  export type productimgCreateArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * The data needed to create a productimg.
     */
    data: XOR<productimgCreateInput, productimgUncheckedCreateInput>
  }


  /**
   * productimg createMany
   */
  export type productimgCreateManyArgs = {
    /**
     * The data used to create many productimgs.
     */
    data: Enumerable<productimgCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * productimg update
   */
  export type productimgUpdateArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * The data needed to update a productimg.
     */
    data: XOR<productimgUpdateInput, productimgUncheckedUpdateInput>
    /**
     * Choose, which productimg to update.
     */
    where: productimgWhereUniqueInput
  }


  /**
   * productimg updateMany
   */
  export type productimgUpdateManyArgs = {
    /**
     * The data used to update productimgs.
     */
    data: XOR<productimgUpdateManyMutationInput, productimgUncheckedUpdateManyInput>
    /**
     * Filter which productimgs to update
     */
    where?: productimgWhereInput
  }


  /**
   * productimg upsert
   */
  export type productimgUpsertArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * The filter to search for the productimg to update in case it exists.
     */
    where: productimgWhereUniqueInput
    /**
     * In case the productimg found by the `where` argument doesn't exist, create a new productimg with this data.
     */
    create: XOR<productimgCreateInput, productimgUncheckedCreateInput>
    /**
     * In case the productimg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productimgUpdateInput, productimgUncheckedUpdateInput>
  }


  /**
   * productimg delete
   */
  export type productimgDeleteArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
    /**
     * Filter which productimg to delete.
     */
    where: productimgWhereUniqueInput
  }


  /**
   * productimg deleteMany
   */
  export type productimgDeleteManyArgs = {
    /**
     * Filter which productimgs to delete
     */
    where?: productimgWhereInput
  }


  /**
   * productimg without action
   */
  export type productimgArgs = {
    /**
     * Select specific fields to fetch from the productimg
     */
    select?: productimgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productimgInclude | null
  }



  /**
   * Model shop
   */


  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopMinAggregateOutputType = {
    id: string | null
    ownerid: string | null
    shopname: string | null
    shoptype: string | null
    address: string | null
    imagepath: string | null
  }

  export type ShopMaxAggregateOutputType = {
    id: string | null
    ownerid: string | null
    shopname: string | null
    shoptype: string | null
    address: string | null
    imagepath: string | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    ownerid: number
    shopname: number
    shoptype: number
    address: number
    imagepath: number
    _all: number
  }


  export type ShopMinAggregateInputType = {
    id?: true
    ownerid?: true
    shopname?: true
    shoptype?: true
    address?: true
    imagepath?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    ownerid?: true
    shopname?: true
    shoptype?: true
    address?: true
    imagepath?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    ownerid?: true
    shopname?: true
    shoptype?: true
    address?: true
    imagepath?: true
    _all?: true
  }

  export type ShopAggregateArgs = {
    /**
     * Filter which shop to aggregate.
     */
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     */
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs = {
    where?: shopWhereInput
    orderBy?: Enumerable<shopOrderByWithAggregationInput>
    by: ShopScalarFieldEnum[]
    having?: shopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }


  export type ShopGroupByOutputType = {
    id: string
    ownerid: string
    shopname: string | null
    shoptype: string | null
    address: string | null
    imagepath: string | null
    _count: ShopCountAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type shopSelect = {
    id?: boolean
    ownerid?: boolean
    shopname?: boolean
    shoptype?: boolean
    address?: boolean
    imagepath?: boolean
    product?: boolean | shop$productArgs
    users?: boolean | usersArgs
    _count?: boolean | ShopCountOutputTypeArgs
  }


  export type shopInclude = {
    product?: boolean | shop$productArgs
    users?: boolean | usersArgs
    _count?: boolean | ShopCountOutputTypeArgs
  }

  export type shopGetPayload<S extends boolean | null | undefined | shopArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? shop :
    S extends undefined ? never :
    S extends { include: any } & (shopArgs | shopFindManyArgs)
    ? shop  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? Array < productGetPayload<S['include'][P]>>  :
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (shopArgs | shopFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? Array < productGetPayload<S['select'][P]>>  :
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends '_count' ? ShopCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof shop ? shop[P] : never
  } 
      : shop


  type shopCountArgs = 
    Omit<shopFindManyArgs, 'select' | 'include'> & {
      select?: ShopCountAggregateInputType | true
    }

  export interface shopDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Shop that matches the filter.
     * @param {shopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, shopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'shop'> extends True ? Prisma__shopClient<shopGetPayload<T>> : Prisma__shopClient<shopGetPayload<T> | null, null>

    /**
     * Find one Shop that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shopFindUniqueOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shopFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, shopFindUniqueOrThrowArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, shopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'shop'> extends True ? Prisma__shopClient<shopGetPayload<T>> : Prisma__shopClient<shopGetPayload<T> | null, null>

    /**
     * Find the first Shop that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindFirstOrThrowArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shopFindFirstOrThrowArgs>(
      args?: SelectSubset<T, shopFindFirstOrThrowArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends shopFindManyArgs>(
      args?: SelectSubset<T, shopFindManyArgs>
    ): Prisma.PrismaPromise<Array<shopGetPayload<T>>>

    /**
     * Create a Shop.
     * @param {shopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends shopCreateArgs>(
      args: SelectSubset<T, shopCreateArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Create many Shops.
     *     @param {shopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shopCreateManyArgs>(
      args?: SelectSubset<T, shopCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {shopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends shopDeleteArgs>(
      args: SelectSubset<T, shopDeleteArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Update one Shop.
     * @param {shopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shopUpdateArgs>(
      args: SelectSubset<T, shopUpdateArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Delete zero or more Shops.
     * @param {shopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shopDeleteManyArgs>(
      args?: SelectSubset<T, shopDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shopUpdateManyArgs>(
      args: SelectSubset<T, shopUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {shopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends shopUpsertArgs>(
      args: SelectSubset<T, shopUpsertArgs>
    ): Prisma__shopClient<shopGetPayload<T>>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends shopCountArgs>(
      args?: Subset<T, shopCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__shopClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends shop$productArgs= {}>(args?: Subset<T, shop$productArgs>): Prisma.PrismaPromise<Array<productGetPayload<T>>| Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * shop base type for findUnique actions
   */
  export type shopFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter, which shop to fetch.
     */
    where: shopWhereUniqueInput
  }

  /**
   * shop findUnique
   */
  export interface shopFindUniqueArgs extends shopFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shop findUniqueOrThrow
   */
  export type shopFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter, which shop to fetch.
     */
    where: shopWhereUniqueInput
  }


  /**
   * shop base type for findFirst actions
   */
  export type shopFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter, which shop to fetch.
     */
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     */
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shops.
     */
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shops.
     */
    distinct?: Enumerable<ShopScalarFieldEnum>
  }

  /**
   * shop findFirst
   */
  export interface shopFindFirstArgs extends shopFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shop findFirstOrThrow
   */
  export type shopFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter, which shop to fetch.
     */
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     */
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shops.
     */
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shops.
     */
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * shop findMany
   */
  export type shopFindManyArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter, which shops to fetch.
     */
    where?: shopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shops to fetch.
     */
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shops.
     */
    cursor?: shopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shops from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shops.
     */
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * shop create
   */
  export type shopCreateArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * The data needed to create a shop.
     */
    data: XOR<shopCreateInput, shopUncheckedCreateInput>
  }


  /**
   * shop createMany
   */
  export type shopCreateManyArgs = {
    /**
     * The data used to create many shops.
     */
    data: Enumerable<shopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * shop update
   */
  export type shopUpdateArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * The data needed to update a shop.
     */
    data: XOR<shopUpdateInput, shopUncheckedUpdateInput>
    /**
     * Choose, which shop to update.
     */
    where: shopWhereUniqueInput
  }


  /**
   * shop updateMany
   */
  export type shopUpdateManyArgs = {
    /**
     * The data used to update shops.
     */
    data: XOR<shopUpdateManyMutationInput, shopUncheckedUpdateManyInput>
    /**
     * Filter which shops to update
     */
    where?: shopWhereInput
  }


  /**
   * shop upsert
   */
  export type shopUpsertArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * The filter to search for the shop to update in case it exists.
     */
    where: shopWhereUniqueInput
    /**
     * In case the shop found by the `where` argument doesn't exist, create a new shop with this data.
     */
    create: XOR<shopCreateInput, shopUncheckedCreateInput>
    /**
     * In case the shop was found with the provided `where` argument, update it with this data.
     */
    update: XOR<shopUpdateInput, shopUncheckedUpdateInput>
  }


  /**
   * shop delete
   */
  export type shopDeleteArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    /**
     * Filter which shop to delete.
     */
    where: shopWhereUniqueInput
  }


  /**
   * shop deleteMany
   */
  export type shopDeleteManyArgs = {
    /**
     * Filter which shops to delete
     */
    where?: shopWhereInput
  }


  /**
   * shop.product
   */
  export type shop$productArgs = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productInclude | null
    where?: productWhereInput
    orderBy?: Enumerable<productOrderByWithRelationInput>
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * shop without action
   */
  export type shopArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
  }



  /**
   * Model subcategory
   */


  export type AggregateSubcategory = {
    _count: SubcategoryCountAggregateOutputType | null
    _avg: SubcategoryAvgAggregateOutputType | null
    _sum: SubcategorySumAggregateOutputType | null
    _min: SubcategoryMinAggregateOutputType | null
    _max: SubcategoryMaxAggregateOutputType | null
  }

  export type SubcategoryAvgAggregateOutputType = {
    maincatid: number | null
    subcatid: number | null
  }

  export type SubcategorySumAggregateOutputType = {
    maincatid: number | null
    subcatid: number | null
  }

  export type SubcategoryMinAggregateOutputType = {
    maincatid: number | null
    subcatid: number | null
  }

  export type SubcategoryMaxAggregateOutputType = {
    maincatid: number | null
    subcatid: number | null
  }

  export type SubcategoryCountAggregateOutputType = {
    maincatid: number
    subcatid: number
    _all: number
  }


  export type SubcategoryAvgAggregateInputType = {
    maincatid?: true
    subcatid?: true
  }

  export type SubcategorySumAggregateInputType = {
    maincatid?: true
    subcatid?: true
  }

  export type SubcategoryMinAggregateInputType = {
    maincatid?: true
    subcatid?: true
  }

  export type SubcategoryMaxAggregateInputType = {
    maincatid?: true
    subcatid?: true
  }

  export type SubcategoryCountAggregateInputType = {
    maincatid?: true
    subcatid?: true
    _all?: true
  }

  export type SubcategoryAggregateArgs = {
    /**
     * Filter which subcategory to aggregate.
     */
    where?: subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subcategories to fetch.
     */
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subcategories
    **/
    _count?: true | SubcategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubcategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubcategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubcategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubcategoryMaxAggregateInputType
  }

  export type GetSubcategoryAggregateType<T extends SubcategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSubcategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubcategory[P]>
      : GetScalarType<T[P], AggregateSubcategory[P]>
  }




  export type SubcategoryGroupByArgs = {
    where?: subcategoryWhereInput
    orderBy?: Enumerable<subcategoryOrderByWithAggregationInput>
    by: SubcategoryScalarFieldEnum[]
    having?: subcategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubcategoryCountAggregateInputType | true
    _avg?: SubcategoryAvgAggregateInputType
    _sum?: SubcategorySumAggregateInputType
    _min?: SubcategoryMinAggregateInputType
    _max?: SubcategoryMaxAggregateInputType
  }


  export type SubcategoryGroupByOutputType = {
    maincatid: number
    subcatid: number
    _count: SubcategoryCountAggregateOutputType | null
    _avg: SubcategoryAvgAggregateOutputType | null
    _sum: SubcategorySumAggregateOutputType | null
    _min: SubcategoryMinAggregateOutputType | null
    _max: SubcategoryMaxAggregateOutputType | null
  }

  type GetSubcategoryGroupByPayload<T extends SubcategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SubcategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubcategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubcategoryGroupByOutputType[P]>
            : GetScalarType<T[P], SubcategoryGroupByOutputType[P]>
        }
      >
    >


  export type subcategorySelect = {
    maincatid?: boolean
    subcatid?: boolean
    category_subcategory_maincatidTocategory?: boolean | categoryArgs
    category_subcategory_subcatidTocategory?: boolean | categoryArgs
  }


  export type subcategoryInclude = {
    category_subcategory_maincatidTocategory?: boolean | categoryArgs
    category_subcategory_subcatidTocategory?: boolean | categoryArgs
  }

  export type subcategoryGetPayload<S extends boolean | null | undefined | subcategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? subcategory :
    S extends undefined ? never :
    S extends { include: any } & (subcategoryArgs | subcategoryFindManyArgs)
    ? subcategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category_subcategory_maincatidTocategory' ? categoryGetPayload<S['include'][P]> :
        P extends 'category_subcategory_subcatidTocategory' ? categoryGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (subcategoryArgs | subcategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category_subcategory_maincatidTocategory' ? categoryGetPayload<S['select'][P]> :
        P extends 'category_subcategory_subcatidTocategory' ? categoryGetPayload<S['select'][P]> :  P extends keyof subcategory ? subcategory[P] : never
  } 
      : subcategory


  type subcategoryCountArgs = 
    Omit<subcategoryFindManyArgs, 'select' | 'include'> & {
      select?: SubcategoryCountAggregateInputType | true
    }

  export interface subcategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Subcategory that matches the filter.
     * @param {subcategoryFindUniqueArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends subcategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, subcategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'subcategory'> extends True ? Prisma__subcategoryClient<subcategoryGetPayload<T>> : Prisma__subcategoryClient<subcategoryGetPayload<T> | null, null>

    /**
     * Find one Subcategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {subcategoryFindUniqueOrThrowArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends subcategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, subcategoryFindUniqueOrThrowArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Find the first Subcategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subcategoryFindFirstArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends subcategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, subcategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'subcategory'> extends True ? Prisma__subcategoryClient<subcategoryGetPayload<T>> : Prisma__subcategoryClient<subcategoryGetPayload<T> | null, null>

    /**
     * Find the first Subcategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subcategoryFindFirstOrThrowArgs} args - Arguments to find a Subcategory
     * @example
     * // Get one Subcategory
     * const subcategory = await prisma.subcategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends subcategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, subcategoryFindFirstOrThrowArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Find zero or more Subcategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subcategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subcategories
     * const subcategories = await prisma.subcategory.findMany()
     * 
     * // Get first 10 Subcategories
     * const subcategories = await prisma.subcategory.findMany({ take: 10 })
     * 
     * // Only select the `maincatid`
     * const subcategoryWithMaincatidOnly = await prisma.subcategory.findMany({ select: { maincatid: true } })
     * 
    **/
    findMany<T extends subcategoryFindManyArgs>(
      args?: SelectSubset<T, subcategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<subcategoryGetPayload<T>>>

    /**
     * Create a Subcategory.
     * @param {subcategoryCreateArgs} args - Arguments to create a Subcategory.
     * @example
     * // Create one Subcategory
     * const Subcategory = await prisma.subcategory.create({
     *   data: {
     *     // ... data to create a Subcategory
     *   }
     * })
     * 
    **/
    create<T extends subcategoryCreateArgs>(
      args: SelectSubset<T, subcategoryCreateArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Create many Subcategories.
     *     @param {subcategoryCreateManyArgs} args - Arguments to create many Subcategories.
     *     @example
     *     // Create many Subcategories
     *     const subcategory = await prisma.subcategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends subcategoryCreateManyArgs>(
      args?: SelectSubset<T, subcategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subcategory.
     * @param {subcategoryDeleteArgs} args - Arguments to delete one Subcategory.
     * @example
     * // Delete one Subcategory
     * const Subcategory = await prisma.subcategory.delete({
     *   where: {
     *     // ... filter to delete one Subcategory
     *   }
     * })
     * 
    **/
    delete<T extends subcategoryDeleteArgs>(
      args: SelectSubset<T, subcategoryDeleteArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Update one Subcategory.
     * @param {subcategoryUpdateArgs} args - Arguments to update one Subcategory.
     * @example
     * // Update one Subcategory
     * const subcategory = await prisma.subcategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends subcategoryUpdateArgs>(
      args: SelectSubset<T, subcategoryUpdateArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Delete zero or more Subcategories.
     * @param {subcategoryDeleteManyArgs} args - Arguments to filter Subcategories to delete.
     * @example
     * // Delete a few Subcategories
     * const { count } = await prisma.subcategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends subcategoryDeleteManyArgs>(
      args?: SelectSubset<T, subcategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subcategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subcategories
     * const subcategory = await prisma.subcategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends subcategoryUpdateManyArgs>(
      args: SelectSubset<T, subcategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subcategory.
     * @param {subcategoryUpsertArgs} args - Arguments to update or create a Subcategory.
     * @example
     * // Update or create a Subcategory
     * const subcategory = await prisma.subcategory.upsert({
     *   create: {
     *     // ... data to create a Subcategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subcategory we want to update
     *   }
     * })
    **/
    upsert<T extends subcategoryUpsertArgs>(
      args: SelectSubset<T, subcategoryUpsertArgs>
    ): Prisma__subcategoryClient<subcategoryGetPayload<T>>

    /**
     * Count the number of Subcategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subcategoryCountArgs} args - Arguments to filter Subcategories to count.
     * @example
     * // Count the number of Subcategories
     * const count = await prisma.subcategory.count({
     *   where: {
     *     // ... the filter for the Subcategories we want to count
     *   }
     * })
    **/
    count<T extends subcategoryCountArgs>(
      args?: Subset<T, subcategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubcategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubcategoryAggregateArgs>(args: Subset<T, SubcategoryAggregateArgs>): Prisma.PrismaPromise<GetSubcategoryAggregateType<T>>

    /**
     * Group by Subcategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubcategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubcategoryGroupByArgs['orderBy'] }
        : { orderBy?: SubcategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubcategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubcategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for subcategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__subcategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category_subcategory_maincatidTocategory<T extends categoryArgs= {}>(args?: Subset<T, categoryArgs>): Prisma__categoryClient<categoryGetPayload<T> | Null>;

    category_subcategory_subcatidTocategory<T extends categoryArgs= {}>(args?: Subset<T, categoryArgs>): Prisma__categoryClient<categoryGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * subcategory base type for findUnique actions
   */
  export type subcategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter, which subcategory to fetch.
     */
    where: subcategoryWhereUniqueInput
  }

  /**
   * subcategory findUnique
   */
  export interface subcategoryFindUniqueArgs extends subcategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * subcategory findUniqueOrThrow
   */
  export type subcategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter, which subcategory to fetch.
     */
    where: subcategoryWhereUniqueInput
  }


  /**
   * subcategory base type for findFirst actions
   */
  export type subcategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter, which subcategory to fetch.
     */
    where?: subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subcategories to fetch.
     */
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subcategories.
     */
    cursor?: subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subcategories.
     */
    distinct?: Enumerable<SubcategoryScalarFieldEnum>
  }

  /**
   * subcategory findFirst
   */
  export interface subcategoryFindFirstArgs extends subcategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * subcategory findFirstOrThrow
   */
  export type subcategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter, which subcategory to fetch.
     */
    where?: subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subcategories to fetch.
     */
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subcategories.
     */
    cursor?: subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subcategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subcategories.
     */
    distinct?: Enumerable<SubcategoryScalarFieldEnum>
  }


  /**
   * subcategory findMany
   */
  export type subcategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter, which subcategories to fetch.
     */
    where?: subcategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subcategories to fetch.
     */
    orderBy?: Enumerable<subcategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subcategories.
     */
    cursor?: subcategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subcategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subcategories.
     */
    skip?: number
    distinct?: Enumerable<SubcategoryScalarFieldEnum>
  }


  /**
   * subcategory create
   */
  export type subcategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * The data needed to create a subcategory.
     */
    data: XOR<subcategoryCreateInput, subcategoryUncheckedCreateInput>
  }


  /**
   * subcategory createMany
   */
  export type subcategoryCreateManyArgs = {
    /**
     * The data used to create many subcategories.
     */
    data: Enumerable<subcategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * subcategory update
   */
  export type subcategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * The data needed to update a subcategory.
     */
    data: XOR<subcategoryUpdateInput, subcategoryUncheckedUpdateInput>
    /**
     * Choose, which subcategory to update.
     */
    where: subcategoryWhereUniqueInput
  }


  /**
   * subcategory updateMany
   */
  export type subcategoryUpdateManyArgs = {
    /**
     * The data used to update subcategories.
     */
    data: XOR<subcategoryUpdateManyMutationInput, subcategoryUncheckedUpdateManyInput>
    /**
     * Filter which subcategories to update
     */
    where?: subcategoryWhereInput
  }


  /**
   * subcategory upsert
   */
  export type subcategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * The filter to search for the subcategory to update in case it exists.
     */
    where: subcategoryWhereUniqueInput
    /**
     * In case the subcategory found by the `where` argument doesn't exist, create a new subcategory with this data.
     */
    create: XOR<subcategoryCreateInput, subcategoryUncheckedCreateInput>
    /**
     * In case the subcategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subcategoryUpdateInput, subcategoryUncheckedUpdateInput>
  }


  /**
   * subcategory delete
   */
  export type subcategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
    /**
     * Filter which subcategory to delete.
     */
    where: subcategoryWhereUniqueInput
  }


  /**
   * subcategory deleteMany
   */
  export type subcategoryDeleteManyArgs = {
    /**
     * Filter which subcategories to delete
     */
    where?: subcategoryWhereInput
  }


  /**
   * subcategory without action
   */
  export type subcategoryArgs = {
    /**
     * Select specific fields to fetch from the subcategory
     */
    select?: subcategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: subcategoryInclude | null
  }



  /**
   * Model userreview
   */


  export type AggregateUserreview = {
    _count: UserreviewCountAggregateOutputType | null
    _avg: UserreviewAvgAggregateOutputType | null
    _sum: UserreviewSumAggregateOutputType | null
    _min: UserreviewMinAggregateOutputType | null
    _max: UserreviewMaxAggregateOutputType | null
  }

  export type UserreviewAvgAggregateOutputType = {
    rating: Decimal | null
  }

  export type UserreviewSumAggregateOutputType = {
    rating: Decimal | null
  }

  export type UserreviewMinAggregateOutputType = {
    userid: string | null
    productid: string | null
    rating: Decimal | null
    review: string | null
  }

  export type UserreviewMaxAggregateOutputType = {
    userid: string | null
    productid: string | null
    rating: Decimal | null
    review: string | null
  }

  export type UserreviewCountAggregateOutputType = {
    userid: number
    productid: number
    rating: number
    review: number
    _all: number
  }


  export type UserreviewAvgAggregateInputType = {
    rating?: true
  }

  export type UserreviewSumAggregateInputType = {
    rating?: true
  }

  export type UserreviewMinAggregateInputType = {
    userid?: true
    productid?: true
    rating?: true
    review?: true
  }

  export type UserreviewMaxAggregateInputType = {
    userid?: true
    productid?: true
    rating?: true
    review?: true
  }

  export type UserreviewCountAggregateInputType = {
    userid?: true
    productid?: true
    rating?: true
    review?: true
    _all?: true
  }

  export type UserreviewAggregateArgs = {
    /**
     * Filter which userreview to aggregate.
     */
    where?: userreviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userreviews to fetch.
     */
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userreviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userreviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userreviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userreviews
    **/
    _count?: true | UserreviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserreviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserreviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserreviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserreviewMaxAggregateInputType
  }

  export type GetUserreviewAggregateType<T extends UserreviewAggregateArgs> = {
        [P in keyof T & keyof AggregateUserreview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserreview[P]>
      : GetScalarType<T[P], AggregateUserreview[P]>
  }




  export type UserreviewGroupByArgs = {
    where?: userreviewWhereInput
    orderBy?: Enumerable<userreviewOrderByWithAggregationInput>
    by: UserreviewScalarFieldEnum[]
    having?: userreviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserreviewCountAggregateInputType | true
    _avg?: UserreviewAvgAggregateInputType
    _sum?: UserreviewSumAggregateInputType
    _min?: UserreviewMinAggregateInputType
    _max?: UserreviewMaxAggregateInputType
  }


  export type UserreviewGroupByOutputType = {
    userid: string
    productid: string
    rating: Decimal | null
    review: string | null
    _count: UserreviewCountAggregateOutputType | null
    _avg: UserreviewAvgAggregateOutputType | null
    _sum: UserreviewSumAggregateOutputType | null
    _min: UserreviewMinAggregateOutputType | null
    _max: UserreviewMaxAggregateOutputType | null
  }

  type GetUserreviewGroupByPayload<T extends UserreviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserreviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserreviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserreviewGroupByOutputType[P]>
            : GetScalarType<T[P], UserreviewGroupByOutputType[P]>
        }
      >
    >


  export type userreviewSelect = {
    userid?: boolean
    productid?: boolean
    rating?: boolean
    review?: boolean
    product?: boolean | productArgs
    users?: boolean | usersArgs
  }


  export type userreviewInclude = {
    product?: boolean | productArgs
    users?: boolean | usersArgs
  }

  export type userreviewGetPayload<S extends boolean | null | undefined | userreviewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? userreview :
    S extends undefined ? never :
    S extends { include: any } & (userreviewArgs | userreviewFindManyArgs)
    ? userreview  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'product' ? productGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (userreviewArgs | userreviewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'product' ? productGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof userreview ? userreview[P] : never
  } 
      : userreview


  type userreviewCountArgs = 
    Omit<userreviewFindManyArgs, 'select' | 'include'> & {
      select?: UserreviewCountAggregateInputType | true
    }

  export interface userreviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Userreview that matches the filter.
     * @param {userreviewFindUniqueArgs} args - Arguments to find a Userreview
     * @example
     * // Get one Userreview
     * const userreview = await prisma.userreview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userreviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userreviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userreview'> extends True ? Prisma__userreviewClient<userreviewGetPayload<T>> : Prisma__userreviewClient<userreviewGetPayload<T> | null, null>

    /**
     * Find one Userreview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userreviewFindUniqueOrThrowArgs} args - Arguments to find a Userreview
     * @example
     * // Get one Userreview
     * const userreview = await prisma.userreview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userreviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userreviewFindUniqueOrThrowArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Find the first Userreview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userreviewFindFirstArgs} args - Arguments to find a Userreview
     * @example
     * // Get one Userreview
     * const userreview = await prisma.userreview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userreviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userreviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userreview'> extends True ? Prisma__userreviewClient<userreviewGetPayload<T>> : Prisma__userreviewClient<userreviewGetPayload<T> | null, null>

    /**
     * Find the first Userreview that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userreviewFindFirstOrThrowArgs} args - Arguments to find a Userreview
     * @example
     * // Get one Userreview
     * const userreview = await prisma.userreview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userreviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userreviewFindFirstOrThrowArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Find zero or more Userreviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userreviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Userreviews
     * const userreviews = await prisma.userreview.findMany()
     * 
     * // Get first 10 Userreviews
     * const userreviews = await prisma.userreview.findMany({ take: 10 })
     * 
     * // Only select the `userid`
     * const userreviewWithUseridOnly = await prisma.userreview.findMany({ select: { userid: true } })
     * 
    **/
    findMany<T extends userreviewFindManyArgs>(
      args?: SelectSubset<T, userreviewFindManyArgs>
    ): Prisma.PrismaPromise<Array<userreviewGetPayload<T>>>

    /**
     * Create a Userreview.
     * @param {userreviewCreateArgs} args - Arguments to create a Userreview.
     * @example
     * // Create one Userreview
     * const Userreview = await prisma.userreview.create({
     *   data: {
     *     // ... data to create a Userreview
     *   }
     * })
     * 
    **/
    create<T extends userreviewCreateArgs>(
      args: SelectSubset<T, userreviewCreateArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Create many Userreviews.
     *     @param {userreviewCreateManyArgs} args - Arguments to create many Userreviews.
     *     @example
     *     // Create many Userreviews
     *     const userreview = await prisma.userreview.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userreviewCreateManyArgs>(
      args?: SelectSubset<T, userreviewCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Userreview.
     * @param {userreviewDeleteArgs} args - Arguments to delete one Userreview.
     * @example
     * // Delete one Userreview
     * const Userreview = await prisma.userreview.delete({
     *   where: {
     *     // ... filter to delete one Userreview
     *   }
     * })
     * 
    **/
    delete<T extends userreviewDeleteArgs>(
      args: SelectSubset<T, userreviewDeleteArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Update one Userreview.
     * @param {userreviewUpdateArgs} args - Arguments to update one Userreview.
     * @example
     * // Update one Userreview
     * const userreview = await prisma.userreview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userreviewUpdateArgs>(
      args: SelectSubset<T, userreviewUpdateArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Delete zero or more Userreviews.
     * @param {userreviewDeleteManyArgs} args - Arguments to filter Userreviews to delete.
     * @example
     * // Delete a few Userreviews
     * const { count } = await prisma.userreview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userreviewDeleteManyArgs>(
      args?: SelectSubset<T, userreviewDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Userreviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userreviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Userreviews
     * const userreview = await prisma.userreview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userreviewUpdateManyArgs>(
      args: SelectSubset<T, userreviewUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Userreview.
     * @param {userreviewUpsertArgs} args - Arguments to update or create a Userreview.
     * @example
     * // Update or create a Userreview
     * const userreview = await prisma.userreview.upsert({
     *   create: {
     *     // ... data to create a Userreview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Userreview we want to update
     *   }
     * })
    **/
    upsert<T extends userreviewUpsertArgs>(
      args: SelectSubset<T, userreviewUpsertArgs>
    ): Prisma__userreviewClient<userreviewGetPayload<T>>

    /**
     * Count the number of Userreviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userreviewCountArgs} args - Arguments to filter Userreviews to count.
     * @example
     * // Count the number of Userreviews
     * const count = await prisma.userreview.count({
     *   where: {
     *     // ... the filter for the Userreviews we want to count
     *   }
     * })
    **/
    count<T extends userreviewCountArgs>(
      args?: Subset<T, userreviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserreviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Userreview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserreviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserreviewAggregateArgs>(args: Subset<T, UserreviewAggregateArgs>): Prisma.PrismaPromise<GetUserreviewAggregateType<T>>

    /**
     * Group by Userreview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserreviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserreviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserreviewGroupByArgs['orderBy'] }
        : { orderBy?: UserreviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserreviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserreviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for userreview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userreviewClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    product<T extends productArgs= {}>(args?: Subset<T, productArgs>): Prisma__productClient<productGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * userreview base type for findUnique actions
   */
  export type userreviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter, which userreview to fetch.
     */
    where: userreviewWhereUniqueInput
  }

  /**
   * userreview findUnique
   */
  export interface userreviewFindUniqueArgs extends userreviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userreview findUniqueOrThrow
   */
  export type userreviewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter, which userreview to fetch.
     */
    where: userreviewWhereUniqueInput
  }


  /**
   * userreview base type for findFirst actions
   */
  export type userreviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter, which userreview to fetch.
     */
    where?: userreviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userreviews to fetch.
     */
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userreviews.
     */
    cursor?: userreviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userreviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userreviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userreviews.
     */
    distinct?: Enumerable<UserreviewScalarFieldEnum>
  }

  /**
   * userreview findFirst
   */
  export interface userreviewFindFirstArgs extends userreviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userreview findFirstOrThrow
   */
  export type userreviewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter, which userreview to fetch.
     */
    where?: userreviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userreviews to fetch.
     */
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userreviews.
     */
    cursor?: userreviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userreviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userreviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userreviews.
     */
    distinct?: Enumerable<UserreviewScalarFieldEnum>
  }


  /**
   * userreview findMany
   */
  export type userreviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter, which userreviews to fetch.
     */
    where?: userreviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userreviews to fetch.
     */
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userreviews.
     */
    cursor?: userreviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userreviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userreviews.
     */
    skip?: number
    distinct?: Enumerable<UserreviewScalarFieldEnum>
  }


  /**
   * userreview create
   */
  export type userreviewCreateArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * The data needed to create a userreview.
     */
    data: XOR<userreviewCreateInput, userreviewUncheckedCreateInput>
  }


  /**
   * userreview createMany
   */
  export type userreviewCreateManyArgs = {
    /**
     * The data used to create many userreviews.
     */
    data: Enumerable<userreviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * userreview update
   */
  export type userreviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * The data needed to update a userreview.
     */
    data: XOR<userreviewUpdateInput, userreviewUncheckedUpdateInput>
    /**
     * Choose, which userreview to update.
     */
    where: userreviewWhereUniqueInput
  }


  /**
   * userreview updateMany
   */
  export type userreviewUpdateManyArgs = {
    /**
     * The data used to update userreviews.
     */
    data: XOR<userreviewUpdateManyMutationInput, userreviewUncheckedUpdateManyInput>
    /**
     * Filter which userreviews to update
     */
    where?: userreviewWhereInput
  }


  /**
   * userreview upsert
   */
  export type userreviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * The filter to search for the userreview to update in case it exists.
     */
    where: userreviewWhereUniqueInput
    /**
     * In case the userreview found by the `where` argument doesn't exist, create a new userreview with this data.
     */
    create: XOR<userreviewCreateInput, userreviewUncheckedCreateInput>
    /**
     * In case the userreview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userreviewUpdateInput, userreviewUncheckedUpdateInput>
  }


  /**
   * userreview delete
   */
  export type userreviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    /**
     * Filter which userreview to delete.
     */
    where: userreviewWhereUniqueInput
  }


  /**
   * userreview deleteMany
   */
  export type userreviewDeleteManyArgs = {
    /**
     * Filter which userreviews to delete
     */
    where?: userreviewWhereInput
  }


  /**
   * userreview without action
   */
  export type userreviewArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    saldo: Decimal | null
  }

  export type UsersSumAggregateOutputType = {
    saldo: Decimal | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    shopowner: boolean | null
    saldo: Decimal | null
    imagepath: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    shopowner: boolean | null
    saldo: Decimal | null
    imagepath: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    username: number
    email: number
    password: number
    shopowner: number
    saldo: number
    imagepath: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    saldo?: true
  }

  export type UsersSumAggregateInputType = {
    saldo?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    shopowner?: true
    saldo?: true
    imagepath?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    shopowner?: true
    saldo?: true
    imagepath?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    shopowner?: true
    saldo?: true
    imagepath?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    shopowner: boolean | null
    saldo: Decimal | null
    imagepath: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    shopowner?: boolean
    saldo?: boolean
    imagepath?: boolean
    cart?: boolean | users$cartArgs
    orders?: boolean | users$ordersArgs
    shop?: boolean | users$shopArgs
    userreview?: boolean | users$userreviewArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    cart?: boolean | users$cartArgs
    orders?: boolean | users$ordersArgs
    shop?: boolean | users$shopArgs
    userreview?: boolean | users$userreviewArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cart' ? Array < cartGetPayload<S['include'][P]>>  :
        P extends 'orders' ? Array < ordersGetPayload<S['include'][P]>>  :
        P extends 'shop' ? Array < shopGetPayload<S['include'][P]>>  :
        P extends 'userreview' ? Array < userreviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cart' ? Array < cartGetPayload<S['select'][P]>>  :
        P extends 'orders' ? Array < ordersGetPayload<S['select'][P]>>  :
        P extends 'shop' ? Array < shopGetPayload<S['select'][P]>>  :
        P extends 'userreview' ? Array < userreviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): Prisma.PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cart<T extends users$cartArgs= {}>(args?: Subset<T, users$cartArgs>): Prisma.PrismaPromise<Array<cartGetPayload<T>>| Null>;

    orders<T extends users$ordersArgs= {}>(args?: Subset<T, users$ordersArgs>): Prisma.PrismaPromise<Array<ordersGetPayload<T>>| Null>;

    shop<T extends users$shopArgs= {}>(args?: Subset<T, users$shopArgs>): Prisma.PrismaPromise<Array<shopGetPayload<T>>| Null>;

    userreview<T extends users$userreviewArgs= {}>(args?: Subset<T, users$userreviewArgs>): Prisma.PrismaPromise<Array<userreviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     */
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.cart
   */
  export type users$cartArgs = {
    /**
     * Select specific fields to fetch from the cart
     */
    select?: cartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: cartInclude | null
    where?: cartWhereInput
    orderBy?: Enumerable<cartOrderByWithRelationInput>
    cursor?: cartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CartScalarFieldEnum>
  }


  /**
   * users.orders
   */
  export type users$ordersArgs = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ordersInclude | null
    where?: ordersWhereInput
    orderBy?: Enumerable<ordersOrderByWithRelationInput>
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrdersScalarFieldEnum>
  }


  /**
   * users.shop
   */
  export type users$shopArgs = {
    /**
     * Select specific fields to fetch from the shop
     */
    select?: shopSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: shopInclude | null
    where?: shopWhereInput
    orderBy?: Enumerable<shopOrderByWithRelationInput>
    cursor?: shopWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * users.userreview
   */
  export type users$userreviewArgs = {
    /**
     * Select specific fields to fetch from the userreview
     */
    select?: userreviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userreviewInclude | null
    where?: userreviewWhereInput
    orderBy?: Enumerable<userreviewOrderByWithRelationInput>
    cursor?: userreviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserreviewScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  export const CartScalarFieldEnum: {
    userid: 'userid',
    productid: 'productid',
    quantity: 'quantity'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imagepath: 'imagepath'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CategoryprodScalarFieldEnum: {
    categoryid: 'categoryid',
    productid: 'productid'
  };

  export type CategoryprodScalarFieldEnum = (typeof CategoryprodScalarFieldEnum)[keyof typeof CategoryprodScalarFieldEnum]


  export const DeliveryserviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fee: 'fee'
  };

  export type DeliveryserviceScalarFieldEnum = (typeof DeliveryserviceScalarFieldEnum)[keyof typeof DeliveryserviceScalarFieldEnum]


  export const DiscountScalarFieldEnum: {
    id: 'id',
    discname: 'discname',
    type: 'type',
    discvalue: 'discvalue',
    minpurchase: 'minpurchase',
    maxdisc: 'maxdisc'
  };

  export type DiscountScalarFieldEnum = (typeof DiscountScalarFieldEnum)[keyof typeof DiscountScalarFieldEnum]


  export const DiscountitemsScalarFieldEnum: {
    discid: 'discid',
    productid: 'productid'
  };

  export type DiscountitemsScalarFieldEnum = (typeof DiscountitemsScalarFieldEnum)[keyof typeof DiscountitemsScalarFieldEnum]


  export const OrderdetailsScalarFieldEnum: {
    orderid: 'orderid',
    productid: 'productid',
    quantity: 'quantity',
    deliveryid: 'deliveryid'
  };

  export type OrderdetailsScalarFieldEnum = (typeof OrderdetailsScalarFieldEnum)[keyof typeof OrderdetailsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    paydetid: 'paydetid',
    payserviceid: 'payserviceid'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const PaymentdetailsScalarFieldEnum: {
    id: 'id',
    total: 'total',
    status: 'status'
  };

  export type PaymentdetailsScalarFieldEnum = (typeof PaymentdetailsScalarFieldEnum)[keyof typeof PaymentdetailsScalarFieldEnum]


  export const PaymentserviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    fee: 'fee'
  };

  export type PaymentserviceScalarFieldEnum = (typeof PaymentserviceScalarFieldEnum)[keyof typeof PaymentserviceScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    shopid: 'shopid',
    productname: 'productname',
    description: 'description',
    price: 'price',
    stock: 'stock'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductimgScalarFieldEnum: {
    productid: 'productid',
    imagepath: 'imagepath',
    type: 'type'
  };

  export type ProductimgScalarFieldEnum = (typeof ProductimgScalarFieldEnum)[keyof typeof ProductimgScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    ownerid: 'ownerid',
    shopname: 'shopname',
    shoptype: 'shoptype',
    address: 'address',
    imagepath: 'imagepath'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SubcategoryScalarFieldEnum: {
    maincatid: 'maincatid',
    subcatid: 'subcatid'
  };

  export type SubcategoryScalarFieldEnum = (typeof SubcategoryScalarFieldEnum)[keyof typeof SubcategoryScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserreviewScalarFieldEnum: {
    userid: 'userid',
    productid: 'productid',
    rating: 'rating',
    review: 'review'
  };

  export type UserreviewScalarFieldEnum = (typeof UserreviewScalarFieldEnum)[keyof typeof UserreviewScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password',
    shopowner: 'shopowner',
    saldo: 'saldo',
    imagepath: 'imagepath'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type cartWhereInput = {
    AND?: Enumerable<cartWhereInput>
    OR?: Enumerable<cartWhereInput>
    NOT?: Enumerable<cartWhereInput>
    userid?: StringFilter | string
    productid?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    product?: XOR<ProductRelationFilter, productWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type cartOrderByWithRelationInput = {
    userid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    product?: productOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type cartWhereUniqueInput = {
    userid_productid?: cartUseridProductidCompoundUniqueInput
  }

  export type cartOrderByWithAggregationInput = {
    userid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    _count?: cartCountOrderByAggregateInput
    _avg?: cartAvgOrderByAggregateInput
    _max?: cartMaxOrderByAggregateInput
    _min?: cartMinOrderByAggregateInput
    _sum?: cartSumOrderByAggregateInput
  }

  export type cartScalarWhereWithAggregatesInput = {
    AND?: Enumerable<cartScalarWhereWithAggregatesInput>
    OR?: Enumerable<cartScalarWhereWithAggregatesInput>
    NOT?: Enumerable<cartScalarWhereWithAggregatesInput>
    userid?: StringWithAggregatesFilter | string
    productid?: StringWithAggregatesFilter | string
    quantity?: IntNullableWithAggregatesFilter | number | null
  }

  export type categoryWhereInput = {
    AND?: Enumerable<categoryWhereInput>
    OR?: Enumerable<categoryWhereInput>
    NOT?: Enumerable<categoryWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    imagepath?: StringNullableFilter | string | null
    categoryprod?: CategoryprodListRelationFilter
    subcategory_subcategory_maincatidTocategory?: SubcategoryListRelationFilter
    subcategory_subcategory_subcatidTocategory?: SubcategoryListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imagepath?: SortOrder
    categoryprod?: categoryprodOrderByRelationAggregateInput
    subcategory_subcategory_maincatidTocategory?: subcategoryOrderByRelationAggregateInput
    subcategory_subcategory_subcatidTocategory?: subcategoryOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = {
    id?: number
  }

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imagepath?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    imagepath?: StringNullableWithAggregatesFilter | string | null
  }

  export type categoryprodWhereInput = {
    AND?: Enumerable<categoryprodWhereInput>
    OR?: Enumerable<categoryprodWhereInput>
    NOT?: Enumerable<categoryprodWhereInput>
    categoryid?: IntFilter | number
    productid?: StringFilter | string
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type categoryprodOrderByWithRelationInput = {
    categoryid?: SortOrder
    productid?: SortOrder
    category?: categoryOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type categoryprodWhereUniqueInput = {
    categoryid_productid?: categoryprodCategoryidProductidCompoundUniqueInput
  }

  export type categoryprodOrderByWithAggregationInput = {
    categoryid?: SortOrder
    productid?: SortOrder
    _count?: categoryprodCountOrderByAggregateInput
    _avg?: categoryprodAvgOrderByAggregateInput
    _max?: categoryprodMaxOrderByAggregateInput
    _min?: categoryprodMinOrderByAggregateInput
    _sum?: categoryprodSumOrderByAggregateInput
  }

  export type categoryprodScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoryprodScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoryprodScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoryprodScalarWhereWithAggregatesInput>
    categoryid?: IntWithAggregatesFilter | number
    productid?: StringWithAggregatesFilter | string
  }

  export type deliveryserviceWhereInput = {
    AND?: Enumerable<deliveryserviceWhereInput>
    OR?: Enumerable<deliveryserviceWhereInput>
    NOT?: Enumerable<deliveryserviceWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    fee?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    orderdetails?: OrderdetailsListRelationFilter
  }

  export type deliveryserviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
    orderdetails?: orderdetailsOrderByRelationAggregateInput
  }

  export type deliveryserviceWhereUniqueInput = {
    id?: string
  }

  export type deliveryserviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
    _count?: deliveryserviceCountOrderByAggregateInput
    _avg?: deliveryserviceAvgOrderByAggregateInput
    _max?: deliveryserviceMaxOrderByAggregateInput
    _min?: deliveryserviceMinOrderByAggregateInput
    _sum?: deliveryserviceSumOrderByAggregateInput
  }

  export type deliveryserviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<deliveryserviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<deliveryserviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<deliveryserviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    fee?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type discountWhereInput = {
    AND?: Enumerable<discountWhereInput>
    OR?: Enumerable<discountWhereInput>
    NOT?: Enumerable<discountWhereInput>
    id?: StringFilter | string
    discname?: StringNullableFilter | string | null
    type?: IntNullableFilter | number | null
    discvalue?: IntNullableFilter | number | null
    minpurchase?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    maxdisc?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    discountitems?: DiscountitemsListRelationFilter
  }

  export type discountOrderByWithRelationInput = {
    id?: SortOrder
    discname?: SortOrder
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
    discountitems?: discountitemsOrderByRelationAggregateInput
  }

  export type discountWhereUniqueInput = {
    id?: string
  }

  export type discountOrderByWithAggregationInput = {
    id?: SortOrder
    discname?: SortOrder
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
    _count?: discountCountOrderByAggregateInput
    _avg?: discountAvgOrderByAggregateInput
    _max?: discountMaxOrderByAggregateInput
    _min?: discountMinOrderByAggregateInput
    _sum?: discountSumOrderByAggregateInput
  }

  export type discountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<discountScalarWhereWithAggregatesInput>
    OR?: Enumerable<discountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<discountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    discname?: StringNullableWithAggregatesFilter | string | null
    type?: IntNullableWithAggregatesFilter | number | null
    discvalue?: IntNullableWithAggregatesFilter | number | null
    minpurchase?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    maxdisc?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type discountitemsWhereInput = {
    AND?: Enumerable<discountitemsWhereInput>
    OR?: Enumerable<discountitemsWhereInput>
    NOT?: Enumerable<discountitemsWhereInput>
    discid?: StringFilter | string
    productid?: StringFilter | string
    discount?: XOR<DiscountRelationFilter, discountWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type discountitemsOrderByWithRelationInput = {
    discid?: SortOrder
    productid?: SortOrder
    discount?: discountOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type discountitemsWhereUniqueInput = {
    discid_productid?: discountitemsDiscidProductidCompoundUniqueInput
  }

  export type discountitemsOrderByWithAggregationInput = {
    discid?: SortOrder
    productid?: SortOrder
    _count?: discountitemsCountOrderByAggregateInput
    _max?: discountitemsMaxOrderByAggregateInput
    _min?: discountitemsMinOrderByAggregateInput
  }

  export type discountitemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<discountitemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<discountitemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<discountitemsScalarWhereWithAggregatesInput>
    discid?: StringWithAggregatesFilter | string
    productid?: StringWithAggregatesFilter | string
  }

  export type orderdetailsWhereInput = {
    AND?: Enumerable<orderdetailsWhereInput>
    OR?: Enumerable<orderdetailsWhereInput>
    NOT?: Enumerable<orderdetailsWhereInput>
    orderid?: StringFilter | string
    productid?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    deliveryid?: StringFilter | string
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    product?: XOR<ProductRelationFilter, productWhereInput>
    deliveryservice?: XOR<DeliveryserviceRelationFilter, deliveryserviceWhereInput>
  }

  export type orderdetailsOrderByWithRelationInput = {
    orderid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    deliveryid?: SortOrder
    orders?: ordersOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    deliveryservice?: deliveryserviceOrderByWithRelationInput
  }

  export type orderdetailsWhereUniqueInput = {
    orderid_productid_deliveryid?: orderdetailsOrderidProductidDeliveryidCompoundUniqueInput
  }

  export type orderdetailsOrderByWithAggregationInput = {
    orderid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    deliveryid?: SortOrder
    _count?: orderdetailsCountOrderByAggregateInput
    _avg?: orderdetailsAvgOrderByAggregateInput
    _max?: orderdetailsMaxOrderByAggregateInput
    _min?: orderdetailsMinOrderByAggregateInput
    _sum?: orderdetailsSumOrderByAggregateInput
  }

  export type orderdetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<orderdetailsScalarWhereWithAggregatesInput>
    orderid?: StringWithAggregatesFilter | string
    productid?: StringWithAggregatesFilter | string
    quantity?: IntNullableWithAggregatesFilter | number | null
    deliveryid?: StringWithAggregatesFilter | string
  }

  export type ordersWhereInput = {
    AND?: Enumerable<ordersWhereInput>
    OR?: Enumerable<ordersWhereInput>
    NOT?: Enumerable<ordersWhereInput>
    id?: StringFilter | string
    userid?: StringFilter | string
    paydetid?: StringFilter | string
    payserviceid?: StringFilter | string
    orderdetails?: OrderdetailsListRelationFilter
    paymentdetails?: XOR<PaymentdetailsRelationFilter, paymentdetailsWhereInput>
    paymentservice?: XOR<PaymentserviceRelationFilter, paymentserviceWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    paydetid?: SortOrder
    payserviceid?: SortOrder
    orderdetails?: orderdetailsOrderByRelationAggregateInput
    paymentdetails?: paymentdetailsOrderByWithRelationInput
    paymentservice?: paymentserviceOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = {
    id?: string
    id_userid_paydetid_payserviceid?: ordersIdUseridPaydetidPayserviceidCompoundUniqueInput
  }

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    paydetid?: SortOrder
    payserviceid?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ordersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ordersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ordersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userid?: StringWithAggregatesFilter | string
    paydetid?: StringWithAggregatesFilter | string
    payserviceid?: StringWithAggregatesFilter | string
  }

  export type paymentdetailsWhereInput = {
    AND?: Enumerable<paymentdetailsWhereInput>
    OR?: Enumerable<paymentdetailsWhereInput>
    NOT?: Enumerable<paymentdetailsWhereInput>
    id?: StringFilter | string
    total?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    status?: Enumpaymentdetails_statusNullableFilter | paymentdetails_status | null
    orders?: OrdersListRelationFilter
  }

  export type paymentdetailsOrderByWithRelationInput = {
    id?: SortOrder
    total?: SortOrder
    status?: SortOrder
    orders?: ordersOrderByRelationAggregateInput
  }

  export type paymentdetailsWhereUniqueInput = {
    id?: string
  }

  export type paymentdetailsOrderByWithAggregationInput = {
    id?: SortOrder
    total?: SortOrder
    status?: SortOrder
    _count?: paymentdetailsCountOrderByAggregateInput
    _avg?: paymentdetailsAvgOrderByAggregateInput
    _max?: paymentdetailsMaxOrderByAggregateInput
    _min?: paymentdetailsMinOrderByAggregateInput
    _sum?: paymentdetailsSumOrderByAggregateInput
  }

  export type paymentdetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<paymentdetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<paymentdetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<paymentdetailsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    total?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    status?: Enumpaymentdetails_statusNullableWithAggregatesFilter | paymentdetails_status | null
  }

  export type paymentserviceWhereInput = {
    AND?: Enumerable<paymentserviceWhereInput>
    OR?: Enumerable<paymentserviceWhereInput>
    NOT?: Enumerable<paymentserviceWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    fee?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    orders?: OrdersListRelationFilter
  }

  export type paymentserviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
    orders?: ordersOrderByRelationAggregateInput
  }

  export type paymentserviceWhereUniqueInput = {
    id?: string
  }

  export type paymentserviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
    _count?: paymentserviceCountOrderByAggregateInput
    _avg?: paymentserviceAvgOrderByAggregateInput
    _max?: paymentserviceMaxOrderByAggregateInput
    _min?: paymentserviceMinOrderByAggregateInput
    _sum?: paymentserviceSumOrderByAggregateInput
  }

  export type paymentserviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<paymentserviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<paymentserviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<paymentserviceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    fee?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type productWhereInput = {
    AND?: Enumerable<productWhereInput>
    OR?: Enumerable<productWhereInput>
    NOT?: Enumerable<productWhereInput>
    id?: StringFilter | string
    shopid?: StringFilter | string
    productname?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    stock?: IntNullableFilter | number | null
    cart?: CartListRelationFilter
    categoryprod?: CategoryprodListRelationFilter
    discountitems?: DiscountitemsListRelationFilter
    orderdetails?: OrderdetailsListRelationFilter
    shop?: XOR<ShopRelationFilter, shopWhereInput>
    productimg?: ProductimgListRelationFilter
    userreview?: UserreviewListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    shopid?: SortOrder
    productname?: SortOrder
    description?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    cart?: cartOrderByRelationAggregateInput
    categoryprod?: categoryprodOrderByRelationAggregateInput
    discountitems?: discountitemsOrderByRelationAggregateInput
    orderdetails?: orderdetailsOrderByRelationAggregateInput
    shop?: shopOrderByWithRelationInput
    productimg?: productimgOrderByRelationAggregateInput
    userreview?: userreviewOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = {
    id?: string
    id_shopid?: productIdShopidCompoundUniqueInput
  }

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    shopid?: SortOrder
    productname?: SortOrder
    description?: SortOrder
    price?: SortOrder
    stock?: SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productScalarWhereWithAggregatesInput>
    OR?: Enumerable<productScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    shopid?: StringWithAggregatesFilter | string
    productname?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    price?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    stock?: IntNullableWithAggregatesFilter | number | null
  }

  export type productimgWhereInput = {
    AND?: Enumerable<productimgWhereInput>
    OR?: Enumerable<productimgWhereInput>
    NOT?: Enumerable<productimgWhereInput>
    productid?: StringFilter | string
    imagepath?: StringFilter | string
    type?: StringNullableFilter | string | null
    product?: XOR<ProductRelationFilter, productWhereInput>
  }

  export type productimgOrderByWithRelationInput = {
    productid?: SortOrder
    imagepath?: SortOrder
    type?: SortOrder
    product?: productOrderByWithRelationInput
  }

  export type productimgWhereUniqueInput = {
    productid_imagepath?: productimgProductidImagepathCompoundUniqueInput
  }

  export type productimgOrderByWithAggregationInput = {
    productid?: SortOrder
    imagepath?: SortOrder
    type?: SortOrder
    _count?: productimgCountOrderByAggregateInput
    _max?: productimgMaxOrderByAggregateInput
    _min?: productimgMinOrderByAggregateInput
  }

  export type productimgScalarWhereWithAggregatesInput = {
    AND?: Enumerable<productimgScalarWhereWithAggregatesInput>
    OR?: Enumerable<productimgScalarWhereWithAggregatesInput>
    NOT?: Enumerable<productimgScalarWhereWithAggregatesInput>
    productid?: StringWithAggregatesFilter | string
    imagepath?: StringWithAggregatesFilter | string
    type?: StringNullableWithAggregatesFilter | string | null
  }

  export type shopWhereInput = {
    AND?: Enumerable<shopWhereInput>
    OR?: Enumerable<shopWhereInput>
    NOT?: Enumerable<shopWhereInput>
    id?: StringFilter | string
    ownerid?: StringFilter | string
    shopname?: StringNullableFilter | string | null
    shoptype?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    imagepath?: StringNullableFilter | string | null
    product?: ProductListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type shopOrderByWithRelationInput = {
    id?: SortOrder
    ownerid?: SortOrder
    shopname?: SortOrder
    shoptype?: SortOrder
    address?: SortOrder
    imagepath?: SortOrder
    product?: productOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
  }

  export type shopWhereUniqueInput = {
    id?: string
    id_ownerid?: shopIdOwneridCompoundUniqueInput
  }

  export type shopOrderByWithAggregationInput = {
    id?: SortOrder
    ownerid?: SortOrder
    shopname?: SortOrder
    shoptype?: SortOrder
    address?: SortOrder
    imagepath?: SortOrder
    _count?: shopCountOrderByAggregateInput
    _max?: shopMaxOrderByAggregateInput
    _min?: shopMinOrderByAggregateInput
  }

  export type shopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<shopScalarWhereWithAggregatesInput>
    OR?: Enumerable<shopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<shopScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ownerid?: StringWithAggregatesFilter | string
    shopname?: StringNullableWithAggregatesFilter | string | null
    shoptype?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    imagepath?: StringNullableWithAggregatesFilter | string | null
  }

  export type subcategoryWhereInput = {
    AND?: Enumerable<subcategoryWhereInput>
    OR?: Enumerable<subcategoryWhereInput>
    NOT?: Enumerable<subcategoryWhereInput>
    maincatid?: IntFilter | number
    subcatid?: IntFilter | number
    category_subcategory_maincatidTocategory?: XOR<CategoryRelationFilter, categoryWhereInput>
    category_subcategory_subcatidTocategory?: XOR<CategoryRelationFilter, categoryWhereInput>
  }

  export type subcategoryOrderByWithRelationInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
    category_subcategory_maincatidTocategory?: categoryOrderByWithRelationInput
    category_subcategory_subcatidTocategory?: categoryOrderByWithRelationInput
  }

  export type subcategoryWhereUniqueInput = {
    maincatid_subcatid?: subcategoryMaincatidSubcatidCompoundUniqueInput
  }

  export type subcategoryOrderByWithAggregationInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
    _count?: subcategoryCountOrderByAggregateInput
    _avg?: subcategoryAvgOrderByAggregateInput
    _max?: subcategoryMaxOrderByAggregateInput
    _min?: subcategoryMinOrderByAggregateInput
    _sum?: subcategorySumOrderByAggregateInput
  }

  export type subcategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<subcategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<subcategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<subcategoryScalarWhereWithAggregatesInput>
    maincatid?: IntWithAggregatesFilter | number
    subcatid?: IntWithAggregatesFilter | number
  }

  export type userreviewWhereInput = {
    AND?: Enumerable<userreviewWhereInput>
    OR?: Enumerable<userreviewWhereInput>
    NOT?: Enumerable<userreviewWhereInput>
    userid?: StringFilter | string
    productid?: StringFilter | string
    rating?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    review?: StringNullableFilter | string | null
    product?: XOR<ProductRelationFilter, productWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type userreviewOrderByWithRelationInput = {
    userid?: SortOrder
    productid?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    product?: productOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type userreviewWhereUniqueInput = {
    userid_productid?: userreviewUseridProductidCompoundUniqueInput
  }

  export type userreviewOrderByWithAggregationInput = {
    userid?: SortOrder
    productid?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    _count?: userreviewCountOrderByAggregateInput
    _avg?: userreviewAvgOrderByAggregateInput
    _max?: userreviewMaxOrderByAggregateInput
    _min?: userreviewMinOrderByAggregateInput
    _sum?: userreviewSumOrderByAggregateInput
  }

  export type userreviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userreviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<userreviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userreviewScalarWhereWithAggregatesInput>
    userid?: StringWithAggregatesFilter | string
    productid?: StringWithAggregatesFilter | string
    rating?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    review?: StringNullableWithAggregatesFilter | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    shopowner?: BoolNullableFilter | boolean | null
    saldo?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    imagepath?: StringNullableFilter | string | null
    cart?: CartListRelationFilter
    orders?: OrdersListRelationFilter
    shop?: ShopListRelationFilter
    userreview?: UserreviewListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    shopowner?: SortOrder
    saldo?: SortOrder
    imagepath?: SortOrder
    cart?: cartOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
    shop?: shopOrderByRelationAggregateInput
    userreview?: userreviewOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    shopowner?: SortOrder
    saldo?: SortOrder
    imagepath?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    shopowner?: BoolNullableWithAggregatesFilter | boolean | null
    saldo?: DecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    imagepath?: StringNullableWithAggregatesFilter | string | null
  }

  export type cartCreateInput = {
    quantity?: number | null
    product: productCreateNestedOneWithoutCartInput
    users: usersCreateNestedOneWithoutCartInput
  }

  export type cartUncheckedCreateInput = {
    userid: string
    productid: string
    quantity?: number | null
  }

  export type cartUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product?: productUpdateOneRequiredWithoutCartNestedInput
    users?: usersUpdateOneRequiredWithoutCartNestedInput
  }

  export type cartUncheckedUpdateInput = {
    userid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartCreateManyInput = {
    userid: string
    productid: string
    quantity?: number | null
  }

  export type cartUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartUncheckedUpdateManyInput = {
    userid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoryCreateInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_maincatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUncheckedUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id: number
    name?: string | null
    imagepath?: string | null
  }

  export type categoryUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type categoryprodCreateInput = {
    category: categoryCreateNestedOneWithoutCategoryprodInput
    product: productCreateNestedOneWithoutCategoryprodInput
  }

  export type categoryprodUncheckedCreateInput = {
    categoryid: number
    productid: string
  }

  export type categoryprodUpdateInput = {
    category?: categoryUpdateOneRequiredWithoutCategoryprodNestedInput
    product?: productUpdateOneRequiredWithoutCategoryprodNestedInput
  }

  export type categoryprodUncheckedUpdateInput = {
    categoryid?: IntFieldUpdateOperationsInput | number
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type categoryprodCreateManyInput = {
    categoryid: number
    productid: string
  }

  export type categoryprodUpdateManyMutationInput = {

  }

  export type categoryprodUncheckedUpdateManyInput = {
    categoryid?: IntFieldUpdateOperationsInput | number
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type deliveryserviceCreateInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailsCreateNestedManyWithoutDeliveryserviceInput
  }

  export type deliveryserviceUncheckedCreateInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutDeliveryserviceInput
  }

  export type deliveryserviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailsUpdateManyWithoutDeliveryserviceNestedInput
  }

  export type deliveryserviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutDeliveryserviceNestedInput
  }

  export type deliveryserviceCreateManyInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type deliveryserviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type deliveryserviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type discountCreateInput = {
    id: string
    discname?: string | null
    type?: number | null
    discvalue?: number | null
    minpurchase?: Decimal | DecimalJsLike | number | string | null
    maxdisc?: Decimal | DecimalJsLike | number | string | null
    discountitems?: discountitemsCreateNestedManyWithoutDiscountInput
  }

  export type discountUncheckedCreateInput = {
    id: string
    discname?: string | null
    type?: number | null
    discvalue?: number | null
    minpurchase?: Decimal | DecimalJsLike | number | string | null
    maxdisc?: Decimal | DecimalJsLike | number | string | null
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutDiscountInput
  }

  export type discountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discountitems?: discountitemsUpdateManyWithoutDiscountNestedInput
  }

  export type discountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    discountitems?: discountitemsUncheckedUpdateManyWithoutDiscountNestedInput
  }

  export type discountCreateManyInput = {
    id: string
    discname?: string | null
    type?: number | null
    discvalue?: number | null
    minpurchase?: Decimal | DecimalJsLike | number | string | null
    maxdisc?: Decimal | DecimalJsLike | number | string | null
  }

  export type discountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type discountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type discountitemsCreateInput = {
    discount: discountCreateNestedOneWithoutDiscountitemsInput
    product: productCreateNestedOneWithoutDiscountitemsInput
  }

  export type discountitemsUncheckedCreateInput = {
    discid: string
    productid: string
  }

  export type discountitemsUpdateInput = {
    discount?: discountUpdateOneRequiredWithoutDiscountitemsNestedInput
    product?: productUpdateOneRequiredWithoutDiscountitemsNestedInput
  }

  export type discountitemsUncheckedUpdateInput = {
    discid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type discountitemsCreateManyInput = {
    discid: string
    productid: string
  }

  export type discountitemsUpdateManyMutationInput = {

  }

  export type discountitemsUncheckedUpdateManyInput = {
    discid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsCreateInput = {
    quantity?: number | null
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
    product: productCreateNestedOneWithoutOrderdetailsInput
    deliveryservice: deliveryserviceCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateInput = {
    orderid: string
    productid: string
    quantity?: number | null
    deliveryid: string
  }

  export type orderdetailsUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
    product?: productUpdateOneRequiredWithoutOrderdetailsNestedInput
    deliveryservice?: deliveryserviceUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateInput = {
    orderid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryid?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsCreateManyInput = {
    orderid: string
    productid: string
    quantity?: number | null
    deliveryid: string
  }

  export type orderdetailsUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderdetailsUncheckedUpdateManyInput = {
    orderid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryid?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateInput = {
    id: string
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
    paymentdetails: paymentdetailsCreateNestedOneWithoutOrdersInput
    paymentservice: paymentserviceCreateNestedOneWithoutOrdersInput
    users: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    id: string
    userid: string
    paydetid: string
    payserviceid: string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
    paymentdetails?: paymentdetailsUpdateOneRequiredWithoutOrdersNestedInput
    paymentservice?: paymentserviceUpdateOneRequiredWithoutOrdersNestedInput
    users?: usersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    paydetid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    id: string
    userid: string
    paydetid: string
    payserviceid: string
  }

  export type ordersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    paydetid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
  }

  export type paymentdetailsCreateInput = {
    id: string
    total?: Decimal | DecimalJsLike | number | string | null
    status?: paymentdetails_status | null
    orders?: ordersCreateNestedManyWithoutPaymentdetailsInput
  }

  export type paymentdetailsUncheckedCreateInput = {
    id: string
    total?: Decimal | DecimalJsLike | number | string | null
    status?: paymentdetails_status | null
    orders?: ordersUncheckedCreateNestedManyWithoutPaymentdetailsInput
  }

  export type paymentdetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
    orders?: ordersUpdateManyWithoutPaymentdetailsNestedInput
  }

  export type paymentdetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
    orders?: ordersUncheckedUpdateManyWithoutPaymentdetailsNestedInput
  }

  export type paymentdetailsCreateManyInput = {
    id: string
    total?: Decimal | DecimalJsLike | number | string | null
    status?: paymentdetails_status | null
  }

  export type paymentdetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
  }

  export type paymentdetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
  }

  export type paymentserviceCreateInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersCreateNestedManyWithoutPaymentserviceInput
  }

  export type paymentserviceUncheckedCreateInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutPaymentserviceInput
  }

  export type paymentserviceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUpdateManyWithoutPaymentserviceNestedInput
  }

  export type paymentserviceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutPaymentserviceNestedInput
  }

  export type paymentserviceCreateManyInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type paymentserviceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type paymentserviceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type productCreateInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
  }

  export type productUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type productUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type productimgCreateInput = {
    imagepath: string
    type?: string | null
    product: productCreateNestedOneWithoutProductimgInput
  }

  export type productimgUncheckedCreateInput = {
    productid: string
    imagepath: string
    type?: string | null
  }

  export type productimgUpdateInput = {
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateOneRequiredWithoutProductimgNestedInput
  }

  export type productimgUncheckedUpdateInput = {
    productid?: StringFieldUpdateOperationsInput | string
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productimgCreateManyInput = {
    productid: string
    imagepath: string
    type?: string | null
  }

  export type productimgUpdateManyMutationInput = {
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productimgUncheckedUpdateManyInput = {
    productid?: StringFieldUpdateOperationsInput | string
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shopCreateInput = {
    id: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
    product?: productCreateNestedManyWithoutShopInput
    users: usersCreateNestedOneWithoutShopInput
  }

  export type shopUncheckedCreateInput = {
    id: string
    ownerid: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
    product?: productUncheckedCreateNestedManyWithoutShopInput
  }

  export type shopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateManyWithoutShopNestedInput
    users?: usersUpdateOneRequiredWithoutShopNestedInput
  }

  export type shopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerid?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUncheckedUpdateManyWithoutShopNestedInput
  }

  export type shopCreateManyInput = {
    id: string
    ownerid: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
  }

  export type shopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type shopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerid?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type subcategoryCreateInput = {
    category_subcategory_maincatidTocategory: categoryCreateNestedOneWithoutSubcategory_subcategory_maincatidTocategoryInput
    category_subcategory_subcatidTocategory: categoryCreateNestedOneWithoutSubcategory_subcategory_subcatidTocategoryInput
  }

  export type subcategoryUncheckedCreateInput = {
    maincatid: number
    subcatid: number
  }

  export type subcategoryUpdateInput = {
    category_subcategory_maincatidTocategory?: categoryUpdateOneRequiredWithoutSubcategory_subcategory_maincatidTocategoryNestedInput
    category_subcategory_subcatidTocategory?: categoryUpdateOneRequiredWithoutSubcategory_subcategory_subcatidTocategoryNestedInput
  }

  export type subcategoryUncheckedUpdateInput = {
    maincatid?: IntFieldUpdateOperationsInput | number
    subcatid?: IntFieldUpdateOperationsInput | number
  }

  export type subcategoryCreateManyInput = {
    maincatid: number
    subcatid: number
  }

  export type subcategoryUpdateManyMutationInput = {

  }

  export type subcategoryUncheckedUpdateManyInput = {
    maincatid?: IntFieldUpdateOperationsInput | number
    subcatid?: IntFieldUpdateOperationsInput | number
  }

  export type userreviewCreateInput = {
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
    product: productCreateNestedOneWithoutUserreviewInput
    users: usersCreateNestedOneWithoutUserreviewInput
  }

  export type userreviewUncheckedCreateInput = {
    userid: string
    productid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type userreviewUpdateInput = {
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateOneRequiredWithoutUserreviewNestedInput
    users?: usersUpdateOneRequiredWithoutUserreviewNestedInput
  }

  export type userreviewUncheckedUpdateInput = {
    userid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userreviewCreateManyInput = {
    userid: string
    productid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type userreviewUpdateManyMutationInput = {
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userreviewUncheckedUpdateManyInput = {
    userid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartCreateNestedManyWithoutUsersInput
    orders?: ordersCreateNestedManyWithoutUsersInput
    shop?: shopCreateNestedManyWithoutUsersInput
    userreview?: userreviewCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    shop?: shopUncheckedCreateNestedManyWithoutUsersInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUpdateManyWithoutUsersNestedInput
    orders?: ordersUpdateManyWithoutUsersNestedInput
    shop?: shopUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    shop?: shopUncheckedUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type ProductRelationFilter = {
    is?: productWhereInput
    isNot?: productWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type cartUseridProductidCompoundUniqueInput = {
    userid: string
    productid: string
  }

  export type cartCountOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
  }

  export type cartAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type cartMaxOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
  }

  export type cartMinOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
  }

  export type cartSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type CategoryprodListRelationFilter = {
    every?: categoryprodWhereInput
    some?: categoryprodWhereInput
    none?: categoryprodWhereInput
  }

  export type SubcategoryListRelationFilter = {
    every?: subcategoryWhereInput
    some?: subcategoryWhereInput
    none?: subcategoryWhereInput
  }

  export type categoryprodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subcategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imagepath?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imagepath?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imagepath?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type categoryprodCategoryidProductidCompoundUniqueInput = {
    categoryid: number
    productid: string
  }

  export type categoryprodCountOrderByAggregateInput = {
    categoryid?: SortOrder
    productid?: SortOrder
  }

  export type categoryprodAvgOrderByAggregateInput = {
    categoryid?: SortOrder
  }

  export type categoryprodMaxOrderByAggregateInput = {
    categoryid?: SortOrder
    productid?: SortOrder
  }

  export type categoryprodMinOrderByAggregateInput = {
    categoryid?: SortOrder
    productid?: SortOrder
  }

  export type categoryprodSumOrderByAggregateInput = {
    categoryid?: SortOrder
  }

  export type DecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type OrderdetailsListRelationFilter = {
    every?: orderdetailsWhereInput
    some?: orderdetailsWhereInput
    none?: orderdetailsWhereInput
  }

  export type orderdetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deliveryserviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type deliveryserviceAvgOrderByAggregateInput = {
    fee?: SortOrder
  }

  export type deliveryserviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type deliveryserviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type deliveryserviceSumOrderByAggregateInput = {
    fee?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type DiscountitemsListRelationFilter = {
    every?: discountitemsWhereInput
    some?: discountitemsWhereInput
    none?: discountitemsWhereInput
  }

  export type discountitemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type discountCountOrderByAggregateInput = {
    id?: SortOrder
    discname?: SortOrder
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
  }

  export type discountAvgOrderByAggregateInput = {
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
  }

  export type discountMaxOrderByAggregateInput = {
    id?: SortOrder
    discname?: SortOrder
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
  }

  export type discountMinOrderByAggregateInput = {
    id?: SortOrder
    discname?: SortOrder
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
  }

  export type discountSumOrderByAggregateInput = {
    type?: SortOrder
    discvalue?: SortOrder
    minpurchase?: SortOrder
    maxdisc?: SortOrder
  }

  export type DiscountRelationFilter = {
    is?: discountWhereInput
    isNot?: discountWhereInput
  }

  export type discountitemsDiscidProductidCompoundUniqueInput = {
    discid: string
    productid: string
  }

  export type discountitemsCountOrderByAggregateInput = {
    discid?: SortOrder
    productid?: SortOrder
  }

  export type discountitemsMaxOrderByAggregateInput = {
    discid?: SortOrder
    productid?: SortOrder
  }

  export type discountitemsMinOrderByAggregateInput = {
    discid?: SortOrder
    productid?: SortOrder
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type DeliveryserviceRelationFilter = {
    is?: deliveryserviceWhereInput
    isNot?: deliveryserviceWhereInput
  }

  export type orderdetailsOrderidProductidDeliveryidCompoundUniqueInput = {
    orderid: string
    productid: string
    deliveryid: string
  }

  export type orderdetailsCountOrderByAggregateInput = {
    orderid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    deliveryid?: SortOrder
  }

  export type orderdetailsAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type orderdetailsMaxOrderByAggregateInput = {
    orderid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    deliveryid?: SortOrder
  }

  export type orderdetailsMinOrderByAggregateInput = {
    orderid?: SortOrder
    productid?: SortOrder
    quantity?: SortOrder
    deliveryid?: SortOrder
  }

  export type orderdetailsSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PaymentdetailsRelationFilter = {
    is?: paymentdetailsWhereInput
    isNot?: paymentdetailsWhereInput
  }

  export type PaymentserviceRelationFilter = {
    is?: paymentserviceWhereInput
    isNot?: paymentserviceWhereInput
  }

  export type ordersIdUseridPaydetidPayserviceidCompoundUniqueInput = {
    id: string
    userid: string
    paydetid: string
    payserviceid: string
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    paydetid?: SortOrder
    payserviceid?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    paydetid?: SortOrder
    payserviceid?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    paydetid?: SortOrder
    payserviceid?: SortOrder
  }

  export type Enumpaymentdetails_statusNullableFilter = {
    equals?: paymentdetails_status | null
    in?: Enumerable<paymentdetails_status> | null
    notIn?: Enumerable<paymentdetails_status> | null
    not?: NestedEnumpaymentdetails_statusNullableFilter | paymentdetails_status | null
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentdetailsCountOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    status?: SortOrder
  }

  export type paymentdetailsAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type paymentdetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    status?: SortOrder
  }

  export type paymentdetailsMinOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    status?: SortOrder
  }

  export type paymentdetailsSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type Enumpaymentdetails_statusNullableWithAggregatesFilter = {
    equals?: paymentdetails_status | null
    in?: Enumerable<paymentdetails_status> | null
    notIn?: Enumerable<paymentdetails_status> | null
    not?: NestedEnumpaymentdetails_statusNullableWithAggregatesFilter | paymentdetails_status | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumpaymentdetails_statusNullableFilter
    _max?: NestedEnumpaymentdetails_statusNullableFilter
  }

  export type paymentserviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type paymentserviceAvgOrderByAggregateInput = {
    fee?: SortOrder
  }

  export type paymentserviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type paymentserviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    fee?: SortOrder
  }

  export type paymentserviceSumOrderByAggregateInput = {
    fee?: SortOrder
  }

  export type CartListRelationFilter = {
    every?: cartWhereInput
    some?: cartWhereInput
    none?: cartWhereInput
  }

  export type ShopRelationFilter = {
    is?: shopWhereInput
    isNot?: shopWhereInput
  }

  export type ProductimgListRelationFilter = {
    every?: productimgWhereInput
    some?: productimgWhereInput
    none?: productimgWhereInput
  }

  export type UserreviewListRelationFilter = {
    every?: userreviewWhereInput
    some?: userreviewWhereInput
    none?: userreviewWhereInput
  }

  export type cartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productimgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userreviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productIdShopidCompoundUniqueInput = {
    id: string
    shopid: string
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    shopid?: SortOrder
    productname?: SortOrder
    description?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    shopid?: SortOrder
    productname?: SortOrder
    description?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    shopid?: SortOrder
    productname?: SortOrder
    description?: SortOrder
    price?: SortOrder
    stock?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    price?: SortOrder
    stock?: SortOrder
  }

  export type productimgProductidImagepathCompoundUniqueInput = {
    productid: string
    imagepath: string
  }

  export type productimgCountOrderByAggregateInput = {
    productid?: SortOrder
    imagepath?: SortOrder
    type?: SortOrder
  }

  export type productimgMaxOrderByAggregateInput = {
    productid?: SortOrder
    imagepath?: SortOrder
    type?: SortOrder
  }

  export type productimgMinOrderByAggregateInput = {
    productid?: SortOrder
    imagepath?: SortOrder
    type?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type shopIdOwneridCompoundUniqueInput = {
    id: string
    ownerid: string
  }

  export type shopCountOrderByAggregateInput = {
    id?: SortOrder
    ownerid?: SortOrder
    shopname?: SortOrder
    shoptype?: SortOrder
    address?: SortOrder
    imagepath?: SortOrder
  }

  export type shopMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerid?: SortOrder
    shopname?: SortOrder
    shoptype?: SortOrder
    address?: SortOrder
    imagepath?: SortOrder
  }

  export type shopMinOrderByAggregateInput = {
    id?: SortOrder
    ownerid?: SortOrder
    shopname?: SortOrder
    shoptype?: SortOrder
    address?: SortOrder
    imagepath?: SortOrder
  }

  export type subcategoryMaincatidSubcatidCompoundUniqueInput = {
    maincatid: number
    subcatid: number
  }

  export type subcategoryCountOrderByAggregateInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
  }

  export type subcategoryAvgOrderByAggregateInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
  }

  export type subcategoryMaxOrderByAggregateInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
  }

  export type subcategoryMinOrderByAggregateInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
  }

  export type subcategorySumOrderByAggregateInput = {
    maincatid?: SortOrder
    subcatid?: SortOrder
  }

  export type userreviewUseridProductidCompoundUniqueInput = {
    userid: string
    productid: string
  }

  export type userreviewCountOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type userreviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type userreviewMaxOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type userreviewMinOrderByAggregateInput = {
    userid?: SortOrder
    productid?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type userreviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type ShopListRelationFilter = {
    every?: shopWhereInput
    some?: shopWhereInput
    none?: shopWhereInput
  }

  export type shopOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    shopowner?: SortOrder
    saldo?: SortOrder
    imagepath?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    saldo?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    shopowner?: SortOrder
    saldo?: SortOrder
    imagepath?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    shopowner?: SortOrder
    saldo?: SortOrder
    imagepath?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    saldo?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type productCreateNestedOneWithoutCartInput = {
    create?: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
    connectOrCreate?: productCreateOrConnectWithoutCartInput
    connect?: productWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCartInput = {
    create?: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
    connectOrCreate?: usersCreateOrConnectWithoutCartInput
    connect?: usersWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
    connectOrCreate?: productCreateOrConnectWithoutCartInput
    upsert?: productUpsertWithoutCartInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutCartInput, productUncheckedUpdateWithoutCartInput>
  }

  export type usersUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
    connectOrCreate?: usersCreateOrConnectWithoutCartInput
    upsert?: usersUpsertWithoutCartInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCartInput, usersUncheckedUpdateWithoutCartInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type categoryprodCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutCategoryInput>, Enumerable<categoryprodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutCategoryInput>
    createMany?: categoryprodCreateManyCategoryInputEnvelope
    connect?: Enumerable<categoryprodWhereUniqueInput>
  }

  export type subcategoryCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_maincatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_maincatidTocategoryInputEnvelope
    connect?: Enumerable<subcategoryWhereUniqueInput>
  }

  export type subcategoryCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_subcatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_subcatidTocategoryInputEnvelope
    connect?: Enumerable<subcategoryWhereUniqueInput>
  }

  export type categoryprodUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutCategoryInput>, Enumerable<categoryprodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutCategoryInput>
    createMany?: categoryprodCreateManyCategoryInputEnvelope
    connect?: Enumerable<categoryprodWhereUniqueInput>
  }

  export type subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_maincatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_maincatidTocategoryInputEnvelope
    connect?: Enumerable<subcategoryWhereUniqueInput>
  }

  export type subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_subcatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_subcatidTocategoryInputEnvelope
    connect?: Enumerable<subcategoryWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoryprodUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutCategoryInput>, Enumerable<categoryprodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<categoryprodUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: categoryprodCreateManyCategoryInputEnvelope
    set?: Enumerable<categoryprodWhereUniqueInput>
    disconnect?: Enumerable<categoryprodWhereUniqueInput>
    delete?: Enumerable<categoryprodWhereUniqueInput>
    connect?: Enumerable<categoryprodWhereUniqueInput>
    update?: Enumerable<categoryprodUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<categoryprodUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<categoryprodScalarWhereInput>
  }

  export type subcategoryUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_maincatidTocategoryInput>
    upsert?: Enumerable<subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_maincatidTocategoryInputEnvelope
    set?: Enumerable<subcategoryWhereUniqueInput>
    disconnect?: Enumerable<subcategoryWhereUniqueInput>
    delete?: Enumerable<subcategoryWhereUniqueInput>
    connect?: Enumerable<subcategoryWhereUniqueInput>
    update?: Enumerable<subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput>
    updateMany?: Enumerable<subcategoryUpdateManyWithWhereWithoutCategory_subcategory_maincatidTocategoryInput>
    deleteMany?: Enumerable<subcategoryScalarWhereInput>
  }

  export type subcategoryUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_subcatidTocategoryInput>
    upsert?: Enumerable<subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_subcatidTocategoryInputEnvelope
    set?: Enumerable<subcategoryWhereUniqueInput>
    disconnect?: Enumerable<subcategoryWhereUniqueInput>
    delete?: Enumerable<subcategoryWhereUniqueInput>
    connect?: Enumerable<subcategoryWhereUniqueInput>
    update?: Enumerable<subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput>
    updateMany?: Enumerable<subcategoryUpdateManyWithWhereWithoutCategory_subcategory_subcatidTocategoryInput>
    deleteMany?: Enumerable<subcategoryScalarWhereInput>
  }

  export type categoryprodUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutCategoryInput>, Enumerable<categoryprodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<categoryprodUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: categoryprodCreateManyCategoryInputEnvelope
    set?: Enumerable<categoryprodWhereUniqueInput>
    disconnect?: Enumerable<categoryprodWhereUniqueInput>
    delete?: Enumerable<categoryprodWhereUniqueInput>
    connect?: Enumerable<categoryprodWhereUniqueInput>
    update?: Enumerable<categoryprodUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<categoryprodUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<categoryprodScalarWhereInput>
  }

  export type subcategoryUncheckedUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_maincatidTocategoryInput>
    upsert?: Enumerable<subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_maincatidTocategoryInputEnvelope
    set?: Enumerable<subcategoryWhereUniqueInput>
    disconnect?: Enumerable<subcategoryWhereUniqueInput>
    delete?: Enumerable<subcategoryWhereUniqueInput>
    connect?: Enumerable<subcategoryWhereUniqueInput>
    update?: Enumerable<subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput>
    updateMany?: Enumerable<subcategoryUpdateManyWithWhereWithoutCategory_subcategory_maincatidTocategoryInput>
    deleteMany?: Enumerable<subcategoryScalarWhereInput>
  }

  export type subcategoryUncheckedUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput = {
    create?: XOR<Enumerable<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput>, Enumerable<subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>>
    connectOrCreate?: Enumerable<subcategoryCreateOrConnectWithoutCategory_subcategory_subcatidTocategoryInput>
    upsert?: Enumerable<subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput>
    createMany?: subcategoryCreateManyCategory_subcategory_subcatidTocategoryInputEnvelope
    set?: Enumerable<subcategoryWhereUniqueInput>
    disconnect?: Enumerable<subcategoryWhereUniqueInput>
    delete?: Enumerable<subcategoryWhereUniqueInput>
    connect?: Enumerable<subcategoryWhereUniqueInput>
    update?: Enumerable<subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput>
    updateMany?: Enumerable<subcategoryUpdateManyWithWhereWithoutCategory_subcategory_subcatidTocategoryInput>
    deleteMany?: Enumerable<subcategoryScalarWhereInput>
  }

  export type categoryCreateNestedOneWithoutCategoryprodInput = {
    create?: XOR<categoryCreateWithoutCategoryprodInput, categoryUncheckedCreateWithoutCategoryprodInput>
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryprodInput
    connect?: categoryWhereUniqueInput
  }

  export type productCreateNestedOneWithoutCategoryprodInput = {
    create?: XOR<productCreateWithoutCategoryprodInput, productUncheckedCreateWithoutCategoryprodInput>
    connectOrCreate?: productCreateOrConnectWithoutCategoryprodInput
    connect?: productWhereUniqueInput
  }

  export type categoryUpdateOneRequiredWithoutCategoryprodNestedInput = {
    create?: XOR<categoryCreateWithoutCategoryprodInput, categoryUncheckedCreateWithoutCategoryprodInput>
    connectOrCreate?: categoryCreateOrConnectWithoutCategoryprodInput
    upsert?: categoryUpsertWithoutCategoryprodInput
    connect?: categoryWhereUniqueInput
    update?: XOR<categoryUpdateWithoutCategoryprodInput, categoryUncheckedUpdateWithoutCategoryprodInput>
  }

  export type productUpdateOneRequiredWithoutCategoryprodNestedInput = {
    create?: XOR<productCreateWithoutCategoryprodInput, productUncheckedCreateWithoutCategoryprodInput>
    connectOrCreate?: productCreateOrConnectWithoutCategoryprodInput
    upsert?: productUpsertWithoutCategoryprodInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutCategoryprodInput, productUncheckedUpdateWithoutCategoryprodInput>
  }

  export type orderdetailsCreateNestedManyWithoutDeliveryserviceInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutDeliveryserviceInput>, Enumerable<orderdetailsUncheckedCreateWithoutDeliveryserviceInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutDeliveryserviceInput>
    createMany?: orderdetailsCreateManyDeliveryserviceInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type orderdetailsUncheckedCreateNestedManyWithoutDeliveryserviceInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutDeliveryserviceInput>, Enumerable<orderdetailsUncheckedCreateWithoutDeliveryserviceInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutDeliveryserviceInput>
    createMany?: orderdetailsCreateManyDeliveryserviceInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type orderdetailsUpdateManyWithoutDeliveryserviceNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutDeliveryserviceInput>, Enumerable<orderdetailsUncheckedCreateWithoutDeliveryserviceInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutDeliveryserviceInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutDeliveryserviceInput>
    createMany?: orderdetailsCreateManyDeliveryserviceInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutDeliveryserviceInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutDeliveryserviceInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type orderdetailsUncheckedUpdateManyWithoutDeliveryserviceNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutDeliveryserviceInput>, Enumerable<orderdetailsUncheckedCreateWithoutDeliveryserviceInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutDeliveryserviceInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutDeliveryserviceInput>
    createMany?: orderdetailsCreateManyDeliveryserviceInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutDeliveryserviceInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutDeliveryserviceInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type discountitemsCreateNestedManyWithoutDiscountInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutDiscountInput>, Enumerable<discountitemsUncheckedCreateWithoutDiscountInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutDiscountInput>
    createMany?: discountitemsCreateManyDiscountInputEnvelope
    connect?: Enumerable<discountitemsWhereUniqueInput>
  }

  export type discountitemsUncheckedCreateNestedManyWithoutDiscountInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutDiscountInput>, Enumerable<discountitemsUncheckedCreateWithoutDiscountInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutDiscountInput>
    createMany?: discountitemsCreateManyDiscountInputEnvelope
    connect?: Enumerable<discountitemsWhereUniqueInput>
  }

  export type discountitemsUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutDiscountInput>, Enumerable<discountitemsUncheckedCreateWithoutDiscountInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutDiscountInput>
    upsert?: Enumerable<discountitemsUpsertWithWhereUniqueWithoutDiscountInput>
    createMany?: discountitemsCreateManyDiscountInputEnvelope
    set?: Enumerable<discountitemsWhereUniqueInput>
    disconnect?: Enumerable<discountitemsWhereUniqueInput>
    delete?: Enumerable<discountitemsWhereUniqueInput>
    connect?: Enumerable<discountitemsWhereUniqueInput>
    update?: Enumerable<discountitemsUpdateWithWhereUniqueWithoutDiscountInput>
    updateMany?: Enumerable<discountitemsUpdateManyWithWhereWithoutDiscountInput>
    deleteMany?: Enumerable<discountitemsScalarWhereInput>
  }

  export type discountitemsUncheckedUpdateManyWithoutDiscountNestedInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutDiscountInput>, Enumerable<discountitemsUncheckedCreateWithoutDiscountInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutDiscountInput>
    upsert?: Enumerable<discountitemsUpsertWithWhereUniqueWithoutDiscountInput>
    createMany?: discountitemsCreateManyDiscountInputEnvelope
    set?: Enumerable<discountitemsWhereUniqueInput>
    disconnect?: Enumerable<discountitemsWhereUniqueInput>
    delete?: Enumerable<discountitemsWhereUniqueInput>
    connect?: Enumerable<discountitemsWhereUniqueInput>
    update?: Enumerable<discountitemsUpdateWithWhereUniqueWithoutDiscountInput>
    updateMany?: Enumerable<discountitemsUpdateManyWithWhereWithoutDiscountInput>
    deleteMany?: Enumerable<discountitemsScalarWhereInput>
  }

  export type discountCreateNestedOneWithoutDiscountitemsInput = {
    create?: XOR<discountCreateWithoutDiscountitemsInput, discountUncheckedCreateWithoutDiscountitemsInput>
    connectOrCreate?: discountCreateOrConnectWithoutDiscountitemsInput
    connect?: discountWhereUniqueInput
  }

  export type productCreateNestedOneWithoutDiscountitemsInput = {
    create?: XOR<productCreateWithoutDiscountitemsInput, productUncheckedCreateWithoutDiscountitemsInput>
    connectOrCreate?: productCreateOrConnectWithoutDiscountitemsInput
    connect?: productWhereUniqueInput
  }

  export type discountUpdateOneRequiredWithoutDiscountitemsNestedInput = {
    create?: XOR<discountCreateWithoutDiscountitemsInput, discountUncheckedCreateWithoutDiscountitemsInput>
    connectOrCreate?: discountCreateOrConnectWithoutDiscountitemsInput
    upsert?: discountUpsertWithoutDiscountitemsInput
    connect?: discountWhereUniqueInput
    update?: XOR<discountUpdateWithoutDiscountitemsInput, discountUncheckedUpdateWithoutDiscountitemsInput>
  }

  export type productUpdateOneRequiredWithoutDiscountitemsNestedInput = {
    create?: XOR<productCreateWithoutDiscountitemsInput, productUncheckedCreateWithoutDiscountitemsInput>
    connectOrCreate?: productCreateOrConnectWithoutDiscountitemsInput
    upsert?: productUpsertWithoutDiscountitemsInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutDiscountitemsInput, productUncheckedUpdateWithoutDiscountitemsInput>
  }

  export type ordersCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
  }

  export type productCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<productCreateWithoutOrderdetailsInput, productUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderdetailsInput
    connect?: productWhereUniqueInput
  }

  export type deliveryserviceCreateNestedOneWithoutOrderdetailsInput = {
    create?: XOR<deliveryserviceCreateWithoutOrderdetailsInput, deliveryserviceUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: deliveryserviceCreateOrConnectWithoutOrderdetailsInput
    connect?: deliveryserviceWhereUniqueInput
  }

  export type ordersUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrderdetailsInput
    upsert?: ordersUpsertWithoutOrderdetailsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type productUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<productCreateWithoutOrderdetailsInput, productUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderdetailsInput
    upsert?: productUpsertWithoutOrderdetailsInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutOrderdetailsInput, productUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type deliveryserviceUpdateOneRequiredWithoutOrderdetailsNestedInput = {
    create?: XOR<deliveryserviceCreateWithoutOrderdetailsInput, deliveryserviceUncheckedCreateWithoutOrderdetailsInput>
    connectOrCreate?: deliveryserviceCreateOrConnectWithoutOrderdetailsInput
    upsert?: deliveryserviceUpsertWithoutOrderdetailsInput
    connect?: deliveryserviceWhereUniqueInput
    update?: XOR<deliveryserviceUpdateWithoutOrderdetailsInput, deliveryserviceUncheckedUpdateWithoutOrderdetailsInput>
  }

  export type orderdetailsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type paymentdetailsCreateNestedOneWithoutOrdersInput = {
    create?: XOR<paymentdetailsCreateWithoutOrdersInput, paymentdetailsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: paymentdetailsCreateOrConnectWithoutOrdersInput
    connect?: paymentdetailsWhereUniqueInput
  }

  export type paymentserviceCreateNestedOneWithoutOrdersInput = {
    create?: XOR<paymentserviceCreateWithoutOrdersInput, paymentserviceUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: paymentserviceCreateOrConnectWithoutOrdersInput
    connect?: paymentserviceWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    connect?: usersWhereUniqueInput
  }

  export type orderdetailsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type orderdetailsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type paymentdetailsUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<paymentdetailsCreateWithoutOrdersInput, paymentdetailsUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: paymentdetailsCreateOrConnectWithoutOrdersInput
    upsert?: paymentdetailsUpsertWithoutOrdersInput
    connect?: paymentdetailsWhereUniqueInput
    update?: XOR<paymentdetailsUpdateWithoutOrdersInput, paymentdetailsUncheckedUpdateWithoutOrdersInput>
  }

  export type paymentserviceUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<paymentserviceCreateWithoutOrdersInput, paymentserviceUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: paymentserviceCreateOrConnectWithoutOrdersInput
    upsert?: paymentserviceUpsertWithoutOrdersInput
    connect?: paymentserviceWhereUniqueInput
    update?: XOR<paymentserviceUpdateWithoutOrdersInput, paymentserviceUncheckedUpdateWithoutOrdersInput>
  }

  export type usersUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    upsert?: usersUpsertWithoutOrdersInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutOrdersInput>, Enumerable<orderdetailsUncheckedCreateWithoutOrdersInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutOrdersInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutOrdersInput>
    createMany?: orderdetailsCreateManyOrdersInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutOrdersInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutOrdersInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type ordersCreateNestedManyWithoutPaymentdetailsInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentdetailsInput>, Enumerable<ordersUncheckedCreateWithoutPaymentdetailsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentdetailsInput>
    createMany?: ordersCreateManyPaymentdetailsInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutPaymentdetailsInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentdetailsInput>, Enumerable<ordersUncheckedCreateWithoutPaymentdetailsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentdetailsInput>
    createMany?: ordersCreateManyPaymentdetailsInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type NullableEnumpaymentdetails_statusFieldUpdateOperationsInput = {
    set?: paymentdetails_status | null
  }

  export type ordersUpdateManyWithoutPaymentdetailsNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentdetailsInput>, Enumerable<ordersUncheckedCreateWithoutPaymentdetailsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentdetailsInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutPaymentdetailsInput>
    createMany?: ordersCreateManyPaymentdetailsInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutPaymentdetailsInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutPaymentdetailsInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutPaymentdetailsNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentdetailsInput>, Enumerable<ordersUncheckedCreateWithoutPaymentdetailsInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentdetailsInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutPaymentdetailsInput>
    createMany?: ordersCreateManyPaymentdetailsInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutPaymentdetailsInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutPaymentdetailsInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type ordersCreateNestedManyWithoutPaymentserviceInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentserviceInput>, Enumerable<ordersUncheckedCreateWithoutPaymentserviceInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentserviceInput>
    createMany?: ordersCreateManyPaymentserviceInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutPaymentserviceInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentserviceInput>, Enumerable<ordersUncheckedCreateWithoutPaymentserviceInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentserviceInput>
    createMany?: ordersCreateManyPaymentserviceInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type ordersUpdateManyWithoutPaymentserviceNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentserviceInput>, Enumerable<ordersUncheckedCreateWithoutPaymentserviceInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentserviceInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutPaymentserviceInput>
    createMany?: ordersCreateManyPaymentserviceInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutPaymentserviceInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutPaymentserviceInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutPaymentserviceNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutPaymentserviceInput>, Enumerable<ordersUncheckedCreateWithoutPaymentserviceInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutPaymentserviceInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutPaymentserviceInput>
    createMany?: ordersCreateManyPaymentserviceInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutPaymentserviceInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutPaymentserviceInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type cartCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type categoryprodCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutProductInput>, Enumerable<categoryprodUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutProductInput>
    createMany?: categoryprodCreateManyProductInputEnvelope
    connect?: Enumerable<categoryprodWhereUniqueInput>
  }

  export type discountitemsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutProductInput>, Enumerable<discountitemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutProductInput>
    createMany?: discountitemsCreateManyProductInputEnvelope
    connect?: Enumerable<discountitemsWhereUniqueInput>
  }

  export type orderdetailsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductInput>
    createMany?: orderdetailsCreateManyProductInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type shopCreateNestedOneWithoutProductInput = {
    create?: XOR<shopCreateWithoutProductInput, shopUncheckedCreateWithoutProductInput>
    connectOrCreate?: shopCreateOrConnectWithoutProductInput
    connect?: shopWhereUniqueInput
  }

  export type productimgCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<productimgCreateWithoutProductInput>, Enumerable<productimgUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<productimgCreateOrConnectWithoutProductInput>
    createMany?: productimgCreateManyProductInputEnvelope
    connect?: Enumerable<productimgWhereUniqueInput>
  }

  export type userreviewCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutProductInput>, Enumerable<userreviewUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutProductInput>
    createMany?: userreviewCreateManyProductInputEnvelope
    connect?: Enumerable<userreviewWhereUniqueInput>
  }

  export type cartUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type categoryprodUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutProductInput>, Enumerable<categoryprodUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutProductInput>
    createMany?: categoryprodCreateManyProductInputEnvelope
    connect?: Enumerable<categoryprodWhereUniqueInput>
  }

  export type discountitemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutProductInput>, Enumerable<discountitemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutProductInput>
    createMany?: discountitemsCreateManyProductInputEnvelope
    connect?: Enumerable<discountitemsWhereUniqueInput>
  }

  export type orderdetailsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductInput>
    createMany?: orderdetailsCreateManyProductInputEnvelope
    connect?: Enumerable<orderdetailsWhereUniqueInput>
  }

  export type productimgUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<productimgCreateWithoutProductInput>, Enumerable<productimgUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<productimgCreateOrConnectWithoutProductInput>
    createMany?: productimgCreateManyProductInputEnvelope
    connect?: Enumerable<productimgWhereUniqueInput>
  }

  export type userreviewUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutProductInput>, Enumerable<userreviewUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutProductInput>
    createMany?: userreviewCreateManyProductInputEnvelope
    connect?: Enumerable<userreviewWhereUniqueInput>
  }

  export type cartUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type categoryprodUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutProductInput>, Enumerable<categoryprodUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<categoryprodUpsertWithWhereUniqueWithoutProductInput>
    createMany?: categoryprodCreateManyProductInputEnvelope
    set?: Enumerable<categoryprodWhereUniqueInput>
    disconnect?: Enumerable<categoryprodWhereUniqueInput>
    delete?: Enumerable<categoryprodWhereUniqueInput>
    connect?: Enumerable<categoryprodWhereUniqueInput>
    update?: Enumerable<categoryprodUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<categoryprodUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<categoryprodScalarWhereInput>
  }

  export type discountitemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutProductInput>, Enumerable<discountitemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<discountitemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: discountitemsCreateManyProductInputEnvelope
    set?: Enumerable<discountitemsWhereUniqueInput>
    disconnect?: Enumerable<discountitemsWhereUniqueInput>
    delete?: Enumerable<discountitemsWhereUniqueInput>
    connect?: Enumerable<discountitemsWhereUniqueInput>
    update?: Enumerable<discountitemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<discountitemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<discountitemsScalarWhereInput>
  }

  export type orderdetailsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: orderdetailsCreateManyProductInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type shopUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<shopCreateWithoutProductInput, shopUncheckedCreateWithoutProductInput>
    connectOrCreate?: shopCreateOrConnectWithoutProductInput
    upsert?: shopUpsertWithoutProductInput
    connect?: shopWhereUniqueInput
    update?: XOR<shopUpdateWithoutProductInput, shopUncheckedUpdateWithoutProductInput>
  }

  export type productimgUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<productimgCreateWithoutProductInput>, Enumerable<productimgUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<productimgCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<productimgUpsertWithWhereUniqueWithoutProductInput>
    createMany?: productimgCreateManyProductInputEnvelope
    set?: Enumerable<productimgWhereUniqueInput>
    disconnect?: Enumerable<productimgWhereUniqueInput>
    delete?: Enumerable<productimgWhereUniqueInput>
    connect?: Enumerable<productimgWhereUniqueInput>
    update?: Enumerable<productimgUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<productimgUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<productimgScalarWhereInput>
  }

  export type userreviewUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutProductInput>, Enumerable<userreviewUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<userreviewUpsertWithWhereUniqueWithoutProductInput>
    createMany?: userreviewCreateManyProductInputEnvelope
    set?: Enumerable<userreviewWhereUniqueInput>
    disconnect?: Enumerable<userreviewWhereUniqueInput>
    delete?: Enumerable<userreviewWhereUniqueInput>
    connect?: Enumerable<userreviewWhereUniqueInput>
    update?: Enumerable<userreviewUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<userreviewUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<userreviewScalarWhereInput>
  }

  export type cartUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutProductInput>, Enumerable<cartUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutProductInput>
    createMany?: cartCreateManyProductInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type categoryprodUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<categoryprodCreateWithoutProductInput>, Enumerable<categoryprodUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<categoryprodCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<categoryprodUpsertWithWhereUniqueWithoutProductInput>
    createMany?: categoryprodCreateManyProductInputEnvelope
    set?: Enumerable<categoryprodWhereUniqueInput>
    disconnect?: Enumerable<categoryprodWhereUniqueInput>
    delete?: Enumerable<categoryprodWhereUniqueInput>
    connect?: Enumerable<categoryprodWhereUniqueInput>
    update?: Enumerable<categoryprodUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<categoryprodUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<categoryprodScalarWhereInput>
  }

  export type discountitemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<discountitemsCreateWithoutProductInput>, Enumerable<discountitemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<discountitemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<discountitemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: discountitemsCreateManyProductInputEnvelope
    set?: Enumerable<discountitemsWhereUniqueInput>
    disconnect?: Enumerable<discountitemsWhereUniqueInput>
    delete?: Enumerable<discountitemsWhereUniqueInput>
    connect?: Enumerable<discountitemsWhereUniqueInput>
    update?: Enumerable<discountitemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<discountitemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<discountitemsScalarWhereInput>
  }

  export type orderdetailsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<orderdetailsCreateWithoutProductInput>, Enumerable<orderdetailsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<orderdetailsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<orderdetailsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: orderdetailsCreateManyProductInputEnvelope
    set?: Enumerable<orderdetailsWhereUniqueInput>
    disconnect?: Enumerable<orderdetailsWhereUniqueInput>
    delete?: Enumerable<orderdetailsWhereUniqueInput>
    connect?: Enumerable<orderdetailsWhereUniqueInput>
    update?: Enumerable<orderdetailsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<orderdetailsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<orderdetailsScalarWhereInput>
  }

  export type productimgUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<productimgCreateWithoutProductInput>, Enumerable<productimgUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<productimgCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<productimgUpsertWithWhereUniqueWithoutProductInput>
    createMany?: productimgCreateManyProductInputEnvelope
    set?: Enumerable<productimgWhereUniqueInput>
    disconnect?: Enumerable<productimgWhereUniqueInput>
    delete?: Enumerable<productimgWhereUniqueInput>
    connect?: Enumerable<productimgWhereUniqueInput>
    update?: Enumerable<productimgUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<productimgUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<productimgScalarWhereInput>
  }

  export type userreviewUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutProductInput>, Enumerable<userreviewUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<userreviewUpsertWithWhereUniqueWithoutProductInput>
    createMany?: userreviewCreateManyProductInputEnvelope
    set?: Enumerable<userreviewWhereUniqueInput>
    disconnect?: Enumerable<userreviewWhereUniqueInput>
    delete?: Enumerable<userreviewWhereUniqueInput>
    connect?: Enumerable<userreviewWhereUniqueInput>
    update?: Enumerable<userreviewUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<userreviewUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<userreviewScalarWhereInput>
  }

  export type productCreateNestedOneWithoutProductimgInput = {
    create?: XOR<productCreateWithoutProductimgInput, productUncheckedCreateWithoutProductimgInput>
    connectOrCreate?: productCreateOrConnectWithoutProductimgInput
    connect?: productWhereUniqueInput
  }

  export type productUpdateOneRequiredWithoutProductimgNestedInput = {
    create?: XOR<productCreateWithoutProductimgInput, productUncheckedCreateWithoutProductimgInput>
    connectOrCreate?: productCreateOrConnectWithoutProductimgInput
    upsert?: productUpsertWithoutProductimgInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutProductimgInput, productUncheckedUpdateWithoutProductimgInput>
  }

  export type productCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<productCreateWithoutShopInput>, Enumerable<productUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutShopInput>
    createMany?: productCreateManyShopInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type usersCreateNestedOneWithoutShopInput = {
    create?: XOR<usersCreateWithoutShopInput, usersUncheckedCreateWithoutShopInput>
    connectOrCreate?: usersCreateOrConnectWithoutShopInput
    connect?: usersWhereUniqueInput
  }

  export type productUncheckedCreateNestedManyWithoutShopInput = {
    create?: XOR<Enumerable<productCreateWithoutShopInput>, Enumerable<productUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutShopInput>
    createMany?: productCreateManyShopInputEnvelope
    connect?: Enumerable<productWhereUniqueInput>
  }

  export type productUpdateManyWithoutShopNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutShopInput>, Enumerable<productUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutShopInput>
    createMany?: productCreateManyShopInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type usersUpdateOneRequiredWithoutShopNestedInput = {
    create?: XOR<usersCreateWithoutShopInput, usersUncheckedCreateWithoutShopInput>
    connectOrCreate?: usersCreateOrConnectWithoutShopInput
    upsert?: usersUpsertWithoutShopInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutShopInput, usersUncheckedUpdateWithoutShopInput>
  }

  export type productUncheckedUpdateManyWithoutShopNestedInput = {
    create?: XOR<Enumerable<productCreateWithoutShopInput>, Enumerable<productUncheckedCreateWithoutShopInput>>
    connectOrCreate?: Enumerable<productCreateOrConnectWithoutShopInput>
    upsert?: Enumerable<productUpsertWithWhereUniqueWithoutShopInput>
    createMany?: productCreateManyShopInputEnvelope
    set?: Enumerable<productWhereUniqueInput>
    disconnect?: Enumerable<productWhereUniqueInput>
    delete?: Enumerable<productWhereUniqueInput>
    connect?: Enumerable<productWhereUniqueInput>
    update?: Enumerable<productUpdateWithWhereUniqueWithoutShopInput>
    updateMany?: Enumerable<productUpdateManyWithWhereWithoutShopInput>
    deleteMany?: Enumerable<productScalarWhereInput>
  }

  export type categoryCreateNestedOneWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    create?: XOR<categoryCreateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_maincatidTocategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubcategory_subcategory_maincatidTocategoryInput
    connect?: categoryWhereUniqueInput
  }

  export type categoryCreateNestedOneWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    create?: XOR<categoryCreateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_subcatidTocategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubcategory_subcategory_subcatidTocategoryInput
    connect?: categoryWhereUniqueInput
  }

  export type categoryUpdateOneRequiredWithoutSubcategory_subcategory_maincatidTocategoryNestedInput = {
    create?: XOR<categoryCreateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_maincatidTocategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubcategory_subcategory_maincatidTocategoryInput
    upsert?: categoryUpsertWithoutSubcategory_subcategory_maincatidTocategoryInput
    connect?: categoryWhereUniqueInput
    update?: XOR<categoryUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput>
  }

  export type categoryUpdateOneRequiredWithoutSubcategory_subcategory_subcatidTocategoryNestedInput = {
    create?: XOR<categoryCreateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_subcatidTocategoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutSubcategory_subcategory_subcatidTocategoryInput
    upsert?: categoryUpsertWithoutSubcategory_subcategory_subcatidTocategoryInput
    connect?: categoryWhereUniqueInput
    update?: XOR<categoryUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput>
  }

  export type productCreateNestedOneWithoutUserreviewInput = {
    create?: XOR<productCreateWithoutUserreviewInput, productUncheckedCreateWithoutUserreviewInput>
    connectOrCreate?: productCreateOrConnectWithoutUserreviewInput
    connect?: productWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUserreviewInput = {
    create?: XOR<usersCreateWithoutUserreviewInput, usersUncheckedCreateWithoutUserreviewInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserreviewInput
    connect?: usersWhereUniqueInput
  }

  export type productUpdateOneRequiredWithoutUserreviewNestedInput = {
    create?: XOR<productCreateWithoutUserreviewInput, productUncheckedCreateWithoutUserreviewInput>
    connectOrCreate?: productCreateOrConnectWithoutUserreviewInput
    upsert?: productUpsertWithoutUserreviewInput
    connect?: productWhereUniqueInput
    update?: XOR<productUpdateWithoutUserreviewInput, productUncheckedUpdateWithoutUserreviewInput>
  }

  export type usersUpdateOneRequiredWithoutUserreviewNestedInput = {
    create?: XOR<usersCreateWithoutUserreviewInput, usersUncheckedCreateWithoutUserreviewInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserreviewInput
    upsert?: usersUpsertWithoutUserreviewInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUserreviewInput, usersUncheckedUpdateWithoutUserreviewInput>
  }

  export type cartCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type ordersCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUsersInput>, Enumerable<ordersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUsersInput>
    createMany?: ordersCreateManyUsersInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type shopCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<shopCreateWithoutUsersInput>, Enumerable<shopUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<shopCreateOrConnectWithoutUsersInput>
    createMany?: shopCreateManyUsersInputEnvelope
    connect?: Enumerable<shopWhereUniqueInput>
  }

  export type userreviewCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutUsersInput>, Enumerable<userreviewUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutUsersInput>
    createMany?: userreviewCreateManyUsersInputEnvelope
    connect?: Enumerable<userreviewWhereUniqueInput>
  }

  export type cartUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    connect?: Enumerable<cartWhereUniqueInput>
  }

  export type ordersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUsersInput>, Enumerable<ordersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUsersInput>
    createMany?: ordersCreateManyUsersInputEnvelope
    connect?: Enumerable<ordersWhereUniqueInput>
  }

  export type shopUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<shopCreateWithoutUsersInput>, Enumerable<shopUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<shopCreateOrConnectWithoutUsersInput>
    createMany?: shopCreateManyUsersInputEnvelope
    connect?: Enumerable<shopWhereUniqueInput>
  }

  export type userreviewUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutUsersInput>, Enumerable<userreviewUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutUsersInput>
    createMany?: userreviewCreateManyUsersInputEnvelope
    connect?: Enumerable<userreviewWhereUniqueInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type cartUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type ordersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUsersInput>, Enumerable<ordersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ordersCreateManyUsersInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type shopUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<shopCreateWithoutUsersInput>, Enumerable<shopUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<shopCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<shopUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: shopCreateManyUsersInputEnvelope
    set?: Enumerable<shopWhereUniqueInput>
    disconnect?: Enumerable<shopWhereUniqueInput>
    delete?: Enumerable<shopWhereUniqueInput>
    connect?: Enumerable<shopWhereUniqueInput>
    update?: Enumerable<shopUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<shopUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<shopScalarWhereInput>
  }

  export type userreviewUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutUsersInput>, Enumerable<userreviewUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<userreviewUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: userreviewCreateManyUsersInputEnvelope
    set?: Enumerable<userreviewWhereUniqueInput>
    disconnect?: Enumerable<userreviewWhereUniqueInput>
    delete?: Enumerable<userreviewWhereUniqueInput>
    connect?: Enumerable<userreviewWhereUniqueInput>
    update?: Enumerable<userreviewUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<userreviewUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<userreviewScalarWhereInput>
  }

  export type cartUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<cartCreateWithoutUsersInput>, Enumerable<cartUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<cartCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<cartUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: cartCreateManyUsersInputEnvelope
    set?: Enumerable<cartWhereUniqueInput>
    disconnect?: Enumerable<cartWhereUniqueInput>
    delete?: Enumerable<cartWhereUniqueInput>
    connect?: Enumerable<cartWhereUniqueInput>
    update?: Enumerable<cartUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<cartUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<cartScalarWhereInput>
  }

  export type ordersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<ordersCreateWithoutUsersInput>, Enumerable<ordersUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<ordersCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<ordersUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: ordersCreateManyUsersInputEnvelope
    set?: Enumerable<ordersWhereUniqueInput>
    disconnect?: Enumerable<ordersWhereUniqueInput>
    delete?: Enumerable<ordersWhereUniqueInput>
    connect?: Enumerable<ordersWhereUniqueInput>
    update?: Enumerable<ordersUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<ordersUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<ordersScalarWhereInput>
  }

  export type shopUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<shopCreateWithoutUsersInput>, Enumerable<shopUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<shopCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<shopUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: shopCreateManyUsersInputEnvelope
    set?: Enumerable<shopWhereUniqueInput>
    disconnect?: Enumerable<shopWhereUniqueInput>
    delete?: Enumerable<shopWhereUniqueInput>
    connect?: Enumerable<shopWhereUniqueInput>
    update?: Enumerable<shopUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<shopUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<shopScalarWhereInput>
  }

  export type userreviewUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<userreviewCreateWithoutUsersInput>, Enumerable<userreviewUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<userreviewCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<userreviewUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: userreviewCreateManyUsersInputEnvelope
    set?: Enumerable<userreviewWhereUniqueInput>
    disconnect?: Enumerable<userreviewWhereUniqueInput>
    delete?: Enumerable<userreviewWhereUniqueInput>
    connect?: Enumerable<userreviewWhereUniqueInput>
    update?: Enumerable<userreviewUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<userreviewUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<userreviewScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDecimalNullableFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string | null
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string | null
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalNullableWithAggregatesFilter | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter
    _avg?: NestedDecimalNullableFilter
    _sum?: NestedDecimalNullableFilter
    _min?: NestedDecimalNullableFilter
    _max?: NestedDecimalNullableFilter
  }

  export type NestedEnumpaymentdetails_statusNullableFilter = {
    equals?: paymentdetails_status | null
    in?: Enumerable<paymentdetails_status> | null
    notIn?: Enumerable<paymentdetails_status> | null
    not?: NestedEnumpaymentdetails_statusNullableFilter | paymentdetails_status | null
  }

  export type NestedEnumpaymentdetails_statusNullableWithAggregatesFilter = {
    equals?: paymentdetails_status | null
    in?: Enumerable<paymentdetails_status> | null
    notIn?: Enumerable<paymentdetails_status> | null
    not?: NestedEnumpaymentdetails_statusNullableWithAggregatesFilter | paymentdetails_status | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumpaymentdetails_statusNullableFilter
    _max?: NestedEnumpaymentdetails_statusNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type productCreateWithoutCartInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCartInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCartInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
  }

  export type usersCreateWithoutCartInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    orders?: ordersCreateNestedManyWithoutUsersInput
    shop?: shopCreateNestedManyWithoutUsersInput
    userreview?: userreviewCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCartInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    shop?: shopUncheckedCreateNestedManyWithoutUsersInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCartInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
  }

  export type productUpsertWithoutCartInput = {
    update: XOR<productUpdateWithoutCartInput, productUncheckedUpdateWithoutCartInput>
    create: XOR<productCreateWithoutCartInput, productUncheckedCreateWithoutCartInput>
  }

  export type productUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersUpsertWithoutCartInput = {
    update: XOR<usersUpdateWithoutCartInput, usersUncheckedUpdateWithoutCartInput>
    create: XOR<usersCreateWithoutCartInput, usersUncheckedCreateWithoutCartInput>
  }

  export type usersUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: ordersUpdateManyWithoutUsersNestedInput
    shop?: shopUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCartInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    shop?: shopUncheckedUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoryprodCreateWithoutCategoryInput = {
    product: productCreateNestedOneWithoutCategoryprodInput
  }

  export type categoryprodUncheckedCreateWithoutCategoryInput = {
    productid: string
  }

  export type categoryprodCreateOrConnectWithoutCategoryInput = {
    where: categoryprodWhereUniqueInput
    create: XOR<categoryprodCreateWithoutCategoryInput, categoryprodUncheckedCreateWithoutCategoryInput>
  }

  export type categoryprodCreateManyCategoryInputEnvelope = {
    data: Enumerable<categoryprodCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput = {
    category_subcategory_subcatidTocategory: categoryCreateNestedOneWithoutSubcategory_subcategory_subcatidTocategoryInput
  }

  export type subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput = {
    subcatid: number
  }

  export type subcategoryCreateOrConnectWithoutCategory_subcategory_maincatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    create: XOR<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput, subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>
  }

  export type subcategoryCreateManyCategory_subcategory_maincatidTocategoryInputEnvelope = {
    data: Enumerable<subcategoryCreateManyCategory_subcategory_maincatidTocategoryInput>
    skipDuplicates?: boolean
  }

  export type subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput = {
    category_subcategory_maincatidTocategory: categoryCreateNestedOneWithoutSubcategory_subcategory_maincatidTocategoryInput
  }

  export type subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput = {
    maincatid: number
  }

  export type subcategoryCreateOrConnectWithoutCategory_subcategory_subcatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    create: XOR<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput, subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>
  }

  export type subcategoryCreateManyCategory_subcategory_subcatidTocategoryInputEnvelope = {
    data: Enumerable<subcategoryCreateManyCategory_subcategory_subcatidTocategoryInput>
    skipDuplicates?: boolean
  }

  export type categoryprodUpsertWithWhereUniqueWithoutCategoryInput = {
    where: categoryprodWhereUniqueInput
    update: XOR<categoryprodUpdateWithoutCategoryInput, categoryprodUncheckedUpdateWithoutCategoryInput>
    create: XOR<categoryprodCreateWithoutCategoryInput, categoryprodUncheckedCreateWithoutCategoryInput>
  }

  export type categoryprodUpdateWithWhereUniqueWithoutCategoryInput = {
    where: categoryprodWhereUniqueInput
    data: XOR<categoryprodUpdateWithoutCategoryInput, categoryprodUncheckedUpdateWithoutCategoryInput>
  }

  export type categoryprodUpdateManyWithWhereWithoutCategoryInput = {
    where: categoryprodScalarWhereInput
    data: XOR<categoryprodUpdateManyMutationInput, categoryprodUncheckedUpdateManyWithoutCategoryprodInput>
  }

  export type categoryprodScalarWhereInput = {
    AND?: Enumerable<categoryprodScalarWhereInput>
    OR?: Enumerable<categoryprodScalarWhereInput>
    NOT?: Enumerable<categoryprodScalarWhereInput>
    categoryid?: IntFilter | number
    productid?: StringFilter | string
  }

  export type subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    update: XOR<subcategoryUpdateWithoutCategory_subcategory_maincatidTocategoryInput, subcategoryUncheckedUpdateWithoutCategory_subcategory_maincatidTocategoryInput>
    create: XOR<subcategoryCreateWithoutCategory_subcategory_maincatidTocategoryInput, subcategoryUncheckedCreateWithoutCategory_subcategory_maincatidTocategoryInput>
  }

  export type subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_maincatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    data: XOR<subcategoryUpdateWithoutCategory_subcategory_maincatidTocategoryInput, subcategoryUncheckedUpdateWithoutCategory_subcategory_maincatidTocategoryInput>
  }

  export type subcategoryUpdateManyWithWhereWithoutCategory_subcategory_maincatidTocategoryInput = {
    where: subcategoryScalarWhereInput
    data: XOR<subcategoryUpdateManyMutationInput, subcategoryUncheckedUpdateManyWithoutSubcategory_subcategory_maincatidTocategoryInput>
  }

  export type subcategoryScalarWhereInput = {
    AND?: Enumerable<subcategoryScalarWhereInput>
    OR?: Enumerable<subcategoryScalarWhereInput>
    NOT?: Enumerable<subcategoryScalarWhereInput>
    maincatid?: IntFilter | number
    subcatid?: IntFilter | number
  }

  export type subcategoryUpsertWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    update: XOR<subcategoryUpdateWithoutCategory_subcategory_subcatidTocategoryInput, subcategoryUncheckedUpdateWithoutCategory_subcategory_subcatidTocategoryInput>
    create: XOR<subcategoryCreateWithoutCategory_subcategory_subcatidTocategoryInput, subcategoryUncheckedCreateWithoutCategory_subcategory_subcatidTocategoryInput>
  }

  export type subcategoryUpdateWithWhereUniqueWithoutCategory_subcategory_subcatidTocategoryInput = {
    where: subcategoryWhereUniqueInput
    data: XOR<subcategoryUpdateWithoutCategory_subcategory_subcatidTocategoryInput, subcategoryUncheckedUpdateWithoutCategory_subcategory_subcatidTocategoryInput>
  }

  export type subcategoryUpdateManyWithWhereWithoutCategory_subcategory_subcatidTocategoryInput = {
    where: subcategoryScalarWhereInput
    data: XOR<subcategoryUpdateManyMutationInput, subcategoryUncheckedUpdateManyWithoutSubcategory_subcategory_subcatidTocategoryInput>
  }

  export type categoryCreateWithoutCategoryprodInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    subcategory_subcategory_maincatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryUncheckedCreateWithoutCategoryprodInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryCreateOrConnectWithoutCategoryprodInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutCategoryprodInput, categoryUncheckedCreateWithoutCategoryprodInput>
  }

  export type productCreateWithoutCategoryprodInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutCategoryprodInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutCategoryprodInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutCategoryprodInput, productUncheckedCreateWithoutCategoryprodInput>
  }

  export type categoryUpsertWithoutCategoryprodInput = {
    update: XOR<categoryUpdateWithoutCategoryprodInput, categoryUncheckedUpdateWithoutCategoryprodInput>
    create: XOR<categoryCreateWithoutCategoryprodInput, categoryUncheckedCreateWithoutCategoryprodInput>
  }

  export type categoryUpdateWithoutCategoryprodInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory_subcategory_maincatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutCategoryprodInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type productUpsertWithoutCategoryprodInput = {
    update: XOR<productUpdateWithoutCategoryprodInput, productUncheckedUpdateWithoutCategoryprodInput>
    create: XOR<productCreateWithoutCategoryprodInput, productUncheckedCreateWithoutCategoryprodInput>
  }

  export type productUpdateWithoutCategoryprodInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutCategoryprodInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type orderdetailsCreateWithoutDeliveryserviceInput = {
    quantity?: number | null
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
    product: productCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateWithoutDeliveryserviceInput = {
    orderid: string
    productid: string
    quantity?: number | null
  }

  export type orderdetailsCreateOrConnectWithoutDeliveryserviceInput = {
    where: orderdetailsWhereUniqueInput
    create: XOR<orderdetailsCreateWithoutDeliveryserviceInput, orderdetailsUncheckedCreateWithoutDeliveryserviceInput>
  }

  export type orderdetailsCreateManyDeliveryserviceInputEnvelope = {
    data: Enumerable<orderdetailsCreateManyDeliveryserviceInput>
    skipDuplicates?: boolean
  }

  export type orderdetailsUpsertWithWhereUniqueWithoutDeliveryserviceInput = {
    where: orderdetailsWhereUniqueInput
    update: XOR<orderdetailsUpdateWithoutDeliveryserviceInput, orderdetailsUncheckedUpdateWithoutDeliveryserviceInput>
    create: XOR<orderdetailsCreateWithoutDeliveryserviceInput, orderdetailsUncheckedCreateWithoutDeliveryserviceInput>
  }

  export type orderdetailsUpdateWithWhereUniqueWithoutDeliveryserviceInput = {
    where: orderdetailsWhereUniqueInput
    data: XOR<orderdetailsUpdateWithoutDeliveryserviceInput, orderdetailsUncheckedUpdateWithoutDeliveryserviceInput>
  }

  export type orderdetailsUpdateManyWithWhereWithoutDeliveryserviceInput = {
    where: orderdetailsScalarWhereInput
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput>
  }

  export type orderdetailsScalarWhereInput = {
    AND?: Enumerable<orderdetailsScalarWhereInput>
    OR?: Enumerable<orderdetailsScalarWhereInput>
    NOT?: Enumerable<orderdetailsScalarWhereInput>
    orderid?: StringFilter | string
    productid?: StringFilter | string
    quantity?: IntNullableFilter | number | null
    deliveryid?: StringFilter | string
  }

  export type discountitemsCreateWithoutDiscountInput = {
    product: productCreateNestedOneWithoutDiscountitemsInput
  }

  export type discountitemsUncheckedCreateWithoutDiscountInput = {
    productid: string
  }

  export type discountitemsCreateOrConnectWithoutDiscountInput = {
    where: discountitemsWhereUniqueInput
    create: XOR<discountitemsCreateWithoutDiscountInput, discountitemsUncheckedCreateWithoutDiscountInput>
  }

  export type discountitemsCreateManyDiscountInputEnvelope = {
    data: Enumerable<discountitemsCreateManyDiscountInput>
    skipDuplicates?: boolean
  }

  export type discountitemsUpsertWithWhereUniqueWithoutDiscountInput = {
    where: discountitemsWhereUniqueInput
    update: XOR<discountitemsUpdateWithoutDiscountInput, discountitemsUncheckedUpdateWithoutDiscountInput>
    create: XOR<discountitemsCreateWithoutDiscountInput, discountitemsUncheckedCreateWithoutDiscountInput>
  }

  export type discountitemsUpdateWithWhereUniqueWithoutDiscountInput = {
    where: discountitemsWhereUniqueInput
    data: XOR<discountitemsUpdateWithoutDiscountInput, discountitemsUncheckedUpdateWithoutDiscountInput>
  }

  export type discountitemsUpdateManyWithWhereWithoutDiscountInput = {
    where: discountitemsScalarWhereInput
    data: XOR<discountitemsUpdateManyMutationInput, discountitemsUncheckedUpdateManyWithoutDiscountitemsInput>
  }

  export type discountitemsScalarWhereInput = {
    AND?: Enumerable<discountitemsScalarWhereInput>
    OR?: Enumerable<discountitemsScalarWhereInput>
    NOT?: Enumerable<discountitemsScalarWhereInput>
    discid?: StringFilter | string
    productid?: StringFilter | string
  }

  export type discountCreateWithoutDiscountitemsInput = {
    id: string
    discname?: string | null
    type?: number | null
    discvalue?: number | null
    minpurchase?: Decimal | DecimalJsLike | number | string | null
    maxdisc?: Decimal | DecimalJsLike | number | string | null
  }

  export type discountUncheckedCreateWithoutDiscountitemsInput = {
    id: string
    discname?: string | null
    type?: number | null
    discvalue?: number | null
    minpurchase?: Decimal | DecimalJsLike | number | string | null
    maxdisc?: Decimal | DecimalJsLike | number | string | null
  }

  export type discountCreateOrConnectWithoutDiscountitemsInput = {
    where: discountWhereUniqueInput
    create: XOR<discountCreateWithoutDiscountitemsInput, discountUncheckedCreateWithoutDiscountitemsInput>
  }

  export type productCreateWithoutDiscountitemsInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutDiscountitemsInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutDiscountitemsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutDiscountitemsInput, productUncheckedCreateWithoutDiscountitemsInput>
  }

  export type discountUpsertWithoutDiscountitemsInput = {
    update: XOR<discountUpdateWithoutDiscountitemsInput, discountUncheckedUpdateWithoutDiscountitemsInput>
    create: XOR<discountCreateWithoutDiscountitemsInput, discountUncheckedCreateWithoutDiscountitemsInput>
  }

  export type discountUpdateWithoutDiscountitemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type discountUncheckedUpdateWithoutDiscountitemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    discname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    discvalue?: NullableIntFieldUpdateOperationsInput | number | null
    minpurchase?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxdisc?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type productUpsertWithoutDiscountitemsInput = {
    update: XOR<productUpdateWithoutDiscountitemsInput, productUncheckedUpdateWithoutDiscountitemsInput>
    create: XOR<productCreateWithoutDiscountitemsInput, productUncheckedCreateWithoutDiscountitemsInput>
  }

  export type productUpdateWithoutDiscountitemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutDiscountitemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ordersCreateWithoutOrderdetailsInput = {
    id: string
    paymentdetails: paymentdetailsCreateNestedOneWithoutOrdersInput
    paymentservice: paymentserviceCreateNestedOneWithoutOrdersInput
    users: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrderdetailsInput = {
    id: string
    userid: string
    paydetid: string
    payserviceid: string
  }

  export type ordersCreateOrConnectWithoutOrderdetailsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
  }

  export type productCreateWithoutOrderdetailsInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrderdetailsInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrderdetailsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrderdetailsInput, productUncheckedCreateWithoutOrderdetailsInput>
  }

  export type deliveryserviceCreateWithoutOrderdetailsInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type deliveryserviceUncheckedCreateWithoutOrderdetailsInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type deliveryserviceCreateOrConnectWithoutOrderdetailsInput = {
    where: deliveryserviceWhereUniqueInput
    create: XOR<deliveryserviceCreateWithoutOrderdetailsInput, deliveryserviceUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ordersUpsertWithoutOrderdetailsInput = {
    update: XOR<ordersUpdateWithoutOrderdetailsInput, ordersUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<ordersCreateWithoutOrderdetailsInput, ordersUncheckedCreateWithoutOrderdetailsInput>
  }

  export type ordersUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentdetails?: paymentdetailsUpdateOneRequiredWithoutOrdersNestedInput
    paymentservice?: paymentserviceUpdateOneRequiredWithoutOrdersNestedInput
    users?: usersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    paydetid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
  }

  export type productUpsertWithoutOrderdetailsInput = {
    update: XOR<productUpdateWithoutOrderdetailsInput, productUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<productCreateWithoutOrderdetailsInput, productUncheckedCreateWithoutOrderdetailsInput>
  }

  export type productUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type deliveryserviceUpsertWithoutOrderdetailsInput = {
    update: XOR<deliveryserviceUpdateWithoutOrderdetailsInput, deliveryserviceUncheckedUpdateWithoutOrderdetailsInput>
    create: XOR<deliveryserviceCreateWithoutOrderdetailsInput, deliveryserviceUncheckedCreateWithoutOrderdetailsInput>
  }

  export type deliveryserviceUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type deliveryserviceUncheckedUpdateWithoutOrderdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type orderdetailsCreateWithoutOrdersInput = {
    quantity?: number | null
    product: productCreateNestedOneWithoutOrderdetailsInput
    deliveryservice: deliveryserviceCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateWithoutOrdersInput = {
    productid: string
    quantity?: number | null
    deliveryid: string
  }

  export type orderdetailsCreateOrConnectWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    create: XOR<orderdetailsCreateWithoutOrdersInput, orderdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsCreateManyOrdersInputEnvelope = {
    data: Enumerable<orderdetailsCreateManyOrdersInput>
    skipDuplicates?: boolean
  }

  export type paymentdetailsCreateWithoutOrdersInput = {
    id: string
    total?: Decimal | DecimalJsLike | number | string | null
    status?: paymentdetails_status | null
  }

  export type paymentdetailsUncheckedCreateWithoutOrdersInput = {
    id: string
    total?: Decimal | DecimalJsLike | number | string | null
    status?: paymentdetails_status | null
  }

  export type paymentdetailsCreateOrConnectWithoutOrdersInput = {
    where: paymentdetailsWhereUniqueInput
    create: XOR<paymentdetailsCreateWithoutOrdersInput, paymentdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type paymentserviceCreateWithoutOrdersInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type paymentserviceUncheckedCreateWithoutOrdersInput = {
    id: string
    name?: string | null
    fee?: Decimal | DecimalJsLike | number | string | null
  }

  export type paymentserviceCreateOrConnectWithoutOrdersInput = {
    where: paymentserviceWhereUniqueInput
    create: XOR<paymentserviceCreateWithoutOrdersInput, paymentserviceUncheckedCreateWithoutOrdersInput>
  }

  export type usersCreateWithoutOrdersInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartCreateNestedManyWithoutUsersInput
    shop?: shopCreateNestedManyWithoutUsersInput
    userreview?: userreviewCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutOrdersInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    shop?: shopUncheckedCreateNestedManyWithoutUsersInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutOrdersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    update: XOR<orderdetailsUpdateWithoutOrdersInput, orderdetailsUncheckedUpdateWithoutOrdersInput>
    create: XOR<orderdetailsCreateWithoutOrdersInput, orderdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type orderdetailsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: orderdetailsWhereUniqueInput
    data: XOR<orderdetailsUpdateWithoutOrdersInput, orderdetailsUncheckedUpdateWithoutOrdersInput>
  }

  export type orderdetailsUpdateManyWithWhereWithoutOrdersInput = {
    where: orderdetailsScalarWhereInput
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput>
  }

  export type paymentdetailsUpsertWithoutOrdersInput = {
    update: XOR<paymentdetailsUpdateWithoutOrdersInput, paymentdetailsUncheckedUpdateWithoutOrdersInput>
    create: XOR<paymentdetailsCreateWithoutOrdersInput, paymentdetailsUncheckedCreateWithoutOrdersInput>
  }

  export type paymentdetailsUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
  }

  export type paymentdetailsUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    total?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: NullableEnumpaymentdetails_statusFieldUpdateOperationsInput | paymentdetails_status | null
  }

  export type paymentserviceUpsertWithoutOrdersInput = {
    update: XOR<paymentserviceUpdateWithoutOrdersInput, paymentserviceUncheckedUpdateWithoutOrdersInput>
    create: XOR<paymentserviceCreateWithoutOrdersInput, paymentserviceUncheckedCreateWithoutOrdersInput>
  }

  export type paymentserviceUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type paymentserviceUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type usersUpsertWithoutOrdersInput = {
    update: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
  }

  export type usersUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUpdateManyWithoutUsersNestedInput
    shop?: shopUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    shop?: shopUncheckedUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ordersCreateWithoutPaymentdetailsInput = {
    id: string
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
    paymentservice: paymentserviceCreateNestedOneWithoutOrdersInput
    users: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutPaymentdetailsInput = {
    id: string
    userid: string
    payserviceid: string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutPaymentdetailsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutPaymentdetailsInput, ordersUncheckedCreateWithoutPaymentdetailsInput>
  }

  export type ordersCreateManyPaymentdetailsInputEnvelope = {
    data: Enumerable<ordersCreateManyPaymentdetailsInput>
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutPaymentdetailsInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutPaymentdetailsInput, ordersUncheckedUpdateWithoutPaymentdetailsInput>
    create: XOR<ordersCreateWithoutPaymentdetailsInput, ordersUncheckedCreateWithoutPaymentdetailsInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutPaymentdetailsInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutPaymentdetailsInput, ordersUncheckedUpdateWithoutPaymentdetailsInput>
  }

  export type ordersUpdateManyWithWhereWithoutPaymentdetailsInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type ordersScalarWhereInput = {
    AND?: Enumerable<ordersScalarWhereInput>
    OR?: Enumerable<ordersScalarWhereInput>
    NOT?: Enumerable<ordersScalarWhereInput>
    id?: StringFilter | string
    userid?: StringFilter | string
    paydetid?: StringFilter | string
    payserviceid?: StringFilter | string
  }

  export type ordersCreateWithoutPaymentserviceInput = {
    id: string
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
    paymentdetails: paymentdetailsCreateNestedOneWithoutOrdersInput
    users: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutPaymentserviceInput = {
    id: string
    userid: string
    paydetid: string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutPaymentserviceInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutPaymentserviceInput, ordersUncheckedCreateWithoutPaymentserviceInput>
  }

  export type ordersCreateManyPaymentserviceInputEnvelope = {
    data: Enumerable<ordersCreateManyPaymentserviceInput>
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutPaymentserviceInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutPaymentserviceInput, ordersUncheckedUpdateWithoutPaymentserviceInput>
    create: XOR<ordersCreateWithoutPaymentserviceInput, ordersUncheckedCreateWithoutPaymentserviceInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutPaymentserviceInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutPaymentserviceInput, ordersUncheckedUpdateWithoutPaymentserviceInput>
  }

  export type ordersUpdateManyWithWhereWithoutPaymentserviceInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type cartCreateWithoutProductInput = {
    quantity?: number | null
    users: usersCreateNestedOneWithoutCartInput
  }

  export type cartUncheckedCreateWithoutProductInput = {
    userid: string
    quantity?: number | null
  }

  export type cartCreateOrConnectWithoutProductInput = {
    where: cartWhereUniqueInput
    create: XOR<cartCreateWithoutProductInput, cartUncheckedCreateWithoutProductInput>
  }

  export type cartCreateManyProductInputEnvelope = {
    data: Enumerable<cartCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type categoryprodCreateWithoutProductInput = {
    category: categoryCreateNestedOneWithoutCategoryprodInput
  }

  export type categoryprodUncheckedCreateWithoutProductInput = {
    categoryid: number
  }

  export type categoryprodCreateOrConnectWithoutProductInput = {
    where: categoryprodWhereUniqueInput
    create: XOR<categoryprodCreateWithoutProductInput, categoryprodUncheckedCreateWithoutProductInput>
  }

  export type categoryprodCreateManyProductInputEnvelope = {
    data: Enumerable<categoryprodCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type discountitemsCreateWithoutProductInput = {
    discount: discountCreateNestedOneWithoutDiscountitemsInput
  }

  export type discountitemsUncheckedCreateWithoutProductInput = {
    discid: string
  }

  export type discountitemsCreateOrConnectWithoutProductInput = {
    where: discountitemsWhereUniqueInput
    create: XOR<discountitemsCreateWithoutProductInput, discountitemsUncheckedCreateWithoutProductInput>
  }

  export type discountitemsCreateManyProductInputEnvelope = {
    data: Enumerable<discountitemsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type orderdetailsCreateWithoutProductInput = {
    quantity?: number | null
    orders: ordersCreateNestedOneWithoutOrderdetailsInput
    deliveryservice: deliveryserviceCreateNestedOneWithoutOrderdetailsInput
  }

  export type orderdetailsUncheckedCreateWithoutProductInput = {
    orderid: string
    quantity?: number | null
    deliveryid: string
  }

  export type orderdetailsCreateOrConnectWithoutProductInput = {
    where: orderdetailsWhereUniqueInput
    create: XOR<orderdetailsCreateWithoutProductInput, orderdetailsUncheckedCreateWithoutProductInput>
  }

  export type orderdetailsCreateManyProductInputEnvelope = {
    data: Enumerable<orderdetailsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type shopCreateWithoutProductInput = {
    id: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
    users: usersCreateNestedOneWithoutShopInput
  }

  export type shopUncheckedCreateWithoutProductInput = {
    id: string
    ownerid: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
  }

  export type shopCreateOrConnectWithoutProductInput = {
    where: shopWhereUniqueInput
    create: XOR<shopCreateWithoutProductInput, shopUncheckedCreateWithoutProductInput>
  }

  export type productimgCreateWithoutProductInput = {
    imagepath: string
    type?: string | null
  }

  export type productimgUncheckedCreateWithoutProductInput = {
    imagepath: string
    type?: string | null
  }

  export type productimgCreateOrConnectWithoutProductInput = {
    where: productimgWhereUniqueInput
    create: XOR<productimgCreateWithoutProductInput, productimgUncheckedCreateWithoutProductInput>
  }

  export type productimgCreateManyProductInputEnvelope = {
    data: Enumerable<productimgCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type userreviewCreateWithoutProductInput = {
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
    users: usersCreateNestedOneWithoutUserreviewInput
  }

  export type userreviewUncheckedCreateWithoutProductInput = {
    userid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type userreviewCreateOrConnectWithoutProductInput = {
    where: userreviewWhereUniqueInput
    create: XOR<userreviewCreateWithoutProductInput, userreviewUncheckedCreateWithoutProductInput>
  }

  export type userreviewCreateManyProductInputEnvelope = {
    data: Enumerable<userreviewCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type cartUpsertWithWhereUniqueWithoutProductInput = {
    where: cartWhereUniqueInput
    update: XOR<cartUpdateWithoutProductInput, cartUncheckedUpdateWithoutProductInput>
    create: XOR<cartCreateWithoutProductInput, cartUncheckedCreateWithoutProductInput>
  }

  export type cartUpdateWithWhereUniqueWithoutProductInput = {
    where: cartWhereUniqueInput
    data: XOR<cartUpdateWithoutProductInput, cartUncheckedUpdateWithoutProductInput>
  }

  export type cartUpdateManyWithWhereWithoutProductInput = {
    where: cartScalarWhereInput
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyWithoutCartInput>
  }

  export type cartScalarWhereInput = {
    AND?: Enumerable<cartScalarWhereInput>
    OR?: Enumerable<cartScalarWhereInput>
    NOT?: Enumerable<cartScalarWhereInput>
    userid?: StringFilter | string
    productid?: StringFilter | string
    quantity?: IntNullableFilter | number | null
  }

  export type categoryprodUpsertWithWhereUniqueWithoutProductInput = {
    where: categoryprodWhereUniqueInput
    update: XOR<categoryprodUpdateWithoutProductInput, categoryprodUncheckedUpdateWithoutProductInput>
    create: XOR<categoryprodCreateWithoutProductInput, categoryprodUncheckedCreateWithoutProductInput>
  }

  export type categoryprodUpdateWithWhereUniqueWithoutProductInput = {
    where: categoryprodWhereUniqueInput
    data: XOR<categoryprodUpdateWithoutProductInput, categoryprodUncheckedUpdateWithoutProductInput>
  }

  export type categoryprodUpdateManyWithWhereWithoutProductInput = {
    where: categoryprodScalarWhereInput
    data: XOR<categoryprodUpdateManyMutationInput, categoryprodUncheckedUpdateManyWithoutCategoryprodInput>
  }

  export type discountitemsUpsertWithWhereUniqueWithoutProductInput = {
    where: discountitemsWhereUniqueInput
    update: XOR<discountitemsUpdateWithoutProductInput, discountitemsUncheckedUpdateWithoutProductInput>
    create: XOR<discountitemsCreateWithoutProductInput, discountitemsUncheckedCreateWithoutProductInput>
  }

  export type discountitemsUpdateWithWhereUniqueWithoutProductInput = {
    where: discountitemsWhereUniqueInput
    data: XOR<discountitemsUpdateWithoutProductInput, discountitemsUncheckedUpdateWithoutProductInput>
  }

  export type discountitemsUpdateManyWithWhereWithoutProductInput = {
    where: discountitemsScalarWhereInput
    data: XOR<discountitemsUpdateManyMutationInput, discountitemsUncheckedUpdateManyWithoutDiscountitemsInput>
  }

  export type orderdetailsUpsertWithWhereUniqueWithoutProductInput = {
    where: orderdetailsWhereUniqueInput
    update: XOR<orderdetailsUpdateWithoutProductInput, orderdetailsUncheckedUpdateWithoutProductInput>
    create: XOR<orderdetailsCreateWithoutProductInput, orderdetailsUncheckedCreateWithoutProductInput>
  }

  export type orderdetailsUpdateWithWhereUniqueWithoutProductInput = {
    where: orderdetailsWhereUniqueInput
    data: XOR<orderdetailsUpdateWithoutProductInput, orderdetailsUncheckedUpdateWithoutProductInput>
  }

  export type orderdetailsUpdateManyWithWhereWithoutProductInput = {
    where: orderdetailsScalarWhereInput
    data: XOR<orderdetailsUpdateManyMutationInput, orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput>
  }

  export type shopUpsertWithoutProductInput = {
    update: XOR<shopUpdateWithoutProductInput, shopUncheckedUpdateWithoutProductInput>
    create: XOR<shopCreateWithoutProductInput, shopUncheckedCreateWithoutProductInput>
  }

  export type shopUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutShopNestedInput
  }

  export type shopUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerid?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productimgUpsertWithWhereUniqueWithoutProductInput = {
    where: productimgWhereUniqueInput
    update: XOR<productimgUpdateWithoutProductInput, productimgUncheckedUpdateWithoutProductInput>
    create: XOR<productimgCreateWithoutProductInput, productimgUncheckedCreateWithoutProductInput>
  }

  export type productimgUpdateWithWhereUniqueWithoutProductInput = {
    where: productimgWhereUniqueInput
    data: XOR<productimgUpdateWithoutProductInput, productimgUncheckedUpdateWithoutProductInput>
  }

  export type productimgUpdateManyWithWhereWithoutProductInput = {
    where: productimgScalarWhereInput
    data: XOR<productimgUpdateManyMutationInput, productimgUncheckedUpdateManyWithoutProductimgInput>
  }

  export type productimgScalarWhereInput = {
    AND?: Enumerable<productimgScalarWhereInput>
    OR?: Enumerable<productimgScalarWhereInput>
    NOT?: Enumerable<productimgScalarWhereInput>
    productid?: StringFilter | string
    imagepath?: StringFilter | string
    type?: StringNullableFilter | string | null
  }

  export type userreviewUpsertWithWhereUniqueWithoutProductInput = {
    where: userreviewWhereUniqueInput
    update: XOR<userreviewUpdateWithoutProductInput, userreviewUncheckedUpdateWithoutProductInput>
    create: XOR<userreviewCreateWithoutProductInput, userreviewUncheckedCreateWithoutProductInput>
  }

  export type userreviewUpdateWithWhereUniqueWithoutProductInput = {
    where: userreviewWhereUniqueInput
    data: XOR<userreviewUpdateWithoutProductInput, userreviewUncheckedUpdateWithoutProductInput>
  }

  export type userreviewUpdateManyWithWhereWithoutProductInput = {
    where: userreviewScalarWhereInput
    data: XOR<userreviewUpdateManyMutationInput, userreviewUncheckedUpdateManyWithoutUserreviewInput>
  }

  export type userreviewScalarWhereInput = {
    AND?: Enumerable<userreviewScalarWhereInput>
    OR?: Enumerable<userreviewScalarWhereInput>
    NOT?: Enumerable<userreviewScalarWhereInput>
    userid?: StringFilter | string
    productid?: StringFilter | string
    rating?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    review?: StringNullableFilter | string | null
  }

  export type productCreateWithoutProductimgInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutProductimgInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutProductimgInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutProductimgInput, productUncheckedCreateWithoutProductimgInput>
  }

  export type productUpsertWithoutProductimgInput = {
    update: XOR<productUpdateWithoutProductimgInput, productUncheckedUpdateWithoutProductimgInput>
    create: XOR<productCreateWithoutProductimgInput, productUncheckedCreateWithoutProductimgInput>
  }

  export type productUpdateWithoutProductimgInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutProductimgInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateWithoutShopInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
    userreview?: userreviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutShopInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutShopInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutShopInput, productUncheckedCreateWithoutShopInput>
  }

  export type productCreateManyShopInputEnvelope = {
    data: Enumerable<productCreateManyShopInput>
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutShopInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartCreateNestedManyWithoutUsersInput
    orders?: ordersCreateNestedManyWithoutUsersInput
    userreview?: userreviewCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutShopInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    userreview?: userreviewUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutShopInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutShopInput, usersUncheckedCreateWithoutShopInput>
  }

  export type productUpsertWithWhereUniqueWithoutShopInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutShopInput, productUncheckedUpdateWithoutShopInput>
    create: XOR<productCreateWithoutShopInput, productUncheckedCreateWithoutShopInput>
  }

  export type productUpdateWithWhereUniqueWithoutShopInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutShopInput, productUncheckedUpdateWithoutShopInput>
  }

  export type productUpdateManyWithWhereWithoutShopInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductInput>
  }

  export type productScalarWhereInput = {
    AND?: Enumerable<productScalarWhereInput>
    OR?: Enumerable<productScalarWhereInput>
    NOT?: Enumerable<productScalarWhereInput>
    id?: StringFilter | string
    shopid?: StringFilter | string
    productname?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    price?: DecimalNullableFilter | Decimal | DecimalJsLike | number | string | null
    stock?: IntNullableFilter | number | null
  }

  export type usersUpsertWithoutShopInput = {
    update: XOR<usersUpdateWithoutShopInput, usersUncheckedUpdateWithoutShopInput>
    create: XOR<usersCreateWithoutShopInput, usersUncheckedCreateWithoutShopInput>
  }

  export type usersUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUpdateManyWithoutUsersNestedInput
    orders?: ordersUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type categoryCreateWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryUncheckedCreateWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_subcatidTocategoryInput
  }

  export type categoryCreateOrConnectWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_maincatidTocategoryInput>
  }

  export type categoryCreateWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_maincatidTocategory?: subcategoryCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
  }

  export type categoryUncheckedCreateWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    id: number
    name?: string | null
    imagepath?: string | null
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutCategoryInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedCreateNestedManyWithoutCategory_subcategory_maincatidTocategoryInput
  }

  export type categoryCreateOrConnectWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_subcatidTocategoryInput>
  }

  export type categoryUpsertWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    update: XOR<categoryUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput>
    create: XOR<categoryCreateWithoutSubcategory_subcategory_maincatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_maincatidTocategoryInput>
  }

  export type categoryUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUncheckedUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_subcatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_subcatidTocategoryNestedInput
  }

  export type categoryUpsertWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    update: XOR<categoryUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput>
    create: XOR<categoryCreateWithoutSubcategory_subcategory_subcatidTocategoryInput, categoryUncheckedCreateWithoutSubcategory_subcategory_subcatidTocategoryInput>
  }

  export type categoryUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    categoryprod?: categoryprodUncheckedUpdateManyWithoutCategoryNestedInput
    subcategory_subcategory_maincatidTocategory?: subcategoryUncheckedUpdateManyWithoutCategory_subcategory_maincatidTocategoryNestedInput
  }

  export type productCreateWithoutUserreviewInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodCreateNestedManyWithoutProductInput
    discountitems?: discountitemsCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsCreateNestedManyWithoutProductInput
    shop: shopCreateNestedOneWithoutProductInput
    productimg?: productimgCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutUserreviewInput = {
    id: string
    shopid: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
    cart?: cartUncheckedCreateNestedManyWithoutProductInput
    categoryprod?: categoryprodUncheckedCreateNestedManyWithoutProductInput
    discountitems?: discountitemsUncheckedCreateNestedManyWithoutProductInput
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutProductInput
    productimg?: productimgUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutUserreviewInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutUserreviewInput, productUncheckedCreateWithoutUserreviewInput>
  }

  export type usersCreateWithoutUserreviewInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartCreateNestedManyWithoutUsersInput
    orders?: ordersCreateNestedManyWithoutUsersInput
    shop?: shopCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUserreviewInput = {
    id: string
    name?: string | null
    username?: string | null
    email?: string | null
    password?: string | null
    shopowner?: boolean | null
    saldo?: Decimal | DecimalJsLike | number | string | null
    imagepath?: string | null
    cart?: cartUncheckedCreateNestedManyWithoutUsersInput
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    shop?: shopUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUserreviewInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUserreviewInput, usersUncheckedCreateWithoutUserreviewInput>
  }

  export type productUpsertWithoutUserreviewInput = {
    update: XOR<productUpdateWithoutUserreviewInput, productUncheckedUpdateWithoutUserreviewInput>
    create: XOR<productCreateWithoutUserreviewInput, productUncheckedCreateWithoutUserreviewInput>
  }

  export type productUpdateWithoutUserreviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    shop?: shopUpdateOneRequiredWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutUserreviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopid?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersUpsertWithoutUserreviewInput = {
    update: XOR<usersUpdateWithoutUserreviewInput, usersUncheckedUpdateWithoutUserreviewInput>
    create: XOR<usersCreateWithoutUserreviewInput, usersUncheckedCreateWithoutUserreviewInput>
  }

  export type usersUpdateWithoutUserreviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUpdateManyWithoutUsersNestedInput
    orders?: ordersUpdateManyWithoutUsersNestedInput
    shop?: shopUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUserreviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    shopowner?: NullableBoolFieldUpdateOperationsInput | boolean | null
    saldo?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    cart?: cartUncheckedUpdateManyWithoutUsersNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    shop?: shopUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type cartCreateWithoutUsersInput = {
    quantity?: number | null
    product: productCreateNestedOneWithoutCartInput
  }

  export type cartUncheckedCreateWithoutUsersInput = {
    productid: string
    quantity?: number | null
  }

  export type cartCreateOrConnectWithoutUsersInput = {
    where: cartWhereUniqueInput
    create: XOR<cartCreateWithoutUsersInput, cartUncheckedCreateWithoutUsersInput>
  }

  export type cartCreateManyUsersInputEnvelope = {
    data: Enumerable<cartCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutUsersInput = {
    id: string
    orderdetails?: orderdetailsCreateNestedManyWithoutOrdersInput
    paymentdetails: paymentdetailsCreateNestedOneWithoutOrdersInput
    paymentservice: paymentserviceCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUsersInput = {
    id: string
    paydetid: string
    payserviceid: string
    orderdetails?: orderdetailsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutUsersInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput>
  }

  export type ordersCreateManyUsersInputEnvelope = {
    data: Enumerable<ordersCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type shopCreateWithoutUsersInput = {
    id: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
    product?: productCreateNestedManyWithoutShopInput
  }

  export type shopUncheckedCreateWithoutUsersInput = {
    id: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
    product?: productUncheckedCreateNestedManyWithoutShopInput
  }

  export type shopCreateOrConnectWithoutUsersInput = {
    where: shopWhereUniqueInput
    create: XOR<shopCreateWithoutUsersInput, shopUncheckedCreateWithoutUsersInput>
  }

  export type shopCreateManyUsersInputEnvelope = {
    data: Enumerable<shopCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type userreviewCreateWithoutUsersInput = {
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
    product: productCreateNestedOneWithoutUserreviewInput
  }

  export type userreviewUncheckedCreateWithoutUsersInput = {
    productid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type userreviewCreateOrConnectWithoutUsersInput = {
    where: userreviewWhereUniqueInput
    create: XOR<userreviewCreateWithoutUsersInput, userreviewUncheckedCreateWithoutUsersInput>
  }

  export type userreviewCreateManyUsersInputEnvelope = {
    data: Enumerable<userreviewCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type cartUpsertWithWhereUniqueWithoutUsersInput = {
    where: cartWhereUniqueInput
    update: XOR<cartUpdateWithoutUsersInput, cartUncheckedUpdateWithoutUsersInput>
    create: XOR<cartCreateWithoutUsersInput, cartUncheckedCreateWithoutUsersInput>
  }

  export type cartUpdateWithWhereUniqueWithoutUsersInput = {
    where: cartWhereUniqueInput
    data: XOR<cartUpdateWithoutUsersInput, cartUncheckedUpdateWithoutUsersInput>
  }

  export type cartUpdateManyWithWhereWithoutUsersInput = {
    where: cartScalarWhereInput
    data: XOR<cartUpdateManyMutationInput, cartUncheckedUpdateManyWithoutCartInput>
  }

  export type ordersUpsertWithWhereUniqueWithoutUsersInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUsersInput, ordersUncheckedUpdateWithoutUsersInput>
    create: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUsersInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUsersInput, ordersUncheckedUpdateWithoutUsersInput>
  }

  export type ordersUpdateManyWithWhereWithoutUsersInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutOrdersInput>
  }

  export type shopUpsertWithWhereUniqueWithoutUsersInput = {
    where: shopWhereUniqueInput
    update: XOR<shopUpdateWithoutUsersInput, shopUncheckedUpdateWithoutUsersInput>
    create: XOR<shopCreateWithoutUsersInput, shopUncheckedCreateWithoutUsersInput>
  }

  export type shopUpdateWithWhereUniqueWithoutUsersInput = {
    where: shopWhereUniqueInput
    data: XOR<shopUpdateWithoutUsersInput, shopUncheckedUpdateWithoutUsersInput>
  }

  export type shopUpdateManyWithWhereWithoutUsersInput = {
    where: shopScalarWhereInput
    data: XOR<shopUpdateManyMutationInput, shopUncheckedUpdateManyWithoutShopInput>
  }

  export type shopScalarWhereInput = {
    AND?: Enumerable<shopScalarWhereInput>
    OR?: Enumerable<shopScalarWhereInput>
    NOT?: Enumerable<shopScalarWhereInput>
    id?: StringFilter | string
    ownerid?: StringFilter | string
    shopname?: StringNullableFilter | string | null
    shoptype?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    imagepath?: StringNullableFilter | string | null
  }

  export type userreviewUpsertWithWhereUniqueWithoutUsersInput = {
    where: userreviewWhereUniqueInput
    update: XOR<userreviewUpdateWithoutUsersInput, userreviewUncheckedUpdateWithoutUsersInput>
    create: XOR<userreviewCreateWithoutUsersInput, userreviewUncheckedCreateWithoutUsersInput>
  }

  export type userreviewUpdateWithWhereUniqueWithoutUsersInput = {
    where: userreviewWhereUniqueInput
    data: XOR<userreviewUpdateWithoutUsersInput, userreviewUncheckedUpdateWithoutUsersInput>
  }

  export type userreviewUpdateManyWithWhereWithoutUsersInput = {
    where: userreviewScalarWhereInput
    data: XOR<userreviewUpdateManyMutationInput, userreviewUncheckedUpdateManyWithoutUserreviewInput>
  }

  export type categoryprodCreateManyCategoryInput = {
    productid: string
  }

  export type subcategoryCreateManyCategory_subcategory_maincatidTocategoryInput = {
    subcatid: number
  }

  export type subcategoryCreateManyCategory_subcategory_subcatidTocategoryInput = {
    maincatid: number
  }

  export type categoryprodUpdateWithoutCategoryInput = {
    product?: productUpdateOneRequiredWithoutCategoryprodNestedInput
  }

  export type categoryprodUncheckedUpdateWithoutCategoryInput = {
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type categoryprodUncheckedUpdateManyWithoutCategoryprodInput = {
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type subcategoryUpdateWithoutCategory_subcategory_maincatidTocategoryInput = {
    category_subcategory_subcatidTocategory?: categoryUpdateOneRequiredWithoutSubcategory_subcategory_subcatidTocategoryNestedInput
  }

  export type subcategoryUncheckedUpdateWithoutCategory_subcategory_maincatidTocategoryInput = {
    subcatid?: IntFieldUpdateOperationsInput | number
  }

  export type subcategoryUncheckedUpdateManyWithoutSubcategory_subcategory_maincatidTocategoryInput = {
    subcatid?: IntFieldUpdateOperationsInput | number
  }

  export type subcategoryUpdateWithoutCategory_subcategory_subcatidTocategoryInput = {
    category_subcategory_maincatidTocategory?: categoryUpdateOneRequiredWithoutSubcategory_subcategory_maincatidTocategoryNestedInput
  }

  export type subcategoryUncheckedUpdateWithoutCategory_subcategory_subcatidTocategoryInput = {
    maincatid?: IntFieldUpdateOperationsInput | number
  }

  export type subcategoryUncheckedUpdateManyWithoutSubcategory_subcategory_subcatidTocategoryInput = {
    maincatid?: IntFieldUpdateOperationsInput | number
  }

  export type orderdetailsCreateManyDeliveryserviceInput = {
    orderid: string
    productid: string
    quantity?: number | null
  }

  export type orderdetailsUpdateWithoutDeliveryserviceInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
    product?: productUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateWithoutDeliveryserviceInput = {
    orderid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type orderdetailsUncheckedUpdateManyWithoutOrderdetailsInput = {
    orderid?: StringFieldUpdateOperationsInput | string
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type discountitemsCreateManyDiscountInput = {
    productid: string
  }

  export type discountitemsUpdateWithoutDiscountInput = {
    product?: productUpdateOneRequiredWithoutDiscountitemsNestedInput
  }

  export type discountitemsUncheckedUpdateWithoutDiscountInput = {
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type discountitemsUncheckedUpdateManyWithoutDiscountitemsInput = {
    productid?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsCreateManyOrdersInput = {
    productid: string
    quantity?: number | null
    deliveryid: string
  }

  export type orderdetailsUpdateWithoutOrdersInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product?: productUpdateOneRequiredWithoutOrderdetailsNestedInput
    deliveryservice?: deliveryserviceUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateWithoutOrdersInput = {
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryid?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateManyPaymentdetailsInput = {
    id: string
    userid: string
    payserviceid: string
  }

  export type ordersUpdateWithoutPaymentdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
    paymentservice?: paymentserviceUpdateOneRequiredWithoutOrdersNestedInput
    users?: usersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutPaymentdetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
  }

  export type ordersCreateManyPaymentserviceInput = {
    id: string
    userid: string
    paydetid: string
  }

  export type ordersUpdateWithoutPaymentserviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
    paymentdetails?: paymentdetailsUpdateOneRequiredWithoutOrdersNestedInput
    users?: usersUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutPaymentserviceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userid?: StringFieldUpdateOperationsInput | string
    paydetid?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type cartCreateManyProductInput = {
    userid: string
    quantity?: number | null
  }

  export type categoryprodCreateManyProductInput = {
    categoryid: number
  }

  export type discountitemsCreateManyProductInput = {
    discid: string
  }

  export type orderdetailsCreateManyProductInput = {
    orderid: string
    quantity?: number | null
    deliveryid: string
  }

  export type productimgCreateManyProductInput = {
    imagepath: string
    type?: string | null
  }

  export type userreviewCreateManyProductInput = {
    userid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type cartUpdateWithoutProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    users?: usersUpdateOneRequiredWithoutCartNestedInput
  }

  export type cartUncheckedUpdateWithoutProductInput = {
    userid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartUncheckedUpdateManyWithoutCartInput = {
    userid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type categoryprodUpdateWithoutProductInput = {
    category?: categoryUpdateOneRequiredWithoutCategoryprodNestedInput
  }

  export type categoryprodUncheckedUpdateWithoutProductInput = {
    categoryid?: IntFieldUpdateOperationsInput | number
  }

  export type discountitemsUpdateWithoutProductInput = {
    discount?: discountUpdateOneRequiredWithoutDiscountitemsNestedInput
  }

  export type discountitemsUncheckedUpdateWithoutProductInput = {
    discid?: StringFieldUpdateOperationsInput | string
  }

  export type orderdetailsUpdateWithoutProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    orders?: ordersUpdateOneRequiredWithoutOrderdetailsNestedInput
    deliveryservice?: deliveryserviceUpdateOneRequiredWithoutOrderdetailsNestedInput
  }

  export type orderdetailsUncheckedUpdateWithoutProductInput = {
    orderid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    deliveryid?: StringFieldUpdateOperationsInput | string
  }

  export type productimgUpdateWithoutProductInput = {
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productimgUncheckedUpdateWithoutProductInput = {
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productimgUncheckedUpdateManyWithoutProductimgInput = {
    imagepath?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userreviewUpdateWithoutProductInput = {
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutUserreviewNestedInput
  }

  export type userreviewUncheckedUpdateWithoutProductInput = {
    userid?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userreviewUncheckedUpdateManyWithoutUserreviewInput = {
    userid?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productCreateManyShopInput = {
    id: string
    productname?: string | null
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    stock?: number | null
  }

  export type productUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUpdateManyWithoutProductNestedInput
    productimg?: productimgUpdateManyWithoutProductNestedInput
    userreview?: userreviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
    cart?: cartUncheckedUpdateManyWithoutProductNestedInput
    categoryprod?: categoryprodUncheckedUpdateManyWithoutProductNestedInput
    discountitems?: discountitemsUncheckedUpdateManyWithoutProductNestedInput
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutProductNestedInput
    productimg?: productimgUncheckedUpdateManyWithoutProductNestedInput
    userreview?: userreviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productname?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    stock?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type cartCreateManyUsersInput = {
    productid: string
    quantity?: number | null
  }

  export type ordersCreateManyUsersInput = {
    id: string
    paydetid: string
    payserviceid: string
  }

  export type shopCreateManyUsersInput = {
    id: string
    shopname?: string | null
    shoptype?: string | null
    address?: string | null
    imagepath?: string | null
  }

  export type userreviewCreateManyUsersInput = {
    productid: string
    rating?: Decimal | DecimalJsLike | number | string | null
    review?: string | null
  }

  export type cartUpdateWithoutUsersInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    product?: productUpdateOneRequiredWithoutCartNestedInput
  }

  export type cartUncheckedUpdateWithoutUsersInput = {
    productid?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ordersUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUpdateManyWithoutOrdersNestedInput
    paymentdetails?: paymentdetailsUpdateOneRequiredWithoutOrdersNestedInput
    paymentservice?: paymentserviceUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    paydetid?: StringFieldUpdateOperationsInput | string
    payserviceid?: StringFieldUpdateOperationsInput | string
    orderdetails?: orderdetailsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type shopUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateManyWithoutShopNestedInput
  }

  export type shopUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUncheckedUpdateManyWithoutShopNestedInput
  }

  export type shopUncheckedUpdateManyWithoutShopInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopname?: NullableStringFieldUpdateOperationsInput | string | null
    shoptype?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    imagepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userreviewUpdateWithoutUsersInput = {
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    product?: productUpdateOneRequiredWithoutUserreviewNestedInput
  }

  export type userreviewUncheckedUpdateWithoutUsersInput = {
    productid?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}