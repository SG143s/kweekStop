
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.15.0
 * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
 */
Prisma.prismaVersion = {
  client: "4.15.0",
  engine: "8fbc245156db7124f997f4cecdd8d1219e360944"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.CartScalarFieldEnum = {
  userid: 'userid',
  productid: 'productid',
  quantity: 'quantity'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imagepath: 'imagepath'
};

exports.Prisma.CategoryprodScalarFieldEnum = {
  categoryid: 'categoryid',
  productid: 'productid'
};

exports.Prisma.DeliveryserviceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fee: 'fee'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  discname: 'discname',
  type: 'type',
  discvalue: 'discvalue',
  minpurchase: 'minpurchase',
  maxdisc: 'maxdisc'
};

exports.Prisma.DiscountitemsScalarFieldEnum = {
  discid: 'discid',
  productid: 'productid'
};

exports.Prisma.OrderdetailsScalarFieldEnum = {
  orderid: 'orderid',
  productid: 'productid',
  quantity: 'quantity',
  deliveryid: 'deliveryid'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  userid: 'userid',
  paydetid: 'paydetid',
  payserviceid: 'payserviceid'
};

exports.Prisma.PaymentdetailsScalarFieldEnum = {
  id: 'id',
  total: 'total',
  status: 'status'
};

exports.Prisma.PaymentserviceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  fee: 'fee'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  shopid: 'shopid',
  productname: 'productname',
  description: 'description',
  price: 'price',
  stock: 'stock'
};

exports.Prisma.ProductimgScalarFieldEnum = {
  productid: 'productid',
  imagepath: 'imagepath',
  type: 'type'
};

exports.Prisma.ShopScalarFieldEnum = {
  id: 'id',
  ownerid: 'ownerid',
  shopname: 'shopname',
  shoptype: 'shoptype',
  address: 'address',
  imagepath: 'imagepath'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.SubcategoryScalarFieldEnum = {
  maincatid: 'maincatid',
  subcatid: 'subcatid'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserreviewScalarFieldEnum = {
  userid: 'userid',
  productid: 'productid',
  rating: 'rating',
  review: 'review'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  password: 'password',
  shopowner: 'shopowner',
  saldo: 'saldo',
  imagepath: 'imagepath'
};
exports.paymentdetails_status = {
  paid: 'paid',
  unpaid: 'unpaid'
};

exports.Prisma.ModelName = {
  cart: 'cart',
  category: 'category',
  categoryprod: 'categoryprod',
  deliveryservice: 'deliveryservice',
  discount: 'discount',
  discountitems: 'discountitems',
  orderdetails: 'orderdetails',
  orders: 'orders',
  paymentdetails: 'paymentdetails',
  paymentservice: 'paymentservice',
  product: 'product',
  productimg: 'productimg',
  shop: 'shop',
  subcategory: 'subcategory',
  userreview: 'userreview',
  users: 'users'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
